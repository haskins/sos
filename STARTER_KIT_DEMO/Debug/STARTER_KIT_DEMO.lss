
STARTER_KIT_DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008724  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00408724  00408724  00010724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000d00  20000000  0040872c  00018000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000011b4  20000d00  00409430  00018d00  2**3
                  ALLOC
  4 .stack        00006004  20001eb4  0040a5e4  00018d00  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00018d00  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  00018d2a  2**0
                  CONTENTS, READONLY
  7 .debug_info   00025707  00000000  00000000  00018d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000063f2  00000000  00000000  0003e4a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000012d0  00000000  00000000  00044898  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00019024  00000000  00000000  00045b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001d3bc  00000000  00000000  0005eb8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00059726  00000000  00000000  0007bf48  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000f9dd  00000000  00000000  000d566e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001688  00000000  00000000  000e504b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000270c  00000000  00000000  000e66d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20004eb8 	.word	0x20004eb8
  400004:	004047cd 	.word	0x004047cd
  400008:	004047c9 	.word	0x004047c9
  40000c:	004047c9 	.word	0x004047c9
  400010:	004047c9 	.word	0x004047c9
  400014:	004047c9 	.word	0x004047c9
  400018:	004047c9 	.word	0x004047c9
	...
  40002c:	004032c1 	.word	0x004032c1
  400030:	004047c9 	.word	0x004047c9
  400034:	00000000 	.word	0x00000000
  400038:	00400305 	.word	0x00400305
  40003c:	00400261 	.word	0x00400261
  400040:	004047c9 	.word	0x004047c9
  400044:	004047c9 	.word	0x004047c9
  400048:	004047c9 	.word	0x004047c9
  40004c:	004032d5 	.word	0x004032d5
  400050:	004047c9 	.word	0x004047c9
  400054:	004047c9 	.word	0x004047c9
  400058:	004047c9 	.word	0x004047c9
  40005c:	004047c9 	.word	0x004047c9
  400060:	004047c9 	.word	0x004047c9
  400064:	004047c9 	.word	0x004047c9
  400068:	004047c9 	.word	0x004047c9
  40006c:	00404131 	.word	0x00404131
  400070:	0040414d 	.word	0x0040414d
  400074:	00404169 	.word	0x00404169
  400078:	004047c9 	.word	0x004047c9
  40007c:	004047c9 	.word	0x004047c9
  400080:	004047c9 	.word	0x004047c9
  400084:	004047c9 	.word	0x004047c9
  400088:	004047c9 	.word	0x004047c9
  40008c:	004047c9 	.word	0x004047c9
  400090:	004047c9 	.word	0x004047c9
  400094:	004047c9 	.word	0x004047c9
  400098:	004047c9 	.word	0x004047c9
  40009c:	004047c9 	.word	0x004047c9
  4000a0:	004047c9 	.word	0x004047c9
  4000a4:	004047c9 	.word	0x004047c9
  4000a8:	004047c9 	.word	0x004047c9
  4000ac:	004047c9 	.word	0x004047c9
  4000b0:	004047c9 	.word	0x004047c9
  4000b4:	004047c9 	.word	0x004047c9
  4000b8:	004047c9 	.word	0x004047c9
  4000bc:	004047c9 	.word	0x004047c9
  4000c0:	004047c9 	.word	0x004047c9
  4000c4:	004047c9 	.word	0x004047c9
  4000c8:	00401b6d 	.word	0x00401b6d
  4000cc:	004047c9 	.word	0x004047c9

004000d0 <deregister_tm_clones>:
  4000d0:	b508      	push	{r3, lr}
  4000d2:	4805      	ldr	r0, [pc, #20]	; (4000e8 <deregister_tm_clones+0x18>)
  4000d4:	4b05      	ldr	r3, [pc, #20]	; (4000ec <deregister_tm_clones+0x1c>)
  4000d6:	1a19      	subs	r1, r3, r0
  4000d8:	2906      	cmp	r1, #6
  4000da:	d800      	bhi.n	4000de <deregister_tm_clones+0xe>
  4000dc:	bd08      	pop	{r3, pc}
  4000de:	4a04      	ldr	r2, [pc, #16]	; (4000f0 <deregister_tm_clones+0x20>)
  4000e0:	2a00      	cmp	r2, #0
  4000e2:	d0fb      	beq.n	4000dc <deregister_tm_clones+0xc>
  4000e4:	4790      	blx	r2
  4000e6:	e7f9      	b.n	4000dc <deregister_tm_clones+0xc>
  4000e8:	0040872c 	.word	0x0040872c
  4000ec:	0040872f 	.word	0x0040872f
  4000f0:	00000000 	.word	0x00000000

004000f4 <register_tm_clones>:
  4000f4:	b508      	push	{r3, lr}
  4000f6:	4807      	ldr	r0, [pc, #28]	; (400114 <register_tm_clones+0x20>)
  4000f8:	4b07      	ldr	r3, [pc, #28]	; (400118 <register_tm_clones+0x24>)
  4000fa:	1a19      	subs	r1, r3, r0
  4000fc:	108a      	asrs	r2, r1, #2
  4000fe:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
  400102:	1059      	asrs	r1, r3, #1
  400104:	d100      	bne.n	400108 <register_tm_clones+0x14>
  400106:	bd08      	pop	{r3, pc}
  400108:	4a04      	ldr	r2, [pc, #16]	; (40011c <register_tm_clones+0x28>)
  40010a:	2a00      	cmp	r2, #0
  40010c:	d0fb      	beq.n	400106 <register_tm_clones+0x12>
  40010e:	4790      	blx	r2
  400110:	e7f9      	b.n	400106 <register_tm_clones+0x12>
  400112:	bf00      	nop
  400114:	0040872c 	.word	0x0040872c
  400118:	0040872c 	.word	0x0040872c
  40011c:	00000000 	.word	0x00000000

00400120 <__do_global_dtors_aux>:
  400120:	b510      	push	{r4, lr}
  400122:	4c06      	ldr	r4, [pc, #24]	; (40013c <__do_global_dtors_aux+0x1c>)
  400124:	7823      	ldrb	r3, [r4, #0]
  400126:	b943      	cbnz	r3, 40013a <__do_global_dtors_aux+0x1a>
  400128:	f7ff ffd2 	bl	4000d0 <deregister_tm_clones>
  40012c:	4804      	ldr	r0, [pc, #16]	; (400140 <__do_global_dtors_aux+0x20>)
  40012e:	b110      	cbz	r0, 400136 <__do_global_dtors_aux+0x16>
  400130:	4804      	ldr	r0, [pc, #16]	; (400144 <__do_global_dtors_aux+0x24>)
  400132:	f3af 8000 	nop.w
  400136:	2101      	movs	r1, #1
  400138:	7021      	strb	r1, [r4, #0]
  40013a:	bd10      	pop	{r4, pc}
  40013c:	20000d00 	.word	0x20000d00
  400140:	00000000 	.word	0x00000000
  400144:	0040872c 	.word	0x0040872c

00400148 <frame_dummy>:
  400148:	b508      	push	{r3, lr}
  40014a:	4b08      	ldr	r3, [pc, #32]	; (40016c <frame_dummy+0x24>)
  40014c:	b11b      	cbz	r3, 400156 <frame_dummy+0xe>
  40014e:	4808      	ldr	r0, [pc, #32]	; (400170 <frame_dummy+0x28>)
  400150:	4908      	ldr	r1, [pc, #32]	; (400174 <frame_dummy+0x2c>)
  400152:	f3af 8000 	nop.w
  400156:	4808      	ldr	r0, [pc, #32]	; (400178 <frame_dummy+0x30>)
  400158:	6801      	ldr	r1, [r0, #0]
  40015a:	b111      	cbz	r1, 400162 <frame_dummy+0x1a>
  40015c:	4a07      	ldr	r2, [pc, #28]	; (40017c <frame_dummy+0x34>)
  40015e:	b102      	cbz	r2, 400162 <frame_dummy+0x1a>
  400160:	4790      	blx	r2
  400162:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  400166:	f7ff bfc5 	b.w	4000f4 <register_tm_clones>
  40016a:	bf00      	nop
  40016c:	00000000 	.word	0x00000000
  400170:	0040872c 	.word	0x0040872c
  400174:	20000d04 	.word	0x20000d04
  400178:	0040872c 	.word	0x0040872c
  40017c:	00000000 	.word	0x00000000

00400180 <del_process>:
	  
}



void del_process(void){
  400180:	e7fe      	b.n	400180 <del_process>
  400182:	bf00      	nop

00400184 <scheduler>:
static Minithread theCurrentThread;
static Minithread queue[QUEUE_SIZE];
static int head;
static int tail;

void scheduler(void){
  400184:	b470      	push	{r4, r5, r6}
	//this will not execute on first call of scheduler.
	if (theCurrentThread.name != NULL){
  400186:	f241 3360 	movw	r3, #4960	; 0x1360
  40018a:	f2c2 0300 	movt	r3, #8192	; 0x2000
  40018e:	6818      	ldr	r0, [r3, #0]
  400190:	b310      	cbz	r0, 4001d8 <scheduler+0x54>
		//enqueue old thread.
		queue[tail] = theCurrentThread;
  400192:	f641 15b8 	movw	r5, #6584	; 0x19b8
  400196:	f2c2 0500 	movt	r5, #8192	; 0x2000
  40019a:	682e      	ldr	r6, [r5, #0]
  40019c:	f241 3474 	movw	r4, #4980	; 0x1374
  4001a0:	f2c2 0400 	movt	r4, #8192	; 0x2000
  4001a4:	eb04 1406 	add.w	r4, r4, r6, lsl #4
  4001a8:	f241 3160 	movw	r1, #4960	; 0x1360
  4001ac:	f2c2 0100 	movt	r1, #8192	; 0x2000
  4001b0:	c90f      	ldmia	r1, {r0, r1, r2, r3}
  4001b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		tail = (tail + 1) % QUEUE_SIZE;
  4001b6:	f106 0301 	add.w	r3, r6, #1
  4001ba:	f248 521f 	movw	r2, #34079	; 0x851f
  4001be:	f2c5 12eb 	movt	r2, #20971	; 0x51eb
  4001c2:	fb82 1003 	smull	r1, r0, r2, r3
  4001c6:	ea4f 76e3 	mov.w	r6, r3, asr #31
  4001ca:	ebc6 1460 	rsb	r4, r6, r0, asr #5
  4001ce:	f04f 0164 	mov.w	r1, #100	; 0x64
  4001d2:	fb01 3314 	mls	r3, r1, r4, r3
  4001d6:	602b      	str	r3, [r5, #0]
	}
	
	//dequeue new thread.
	theCurrentThread = queue[head];
  4001d8:	f640 551c 	movw	r5, #3356	; 0xd1c
  4001dc:	f2c2 0500 	movt	r5, #8192	; 0x2000
  4001e0:	682e      	ldr	r6, [r5, #0]
  4001e2:	f241 3460 	movw	r4, #4960	; 0x1360
  4001e6:	f2c2 0400 	movt	r4, #8192	; 0x2000
  4001ea:	f241 3274 	movw	r2, #4980	; 0x1374
  4001ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
  4001f2:	eb02 1006 	add.w	r0, r2, r6, lsl #4
  4001f6:	c80f      	ldmia	r0, {r0, r1, r2, r3}
  4001f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	head = (head + 1) % QUEUE_SIZE;
  4001fc:	f106 0301 	add.w	r3, r6, #1
  400200:	f248 511f 	movw	r1, #34079	; 0x851f
  400204:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
  400208:	fb81 1203 	smull	r1, r2, r1, r3
  40020c:	ea4f 70e3 	mov.w	r0, r3, asr #31
  400210:	ebc0 1262 	rsb	r2, r0, r2, asr #5
  400214:	f04f 0164 	mov.w	r1, #100	; 0x64
  400218:	fb01 3312 	mls	r3, r1, r2, r3
  40021c:	602b      	str	r3, [r5, #0]
}
  40021e:	bc70      	pop	{r4, r5, r6}
  400220:	4770      	bx	lr
  400222:	bf00      	nop

00400224 <startScheduler>:

void startScheduler(){
	
	curThread = 0;
  400224:	f04f 0200 	mov.w	r2, #0
  400228:	f641 13bc 	movw	r3, #6588	; 0x19bc
  40022c:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400230:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  400232:	f24e 0310 	movw	r3, #57360	; 0xe010
  400236:	f2ce 0300 	movt	r3, #57344	; 0xe000
  40023a:	f24a 51df 	movw	r1, #42463	; 0xa5df
  40023e:	f2c0 0101 	movt	r1, #1
  400242:	6059      	str	r1, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400244:	f44f 416d 	mov.w	r1, #60672	; 0xed00
  400248:	f2ce 0100 	movt	r1, #57344	; 0xe000
  40024c:	f04f 00f0 	mov.w	r0, #240	; 0xf0
  400250:	f881 0023 	strb.w	r0, [r1, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  400254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  400256:	f04f 0207 	mov.w	r2, #7
  40025a:	601a      	str	r2, [r3, #0]
  40025c:	4770      	bx	lr
  40025e:	bf00      	nop

00400260 <SysTick_Handler>:
	asm volatile ("MRS %0, psp\n\t"
	"LDMFD %0!, {r4-r11}\n\t"
	"MSR psp, %0\n\t"  : "=r" (scratch) );
}

void SysTick_Handler(void){
  400260:	b510      	push	{r4, lr}
}

//Taken verbatim
static inline void save_context(void){
	uint32_t scratch;
	asm volatile ("MRS %0, psp\n\t"
  400262:	f3ef 8309 	mrs	r3, PSP
  400266:	e923 0ff0 	stmdb	r3!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40026a:	f383 8809 	msr	PSP, r3
		//save software context
		save_context(); //The first time (as in firstExec) it will save context in some unknown place in psp
						//but this will be ignored, so doesnt matter... ok its not unknown, it's in the msp
						//but the next instruction, when firstExec is true,  is load_context() so it's fine.
					
		if( firstExec){ //the first ever executed thread wasn't running yet
  40026e:	f240 030c 	movw	r3, #12
  400272:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400276:	7818      	ldrb	r0, [r3, #0]
  400278:	b1d0      	cbz	r0, 4002b0 <SysTick_Handler+0x50>
}

//Taken verbatim
static inline void load_context(void){
	uint32_t scratch;
	asm volatile ("MRS %0, psp\n\t"
  40027a:	f3ef 8309 	mrs	r3, PSP
  40027e:	e8b3 0ff0 	ldmia.w	r3!, {r4, r5, r6, r7, r8, r9, sl, fp}
  400282:	f383 8809 	msr	PSP, r3
						//but the next instruction, when firstExec is true,  is load_context() so it's fine.
					
		if( firstExec){ //the first ever executed thread wasn't running yet
			load_context();
			//so cant get it's sp from psp	
			firstExec = false;
  400286:	f04f 0400 	mov.w	r4, #0
  40028a:	f240 000c 	movw	r0, #12
  40028e:	f2c2 0000 	movt	r0, #8192	; 0x2000
  400292:	7004      	strb	r4, [r0, #0]
			
			//change current thread
			scheduler();
  400294:	f240 1185 	movw	r1, #389	; 0x185
  400298:	f2c0 0140 	movt	r1, #64	; 0x40
  40029c:	4788      	blx	r1
			
			theCurrentThread.execFirstTime = false;
  40029e:	f241 3360 	movw	r3, #4960	; 0x1360
  4002a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4002a6:	731c      	strb	r4, [r3, #12]

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) );
  4002a8:	685a      	ldr	r2, [r3, #4]
  4002aa:	f382 8809 	msr	PSP, r2
  4002ae:	bd10      	pop	{r4, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  4002b0:	f3ef 8109 	mrs	r1, PSP
			
			return;
		}

		 //save psp
		 theCurrentThread.sp = __get_PSP();
  4002b4:	f241 3460 	movw	r4, #4960	; 0x1360
  4002b8:	f2c2 0400 	movt	r4, #8192	; 0x2000
  4002bc:	6061      	str	r1, [r4, #4]
 
		 //change current thread
		 scheduler();
  4002be:	f240 1285 	movw	r2, #389	; 0x185
  4002c2:	f2c0 0240 	movt	r2, #64	; 0x40
  4002c6:	4790      	blx	r2

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) );
  4002c8:	6863      	ldr	r3, [r4, #4]
  4002ca:	f383 8809 	msr	PSP, r3

		//restore psp
		__set_PSP( theCurrentThread.sp );
 		
 		//restore software context
		 if( theCurrentThread.execFirstTime ){	 
  4002ce:	f241 3060 	movw	r0, #4960	; 0x1360
  4002d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
  4002d6:	7b01      	ldrb	r1, [r0, #12]
  4002d8:	b161      	cbz	r1, 4002f4 <SysTick_Handler+0x94>
			//newly created threads have no soft context so we put one
			theCurrentThread.execFirstTime = false;
  4002da:	f241 3360 	movw	r3, #4960	; 0x1360
  4002de:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4002e2:	f04f 0200 	mov.w	r2, #0
  4002e6:	731a      	strb	r2, [r3, #12]
}

//Taken verbatim
static inline void save_context(void){
	uint32_t scratch;
	asm volatile ("MRS %0, psp\n\t"
  4002e8:	f3ef 8309 	mrs	r3, PSP
  4002ec:	e923 0ff0 	stmdb	r3!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4002f0:	f383 8809 	msr	PSP, r3
}

//Taken verbatim
static inline void load_context(void){
	uint32_t scratch;
	asm volatile ("MRS %0, psp\n\t"
  4002f4:	f3ef 8309 	mrs	r3, PSP
  4002f8:	e8b3 0ff0 	ldmia.w	r3!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4002fc:	f383 8809 	msr	PSP, r3
  400300:	bd10      	pop	{r4, pc}
  400302:	bf00      	nop

00400304 <PendSV_Handler>:
		  
}



void PendSV_Handler(void){
  400304:	4770      	bx	lr
  400306:	bf00      	nop

00400308 <createThread>:
}




int createThread ( void (*startAddress)(void), char *name,  int stackSize ){
  400308:	b4f0      	push	{r4, r5, r6, r7}
		
		//cant create more threads
		if( numOfThreads >= MAX_NUM_OF_THREADS )
  40030a:	f641 13b4 	movw	r3, #6580	; 0x19b4
  40030e:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400312:	681d      	ldr	r5, [r3, #0]
  400314:	2d63      	cmp	r5, #99	; 0x63
  400316:	dd02      	ble.n	40031e <createThread+0x16>
			return -1;
  400318:	f04f 30ff 	mov.w	r0, #4294967295
  40031c:	e05d      	b.n	4003da <createThread+0xd2>
			
		threads[numOfThreads].name = name;	
  40031e:	f640 5620 	movw	r6, #3360	; 0xd20
  400322:	f2c2 0600 	movt	r6, #8192	; 0x2000
  400326:	ea4f 1705 	mov.w	r7, r5, lsl #4
  40032a:	19f4      	adds	r4, r6, r7
  40032c:	51f1      	str	r1, [r6, r7]
		threads[numOfThreads].execFirstTime = true;
  40032e:	f04f 0101 	mov.w	r1, #1
  400332:	7321      	strb	r1, [r4, #12]
		threads[numOfThreads].bp = (&_estack2 - 0x20) - (allocatedStack + stackSize);
  400334:	f241 3770 	movw	r7, #4976	; 0x1370
  400338:	f2c2 0700 	movt	r7, #8192	; 0x2000
  40033c:	683b      	ldr	r3, [r7, #0]
  40033e:	18d2      	adds	r2, r2, r3
  400340:	f102 0620 	add.w	r6, r2, #32
  400344:	f647 61b8 	movw	r1, #32440	; 0x7eb8
  400348:	f2c2 0100 	movt	r1, #8192	; 0x2000
  40034c:	eba1 0386 	sub.w	r3, r1, r6, lsl #2
  400350:	60a3      	str	r3, [r4, #8]
		threads[numOfThreads].sp = threads[numOfThreads].bp - 0x20;  //make space for manually-inserted hardware context
  400352:	f1a3 0680 	sub.w	r6, r3, #128	; 0x80
  400356:	6066      	str	r6, [r4, #4]
		
		allocatedStack += stackSize; 
  400358:	603a      	str	r2, [r7, #0]
		
		//initially the task does not have a hardware context
		//so we insert one ourselves
		uint32_t* sp = threads[numOfThreads].sp;
		
		((uint32_t*)sp)[0] = ((uint32_t) 0); //r0
  40035a:	f04f 0700 	mov.w	r7, #0
  40035e:	f843 7c80 	str.w	r7, [r3, #-128]
		((uint32_t*)sp)[1] = ((uint32_t) 0); //r1
  400362:	f843 7c7c 	str.w	r7, [r3, #-124]
		((uint32_t*)sp)[2] = ((uint32_t) 0); //r2
  400366:	f843 7c78 	str.w	r7, [r3, #-120]
		((uint32_t*)sp)[3] = ((uint32_t) 0); //r3
  40036a:	f843 7c74 	str.w	r7, [r3, #-116]
		((uint32_t*)sp)[4] = ((uint32_t) 0); //r12
  40036e:	f843 7c70 	str.w	r7, [r3, #-112]
		((uint32_t*)sp)[5] = ((uint32_t) del_process); //lr
  400372:	f240 1281 	movw	r2, #385	; 0x181
  400376:	f2c0 0240 	movt	r2, #64	; 0x40
  40037a:	f843 2c6c 	str.w	r2, [r3, #-108]
		((uint32_t*)sp)[6] = ((uint32_t) startAddress); //pc
  40037e:	f843 0c68 	str.w	r0, [r3, #-104]
		((uint32_t*)sp)[7] = ((uint32_t) 0x21000000); //psr
  400382:	f04f 5004 	mov.w	r0, #553648128	; 0x21000000
  400386:	f843 0c64 	str.w	r0, [r3, #-100]

		//enqueues the just created thread.
		queue[tail] = threads[numOfThreads];
  40038a:	f641 17b8 	movw	r7, #6584	; 0x19b8
  40038e:	f2c2 0700 	movt	r7, #8192	; 0x2000
  400392:	f8d7 c000 	ldr.w	ip, [r7]
  400396:	f241 3174 	movw	r1, #4980	; 0x1374
  40039a:	f2c2 0100 	movt	r1, #8192	; 0x2000
  40039e:	eb01 160c 	add.w	r6, r1, ip, lsl #4
  4003a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  4003a6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		tail = (tail + 1) % QUEUE_SIZE;
  4003aa:	f10c 0301 	add.w	r3, ip, #1
  4003ae:	f248 521f 	movw	r2, #34079	; 0x851f
  4003b2:	f2c5 12eb 	movt	r2, #20971	; 0x51eb
  4003b6:	fb82 1003 	smull	r1, r0, r2, r3
  4003ba:	ea4f 71e3 	mov.w	r1, r3, asr #31
  4003be:	ebc1 1260 	rsb	r2, r1, r0, asr #5
  4003c2:	f04f 0064 	mov.w	r0, #100	; 0x64
  4003c6:	fb00 3312 	mls	r3, r0, r2, r3
  4003ca:	603b      	str	r3, [r7, #0]
		
		numOfThreads++;
  4003cc:	f105 0501 	add.w	r5, r5, #1
  4003d0:	f641 11b4 	movw	r1, #6580	; 0x19b4
  4003d4:	f2c2 0100 	movt	r1, #8192	; 0x2000
  4003d8:	600d      	str	r5, [r1, #0]
  4003da:	bcf0      	pop	{r4, r5, r6, r7}
  4003dc:	4770      	bx	lr
  4003de:	bf00      	nop

004003e0 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
  4003e0:	f641 2358 	movw	r3, #6744	; 0x1a58
  4003e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4003e8:	781a      	ldrb	r2, [r3, #0]
  4003ea:	f102 30ff 	add.w	r0, r2, #4294967295
  4003ee:	b2c1      	uxtb	r1, r0
  4003f0:	7019      	strb	r1, [r3, #0]
  4003f2:	4770      	bx	lr

004003f4 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
  4003f4:	f04f 0000 	mov.w	r0, #0
  4003f8:	4770      	bx	lr
  4003fa:	bf00      	nop

004003fc <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
  4003fc:	f04f 0000 	mov.w	r0, #0
  400400:	4770      	bx	lr
  400402:	bf00      	nop

00400404 <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
  400404:	f641 432c 	movw	r3, #7212	; 0x1c2c
  400408:	f2c2 0300 	movt	r3, #8192	; 0x2000
  40040c:	7818      	ldrb	r0, [r3, #0]
  40040e:	f010 0f80 	tst.w	r0, #128	; 0x80
  400412:	d020      	beq.n	400456 <udi_cdc_comm_setup+0x52>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  400414:	f000 0160 	and.w	r1, r0, #96	; 0x60
  400418:	2920      	cmp	r1, #32
  40041a:	d147      	bne.n	4004ac <udi_cdc_comm_setup+0xa8>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
  40041c:	f641 422c 	movw	r2, #7212	; 0x1c2c
  400420:	f2c2 0200 	movt	r2, #8192	; 0x2000
  400424:	7853      	ldrb	r3, [r2, #1]
  400426:	2b21      	cmp	r3, #33	; 0x21
  400428:	d143      	bne.n	4004b2 <udi_cdc_comm_setup+0xae>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
  40042a:	f641 402c 	movw	r0, #7212	; 0x1c2c
  40042e:	f2c2 0000 	movt	r0, #8192	; 0x2000
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
  400432:	88c1      	ldrh	r1, [r0, #6]
  400434:	2907      	cmp	r1, #7
  400436:	d13f      	bne.n	4004b8 <udi_cdc_comm_setup+0xb4>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
  400438:	f641 432c 	movw	r3, #7212	; 0x1c2c
  40043c:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400440:	f641 12c0 	movw	r2, #6592	; 0x19c0
  400444:	f2c2 0200 	movt	r2, #8192	; 0x2000
  400448:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
  40044a:	f04f 0007 	mov.w	r0, #7
  40044e:	8198      	strh	r0, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
  400450:	f04f 0001 	mov.w	r0, #1
  400454:	4770      	bx	lr
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  400456:	f000 0160 	and.w	r1, r0, #96	; 0x60
  40045a:	2920      	cmp	r1, #32
  40045c:	d12f      	bne.n	4004be <udi_cdc_comm_setup+0xba>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
  40045e:	f641 422c 	movw	r2, #7212	; 0x1c2c
  400462:	f2c2 0200 	movt	r2, #8192	; 0x2000
  400466:	7850      	ldrb	r0, [r2, #1]
  400468:	2820      	cmp	r0, #32
  40046a:	d004      	beq.n	400476 <udi_cdc_comm_setup+0x72>
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
  40046c:	2822      	cmp	r0, #34	; 0x22
  40046e:	bf14      	ite	ne
  400470:	2000      	movne	r0, #0
  400472:	2001      	moveq	r0, #1
  400474:	4770      	bx	lr
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
  400476:	f641 432c 	movw	r3, #7212	; 0x1c2c
  40047a:	f2c2 0300 	movt	r3, #8192	; 0x2000
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
  40047e:	88d8      	ldrh	r0, [r3, #6]
  400480:	2807      	cmp	r0, #7
  400482:	d11f      	bne.n	4004c4 <udi_cdc_comm_setup+0xc0>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
  400484:	f641 412c 	movw	r1, #7212	; 0x1c2c
  400488:	f2c2 0100 	movt	r1, #8192	; 0x2000
  40048c:	f240 42cd 	movw	r2, #1229	; 0x4cd
  400490:	f2c0 0240 	movt	r2, #64	; 0x40
  400494:	610a      	str	r2, [r1, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
  400496:	f641 13c0 	movw	r3, #6592	; 0x19c0
  40049a:	f2c2 0300 	movt	r3, #8192	; 0x2000
  40049e:	608b      	str	r3, [r1, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
  4004a0:	f04f 0007 	mov.w	r0, #7
  4004a4:	8188      	strh	r0, [r1, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
  4004a6:	f04f 0001 	mov.w	r0, #1
  4004aa:	4770      	bx	lr
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
  4004ac:	f04f 0000 	mov.w	r0, #0
  4004b0:	4770      	bx	lr
  4004b2:	f04f 0000 	mov.w	r0, #0
  4004b6:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
  4004b8:	f04f 0000 	mov.w	r0, #0
  4004bc:	4770      	bx	lr
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
  4004be:	f04f 0000 	mov.w	r0, #0
  4004c2:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
  4004c4:	f04f 0000 	mov.w	r0, #0
				return true;
			}
		}
	}
	return false;  // request Not supported
}
  4004c8:	4770      	bx	lr
  4004ca:	bf00      	nop

004004cc <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
  4004cc:	4770      	bx	lr
  4004ce:	bf00      	nop

004004d0 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
  4004d0:	b530      	push	{r4, r5, lr}
  4004d2:	b083      	sub	sp, #12

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
  4004d4:	f641 236c 	movw	r3, #6764	; 0x1a6c
  4004d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4004dc:	7818      	ldrb	r0, [r3, #0]
  4004de:	2800      	cmp	r0, #0
  4004e0:	f040 80de 	bne.w	4006a0 <udi_cdc_tx_send+0x1d0>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
  4004e4:	f642 2171 	movw	r1, #10865	; 0x2a71
  4004e8:	f2c0 0140 	movt	r1, #64	; 0x40
  4004ec:	4788      	blx	r1
  4004ee:	b160      	cbz	r0, 40050a <udi_cdc_tx_send+0x3a>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  4004f0:	f641 2460 	movw	r4, #6752	; 0x1a60
  4004f4:	f2c2 0400 	movt	r4, #8192	; 0x2000
  4004f8:	8824      	ldrh	r4, [r4, #0]
  4004fa:	f642 20f9 	movw	r0, #11001	; 0x2af9
  4004fe:	f2c0 0040 	movt	r0, #64	; 0x40
  400502:	4780      	blx	r0
  400504:	4284      	cmp	r4, r0
  400506:	d10d      	bne.n	400524 <udi_cdc_tx_send+0x54>
  400508:	e0ca      	b.n	4006a0 <udi_cdc_tx_send+0x1d0>
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
  40050a:	f641 2260 	movw	r2, #6752	; 0x1a60
  40050e:	f2c2 0200 	movt	r2, #8192	; 0x2000
  400512:	8814      	ldrh	r4, [r2, #0]
  400514:	f642 23e5 	movw	r3, #10981	; 0x2ae5
  400518:	f2c0 0340 	movt	r3, #64	; 0x40
  40051c:	4798      	blx	r3
  40051e:	4284      	cmp	r4, r0
  400520:	f000 80be 	beq.w	4006a0 <udi_cdc_tx_send+0x1d0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400524:	f3ef 8510 	mrs	r5, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  400528:	f1d5 0501 	rsbs	r5, r5, #1
  40052c:	bf38      	it	cc
  40052e:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400530:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400532:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400536:	f240 41ac 	movw	r1, #1196	; 0x4ac
  40053a:	f2c2 0100 	movt	r1, #8192	; 0x2000
  40053e:	f04f 0200 	mov.w	r2, #0
  400542:	700a      	strb	r2, [r1, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
  400544:	f641 13cc 	movw	r3, #6604	; 0x19cc
  400548:	f2c2 0300 	movt	r3, #8192	; 0x2000
  40054c:	781c      	ldrb	r4, [r3, #0]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  40054e:	f641 10d0 	movw	r0, #6608	; 0x19d0
  400552:	f2c2 0000 	movt	r0, #8192	; 0x2000
  400556:	f830 1014 	ldrh.w	r1, [r0, r4, lsl #1]
  40055a:	bb79      	cbnz	r1, 4005bc <udi_cdc_tx_send+0xec>
		sof_zlp_counter++;
  40055c:	f641 13c8 	movw	r3, #6600	; 0x19c8
  400560:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400564:	881a      	ldrh	r2, [r3, #0]
  400566:	f102 0201 	add.w	r2, r2, #1
  40056a:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
  40056c:	f642 2071 	movw	r0, #10865	; 0x2a71
  400570:	f2c0 0040 	movt	r0, #64	; 0x40
  400574:	4780      	blx	r0
  400576:	b930      	cbnz	r0, 400586 <udi_cdc_tx_send+0xb6>
  400578:	f641 11c8 	movw	r1, #6600	; 0x19c8
  40057c:	f2c2 0100 	movt	r1, #8192	; 0x2000
  400580:	880b      	ldrh	r3, [r1, #0]
  400582:	2b63      	cmp	r3, #99	; 0x63
  400584:	d90d      	bls.n	4005a2 <udi_cdc_tx_send+0xd2>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
  400586:	f642 2271 	movw	r2, #10865	; 0x2a71
  40058a:	f2c0 0240 	movt	r2, #64	; 0x40
  40058e:	4790      	blx	r2
  400590:	b1a0      	cbz	r0, 4005bc <udi_cdc_tx_send+0xec>
  400592:	f641 10c8 	movw	r0, #6600	; 0x19c8
  400596:	f2c2 0000 	movt	r0, #8192	; 0x2000
  40059a:	8801      	ldrh	r1, [r0, #0]
  40059c:	f5b1 7f48 	cmp.w	r1, #800	; 0x320
  4005a0:	d20c      	bcs.n	4005bc <udi_cdc_tx_send+0xec>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4005a2:	2d00      	cmp	r5, #0
  4005a4:	d07c      	beq.n	4006a0 <udi_cdc_tx_send+0x1d0>
		cpu_irq_enable();
  4005a6:	f240 43ac 	movw	r3, #1196	; 0x4ac
  4005aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4005ae:	f04f 0201 	mov.w	r2, #1
  4005b2:	701a      	strb	r2, [r3, #0]
  4005b4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  4005b8:	b662      	cpsie	i
  4005ba:	e071      	b.n	4006a0 <udi_cdc_tx_send+0x1d0>
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
  4005bc:	f641 13c8 	movw	r3, #6600	; 0x19c8
  4005c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4005c4:	f04f 0200 	mov.w	r2, #0
  4005c8:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
  4005ca:	f641 3000 	movw	r0, #6912	; 0x1b00
  4005ce:	f2c2 0000 	movt	r0, #8192	; 0x2000
  4005d2:	7801      	ldrb	r1, [r0, #0]
  4005d4:	b949      	cbnz	r1, 4005ea <udi_cdc_tx_send+0x11a>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  4005d6:	4294      	cmp	r4, r2
  4005d8:	bf14      	ite	ne
  4005da:	2200      	movne	r2, #0
  4005dc:	2201      	moveq	r2, #1
  4005de:	f641 13cc 	movw	r3, #6604	; 0x19cc
  4005e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4005e6:	701a      	strb	r2, [r3, #0]
  4005e8:	e003      	b.n	4005f2 <udi_cdc_tx_send+0x122>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
  4005ea:	f1d4 0401 	rsbs	r4, r4, #1
  4005ee:	bf38      	it	cc
  4005f0:	2400      	movcc	r4, #0
	}
	udi_cdc_tx_trans_ongoing[port] = true;
  4005f2:	f641 206c 	movw	r0, #6764	; 0x1a6c
  4005f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
  4005fa:	f04f 0201 	mov.w	r2, #1
  4005fe:	7002      	strb	r2, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400600:	b13d      	cbz	r5, 400612 <udi_cdc_tx_send+0x142>
		cpu_irq_enable();
  400602:	f240 45ac 	movw	r5, #1196	; 0x4ac
  400606:	f2c2 0500 	movt	r5, #8192	; 0x2000
  40060a:	702a      	strb	r2, [r5, #0]
  40060c:	f3bf 8f5f 	dmb	sy
  400610:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
  400612:	4625      	mov	r5, r4
  400614:	f641 11d0 	movw	r1, #6608	; 0x19d0
  400618:	f2c2 0100 	movt	r1, #8192	; 0x2000
  40061c:	f831 4014 	ldrh.w	r4, [r1, r4, lsl #1]
  400620:	3c40      	subs	r4, #64	; 0x40
  400622:	bf18      	it	ne
  400624:	2401      	movne	r4, #1
	if (b_short_packet) {
  400626:	b1dc      	cbz	r4, 400660 <udi_cdc_tx_send+0x190>
		if (udd_is_high_speed()) {
  400628:	f642 2271 	movw	r2, #10865	; 0x2a71
  40062c:	f2c0 0240 	movt	r2, #64	; 0x40
  400630:	4790      	blx	r2
  400632:	b150      	cbz	r0, 40064a <udi_cdc_tx_send+0x17a>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
  400634:	f642 20f9 	movw	r0, #11001	; 0x2af9
  400638:	f2c0 0040 	movt	r0, #64	; 0x40
  40063c:	4780      	blx	r0
  40063e:	f641 2260 	movw	r2, #6752	; 0x1a60
  400642:	f2c2 0200 	movt	r2, #8192	; 0x2000
  400646:	8010      	strh	r0, [r2, #0]
  400648:	e011      	b.n	40066e <udi_cdc_tx_send+0x19e>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
  40064a:	f642 21e5 	movw	r1, #10981	; 0x2ae5
  40064e:	f2c0 0140 	movt	r1, #64	; 0x40
  400652:	4788      	blx	r1
  400654:	f641 2360 	movw	r3, #6752	; 0x1a60
  400658:	f2c2 0300 	movt	r3, #8192	; 0x2000
  40065c:	8018      	strh	r0, [r3, #0]
  40065e:	e006      	b.n	40066e <udi_cdc_tx_send+0x19e>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
  400660:	f641 2360 	movw	r3, #6752	; 0x1a60
  400664:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400668:	f04f 0000 	mov.w	r0, #0
  40066c:	8018      	strh	r0, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
  40066e:	f641 11d0 	movw	r1, #6608	; 0x19d0
  400672:	f2c2 0100 	movt	r1, #8192	; 0x2000
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
  400676:	f831 3015 	ldrh.w	r3, [r1, r5, lsl #1]
  40067a:	f240 60b9 	movw	r0, #1721	; 0x6b9
  40067e:	f2c0 0040 	movt	r0, #64	; 0x40
  400682:	9000      	str	r0, [sp, #0]
  400684:	f04f 0081 	mov.w	r0, #129	; 0x81
  400688:	4621      	mov	r1, r4
  40068a:	f641 14d4 	movw	r4, #6612	; 0x19d4
  40068e:	f2c2 0400 	movt	r4, #8192	; 0x2000
  400692:	eb04 1285 	add.w	r2, r4, r5, lsl #6
  400696:	f642 64f5 	movw	r4, #12021	; 0x2ef5
  40069a:	f2c0 0440 	movt	r4, #64	; 0x40
  40069e:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
  4006a0:	b003      	add	sp, #12
  4006a2:	bd30      	pop	{r4, r5, pc}

004006a4 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
  4006a4:	b508      	push	{r3, lr}
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
  4006a6:	f04f 0000 	mov.w	r0, #0
  4006aa:	f240 43d1 	movw	r3, #1233	; 0x4d1
  4006ae:	f2c0 0340 	movt	r3, #64	; 0x40
  4006b2:	4798      	blx	r3
  4006b4:	bd08      	pop	{r3, pc}
  4006b6:	bf00      	nop

004006b8 <udi_cdc_data_sent>:
	udi_cdc_rx_start(port);
}


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
  4006b8:	b508      	push	{r3, lr}
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
  4006ba:	b9e8      	cbnz	r0, 4006f8 <udi_cdc_data_sent+0x40>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  4006bc:	f641 13cc 	movw	r3, #6604	; 0x19cc
  4006c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4006c4:	7819      	ldrb	r1, [r3, #0]
  4006c6:	f1d1 0101 	rsbs	r1, r1, #1
  4006ca:	bf38      	it	cc
  4006cc:	2100      	movcc	r1, #0
  4006ce:	f641 13d0 	movw	r3, #6608	; 0x19d0
  4006d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4006d6:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
  4006da:	f641 3100 	movw	r1, #6912	; 0x1b00
  4006de:	f2c2 0100 	movt	r1, #8192	; 0x2000
  4006e2:	7008      	strb	r0, [r1, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  4006e4:	f641 226c 	movw	r2, #6764	; 0x1a6c
  4006e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
  4006ec:	7010      	strb	r0, [r2, #0]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
  4006ee:	f240 43d1 	movw	r3, #1233	; 0x4d1
  4006f2:	f2c0 0340 	movt	r3, #64	; 0x40
  4006f6:	4798      	blx	r3
  4006f8:	bd08      	pop	{r3, pc}
  4006fa:	bf00      	nop

004006fc <udi_cdc_data_disable>:
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
}

void udi_cdc_data_disable(void)
{
  4006fc:	b508      	push	{r3, lr}
	uint8_t port;
	UNUSED(port);

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
  4006fe:	f641 13ca 	movw	r3, #6602	; 0x19ca
  400702:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400706:	781a      	ldrb	r2, [r3, #0]
  400708:	f102 30ff 	add.w	r0, r2, #4294967295
  40070c:	b2c1      	uxtb	r1, r0
  40070e:	7019      	strb	r1, [r3, #0]
	port = udi_cdc_nb_data_enabled;
  400710:	781b      	ldrb	r3, [r3, #0]
	UDI_CDC_DISABLE_EXT(port);
  400712:	f243 6311 	movw	r3, #13841	; 0x3611
  400716:	f2c0 0340 	movt	r3, #64	; 0x40
  40071a:	4798      	blx	r3
	udi_cdc_data_running = false;
  40071c:	f641 2064 	movw	r0, #6756	; 0x1a64
  400720:	f2c2 0000 	movt	r0, #8192	; 0x2000
  400724:	f04f 0200 	mov.w	r2, #0
  400728:	7002      	strb	r2, [r0, #0]
  40072a:	bd08      	pop	{r3, pc}

0040072c <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
  40072c:	b508      	push	{r3, lr}
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
  40072e:	f04f 0200 	mov.w	r2, #0
  400732:	f641 2358 	movw	r3, #6744	; 0x1a58
  400736:	f2c2 0300 	movt	r3, #8192	; 0x2000
  40073a:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
  40073c:	4611      	mov	r1, r2
  40073e:	f641 3004 	movw	r0, #6916	; 0x1b04
  400742:	f2c2 0000 	movt	r0, #8192	; 0x2000
  400746:	8002      	strh	r2, [r0, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
  400748:	f641 2370 	movw	r3, #6768	; 0x1a70
  40074c:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400750:	f04f 00a1 	mov.w	r0, #161	; 0xa1
  400754:	7018      	strb	r0, [r3, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
  400756:	f04f 0020 	mov.w	r0, #32
  40075a:	7058      	strb	r0, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
  40075c:	805a      	strh	r2, [r3, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
  40075e:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
  400760:	f04f 0002 	mov.w	r0, #2
  400764:	80d8      	strh	r0, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
  400766:	811a      	strh	r2, [r3, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
  400768:	f641 13c0 	movw	r3, #6592	; 0x19c0
  40076c:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  400774:	601a      	str	r2, [r3, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
  400776:	7119      	strb	r1, [r3, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
  400778:	7159      	strb	r1, [r3, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
  40077a:	f04f 0108 	mov.w	r1, #8
  40077e:	7199      	strb	r1, [r3, #6]
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
  400780:	f243 6001 	movw	r0, #13825	; 0x3601
  400784:	f2c0 0040 	movt	r0, #64	; 0x40
  400788:	4780      	blx	r0
  40078a:	b158      	cbz	r0, 4007a4 <udi_cdc_comm_enable+0x78>
		return false;
	}
	udi_cdc_nb_comm_enabled++;
  40078c:	f641 2358 	movw	r3, #6744	; 0x1a58
  400790:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400794:	781a      	ldrb	r2, [r3, #0]
  400796:	f102 0201 	add.w	r2, r2, #1
  40079a:	b2d1      	uxtb	r1, r2
  40079c:	7019      	strb	r1, [r3, #0]
	return true;
  40079e:	f04f 0001 	mov.w	r0, #1
  4007a2:	bd08      	pop	{r3, pc}
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
  4007a4:	f04f 0000 	mov.w	r0, #0
	}
	udi_cdc_nb_comm_enabled++;
	return true;
}
  4007a8:	bd08      	pop	{r3, pc}
  4007aa:	bf00      	nop

004007ac <udi_cdc_multi_get_nb_received_data>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4007ac:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  4007b0:	b672      	cpsid	i
  4007b2:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4007b6:	f240 42ac 	movw	r2, #1196	; 0x4ac
  4007ba:	f2c2 0200 	movt	r2, #8192	; 0x2000
  4007be:	f04f 0100 	mov.w	r1, #0
  4007c2:	7011      	strb	r1, [r2, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  4007c4:	f641 205c 	movw	r0, #6748	; 0x1a5c
  4007c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
  4007cc:	8802      	ldrh	r2, [r0, #0]
  4007ce:	b290      	uxth	r0, r2
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  4007d0:	f641 2168 	movw	r1, #6760	; 0x1a68
  4007d4:	f2c2 0100 	movt	r1, #8192	; 0x2000
  4007d8:	7809      	ldrb	r1, [r1, #0]
  4007da:	f641 2254 	movw	r2, #6740	; 0x1a54
  4007de:	f2c2 0200 	movt	r2, #8192	; 0x2000
  4007e2:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
  4007e6:	1a08      	subs	r0, r1, r0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4007e8:	b94b      	cbnz	r3, 4007fe <udi_cdc_multi_get_nb_received_data+0x52>
		cpu_irq_enable();
  4007ea:	f240 43ac 	movw	r3, #1196	; 0x4ac
  4007ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4007f2:	f04f 0201 	mov.w	r2, #1
  4007f6:	701a      	strb	r2, [r3, #0]
  4007f8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  4007fc:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
  4007fe:	4770      	bx	lr

00400800 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
  400800:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
  400802:	f240 73ad 	movw	r3, #1965	; 0x7ad
  400806:	f2c0 0340 	movt	r3, #64	; 0x40
  40080a:	4798      	blx	r3
}
  40080c:	3000      	adds	r0, #0
  40080e:	bf18      	it	ne
  400810:	2001      	movne	r0, #1
  400812:	bd08      	pop	{r3, pc}

00400814 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
  400814:	b510      	push	{r4, lr}
  400816:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400818:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  40081c:	f1d3 0001 	rsbs	r0, r3, #1
  400820:	bf38      	it	cc
  400822:	2000      	movcc	r0, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400824:	b672      	cpsid	i
  400826:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40082a:	f240 42ac 	movw	r2, #1196	; 0x4ac
  40082e:	f2c2 0200 	movt	r2, #8192	; 0x2000
  400832:	f04f 0100 	mov.w	r1, #0
  400836:	7011      	strb	r1, [r2, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  400838:	f641 2468 	movw	r4, #6760	; 0x1a68
  40083c:	f2c2 0400 	movt	r4, #8192	; 0x2000
  400840:	7824      	ldrb	r4, [r4, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
  400842:	f641 23fc 	movw	r3, #6908	; 0x1afc
  400846:	f2c2 0300 	movt	r3, #8192	; 0x2000
  40084a:	781a      	ldrb	r2, [r3, #0]
  40084c:	b96a      	cbnz	r2, 40086a <udi_cdc_rx_start+0x56>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
  40084e:	f641 215c 	movw	r1, #6748	; 0x1a5c
  400852:	f2c2 0100 	movt	r1, #8192	; 0x2000
  400856:	880b      	ldrh	r3, [r1, #0]
  400858:	b29a      	uxth	r2, r3
  40085a:	f641 2154 	movw	r1, #6740	; 0x1a54
  40085e:	f2c2 0100 	movt	r1, #8192	; 0x2000
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
  400862:	f831 3014 	ldrh.w	r3, [r1, r4, lsl #1]
  400866:	4293      	cmp	r3, r2
  400868:	d90e      	bls.n	400888 <udi_cdc_rx_start+0x74>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40086a:	2800      	cmp	r0, #0
  40086c:	d04a      	beq.n	400904 <udi_cdc_rx_start+0xf0>
		cpu_irq_enable();
  40086e:	f240 40ac 	movw	r0, #1196	; 0x4ac
  400872:	f2c2 0000 	movt	r0, #8192	; 0x2000
  400876:	f04f 0201 	mov.w	r2, #1
  40087a:	7002      	strb	r2, [r0, #0]
  40087c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  400880:	b662      	cpsie	i
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
  400882:	f04f 0000 	mov.w	r0, #0
  400886:	e03f      	b.n	400908 <udi_cdc_rx_start+0xf4>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
  400888:	f641 225c 	movw	r2, #6748	; 0x1a5c
  40088c:	f2c2 0200 	movt	r2, #8192	; 0x2000
  400890:	f04f 0100 	mov.w	r1, #0
  400894:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  400896:	428c      	cmp	r4, r1
  400898:	bf14      	ite	ne
  40089a:	2100      	movne	r1, #0
  40089c:	2101      	moveq	r1, #1
  40089e:	f641 2368 	movw	r3, #6760	; 0x1a68
  4008a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4008a6:	7019      	strb	r1, [r3, #0]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
  4008a8:	f641 22fc 	movw	r2, #6908	; 0x1afc
  4008ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
  4008b0:	f04f 0101 	mov.w	r1, #1
  4008b4:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4008b6:	b138      	cbz	r0, 4008c8 <udi_cdc_rx_start+0xb4>
		cpu_irq_enable();
  4008b8:	f240 40ac 	movw	r0, #1196	; 0x4ac
  4008bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
  4008c0:	7001      	strb	r1, [r0, #0]
  4008c2:	f3bf 8f5f 	dmb	sy
  4008c6:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
  4008c8:	f04f 0000 	mov.w	r0, #0
  4008cc:	f640 0201 	movw	r2, #2049	; 0x801
  4008d0:	f2c0 0240 	movt	r2, #64	; 0x40
  4008d4:	4790      	blx	r2
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
  4008d6:	f640 110d 	movw	r1, #2317	; 0x90d
  4008da:	f2c0 0140 	movt	r1, #64	; 0x40
  4008de:	9100      	str	r1, [sp, #0]
  4008e0:	f04f 0002 	mov.w	r0, #2
  4008e4:	f04f 0101 	mov.w	r1, #1
  4008e8:	f641 237c 	movw	r3, #6780	; 0x1a7c
  4008ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4008f0:	eb03 1284 	add.w	r2, r3, r4, lsl #6
  4008f4:	f04f 0340 	mov.w	r3, #64	; 0x40
  4008f8:	f642 64f5 	movw	r4, #12021	; 0x2ef5
  4008fc:	f2c0 0440 	movt	r4, #64	; 0x40
  400900:	47a0      	blx	r4
  400902:	e001      	b.n	400908 <udi_cdc_rx_start+0xf4>
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
  400904:	f04f 0000 	mov.w	r0, #0
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
  400908:	b002      	add	sp, #8
  40090a:	bd10      	pop	{r4, pc}

0040090c <udi_cdc_data_received>:


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
  40090c:	b510      	push	{r4, lr}
  40090e:	b082      	sub	sp, #8
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
  400910:	bb88      	cbnz	r0, 400976 <udi_cdc_data_received+0x6a>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
  400912:	f641 2368 	movw	r3, #6760	; 0x1a68
  400916:	f2c2 0300 	movt	r3, #8192	; 0x2000
  40091a:	7818      	ldrb	r0, [r3, #0]
  40091c:	f1d0 0301 	rsbs	r3, r0, #1
  400920:	bf38      	it	cc
  400922:	2300      	movcc	r3, #0
	if (!n) {
  400924:	b9a9      	cbnz	r1, 400952 <udi_cdc_data_received+0x46>
		udd_ep_run( ep,
  400926:	f640 140d 	movw	r4, #2317	; 0x90d
  40092a:	f2c0 0440 	movt	r4, #64	; 0x40
  40092e:	9400      	str	r4, [sp, #0]
  400930:	4610      	mov	r0, r2
  400932:	f04f 0101 	mov.w	r1, #1
  400936:	f641 227c 	movw	r2, #6780	; 0x1a7c
  40093a:	f2c2 0200 	movt	r2, #8192	; 0x2000
  40093e:	eb02 1283 	add.w	r2, r2, r3, lsl #6
  400942:	f04f 0340 	mov.w	r3, #64	; 0x40
  400946:	f642 64f5 	movw	r4, #12021	; 0x2ef5
  40094a:	f2c0 0440 	movt	r4, #64	; 0x40
  40094e:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
  400950:	e011      	b.n	400976 <udi_cdc_data_received+0x6a>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
  400952:	f641 2254 	movw	r2, #6740	; 0x1a54
  400956:	f2c2 0200 	movt	r2, #8192	; 0x2000
  40095a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
  40095e:	f04f 0000 	mov.w	r0, #0
  400962:	f641 21fc 	movw	r1, #6908	; 0x1afc
  400966:	f2c2 0100 	movt	r1, #8192	; 0x2000
  40096a:	7008      	strb	r0, [r1, #0]
	udi_cdc_rx_start(port);
  40096c:	f640 0315 	movw	r3, #2069	; 0x815
  400970:	f2c0 0340 	movt	r3, #64	; 0x40
  400974:	4798      	blx	r3
}
  400976:	b002      	add	sp, #8
  400978:	bd10      	pop	{r4, pc}
  40097a:	bf00      	nop

0040097c <udi_cdc_data_enable>:
	udi_cdc_nb_comm_enabled++;
	return true;
}

bool udi_cdc_data_enable(void)
{
  40097c:	b538      	push	{r3, r4, r5, lr}
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
  40097e:	f04f 0400 	mov.w	r4, #0
  400982:	f641 13ca 	movw	r3, #6602	; 0x19ca
  400986:	f2c2 0300 	movt	r3, #8192	; 0x2000
  40098a:	701c      	strb	r4, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
  40098c:	f641 206c 	movw	r0, #6764	; 0x1a6c
  400990:	f2c2 0000 	movt	r0, #8192	; 0x2000
  400994:	7004      	strb	r4, [r0, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
  400996:	f641 3100 	movw	r1, #6912	; 0x1b00
  40099a:	f2c2 0100 	movt	r1, #8192	; 0x2000
  40099e:	700c      	strb	r4, [r1, #0]
	udi_cdc_tx_buf_sel[port] = 0;
  4009a0:	f641 12cc 	movw	r2, #6604	; 0x19cc
  4009a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
  4009a8:	7014      	strb	r4, [r2, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
  4009aa:	f641 13d0 	movw	r3, #6608	; 0x19d0
  4009ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4009b2:	4625      	mov	r5, r4
  4009b4:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
  4009b6:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
  4009b8:	f641 2060 	movw	r0, #6752	; 0x1a60
  4009bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
  4009c0:	8004      	strh	r4, [r0, #0]
	udi_cdc_tx_send(port);
  4009c2:	4620      	mov	r0, r4
  4009c4:	f240 41d1 	movw	r1, #1233	; 0x4d1
  4009c8:	f2c0 0140 	movt	r1, #64	; 0x40
  4009cc:	4788      	blx	r1

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
  4009ce:	f641 22fc 	movw	r2, #6908	; 0x1afc
  4009d2:	f2c2 0200 	movt	r2, #8192	; 0x2000
  4009d6:	7014      	strb	r4, [r2, #0]
	udi_cdc_rx_buf_sel[port] = 0;
  4009d8:	f641 2368 	movw	r3, #6760	; 0x1a68
  4009dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4009e0:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
  4009e2:	f641 2054 	movw	r0, #6740	; 0x1a54
  4009e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
  4009ea:	8004      	strh	r4, [r0, #0]
	udi_cdc_rx_pos[port] = 0;
  4009ec:	f641 215c 	movw	r1, #6748	; 0x1a5c
  4009f0:	f2c2 0100 	movt	r1, #8192	; 0x2000
  4009f4:	800c      	strh	r4, [r1, #0]
	if (!udi_cdc_rx_start(port)) {
  4009f6:	4620      	mov	r0, r4
  4009f8:	f640 0215 	movw	r2, #2069	; 0x815
  4009fc:	f2c0 0240 	movt	r2, #64	; 0x40
  400a00:	4790      	blx	r2
  400a02:	b198      	cbz	r0, 400a2c <udi_cdc_data_enable+0xb0>
		return false;
	}
	udi_cdc_nb_data_enabled++;
  400a04:	f641 13ca 	movw	r3, #6602	; 0x19ca
  400a08:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400a0c:	7818      	ldrb	r0, [r3, #0]
  400a0e:	f100 0001 	add.w	r0, r0, #1
  400a12:	b2c1      	uxtb	r1, r0
  400a14:	7019      	strb	r1, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
  400a16:	781a      	ldrb	r2, [r3, #0]
  400a18:	2a01      	cmp	r2, #1
  400a1a:	d10a      	bne.n	400a32 <udi_cdc_data_enable+0xb6>
		udi_cdc_data_running = true;
  400a1c:	f04f 0001 	mov.w	r0, #1
  400a20:	f641 2364 	movw	r3, #6756	; 0x1a64
  400a24:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400a28:	7018      	strb	r0, [r3, #0]
  400a2a:	bd38      	pop	{r3, r4, r5, pc}
	udi_cdc_rx_trans_ongoing[port] = false;
	udi_cdc_rx_buf_sel[port] = 0;
	udi_cdc_rx_buf_nb[port][0] = 0;
	udi_cdc_rx_pos[port] = 0;
	if (!udi_cdc_rx_start(port)) {
		return false;
  400a2c:	f04f 0000 	mov.w	r0, #0
  400a30:	bd38      	pop	{r3, r4, r5, pc}
	}
	udi_cdc_nb_data_enabled++;
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
		udi_cdc_data_running = true;
	}
	return true;
  400a32:	f04f 0001 	mov.w	r0, #1
}
  400a36:	bd38      	pop	{r3, r4, r5, pc}

00400a38 <udc_get_eof_conf>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  400a38:	f641 3308 	movw	r3, #6920	; 0x1b08
  400a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400a40:	6818      	ldr	r0, [r3, #0]
  400a42:	6801      	ldr	r1, [r0, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400a44:	884a      	ldrh	r2, [r1, #2]
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
  400a46:	1888      	adds	r0, r1, r2
  400a48:	4770      	bx	lr
  400a4a:	bf00      	nop

00400a4c <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
  400a4c:	b538      	push	{r3, r4, r5, lr}
  400a4e:	4605      	mov	r5, r0
  400a50:	460c      	mov	r4, r1
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
  400a52:	f640 2339 	movw	r3, #2617	; 0xa39
  400a56:	f2c0 0340 	movt	r3, #64	; 0x40
  400a5a:	4798      	blx	r3
  400a5c:	4602      	mov	r2, r0
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  400a5e:	7828      	ldrb	r0, [r5, #0]
  400a60:	1828      	adds	r0, r5, r0
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  400a62:	4282      	cmp	r2, r0
  400a64:	d911      	bls.n	400a8a <udc_next_desc_in_iface+0x3e>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  400a66:	7841      	ldrb	r1, [r0, #1]
  400a68:	2904      	cmp	r1, #4
  400a6a:	d011      	beq.n	400a90 <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  400a6c:	42a1      	cmp	r1, r4
  400a6e:	d105      	bne.n	400a7c <udc_next_desc_in_iface+0x30>
  400a70:	bd38      	pop	{r3, r4, r5, pc}
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  400a72:	7841      	ldrb	r1, [r0, #1]
  400a74:	2904      	cmp	r1, #4
  400a76:	d00e      	beq.n	400a96 <udc_next_desc_in_iface+0x4a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  400a78:	42a1      	cmp	r1, r4
  400a7a:	d00e      	beq.n	400a9a <udc_next_desc_in_iface+0x4e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  400a7c:	7803      	ldrb	r3, [r0, #0]
  400a7e:	18c0      	adds	r0, r0, r3
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  400a80:	4282      	cmp	r2, r0
  400a82:	d8f6      	bhi.n	400a72 <udc_next_desc_in_iface+0x26>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
  400a84:	f04f 0000 	mov.w	r0, #0
  400a88:	bd38      	pop	{r3, r4, r5, pc}
  400a8a:	f04f 0000 	mov.w	r0, #0
  400a8e:	bd38      	pop	{r3, r4, r5, pc}
  400a90:	f04f 0000 	mov.w	r0, #0
  400a94:	bd38      	pop	{r3, r4, r5, pc}
  400a96:	f04f 0000 	mov.w	r0, #0
}
  400a9a:	bd38      	pop	{r3, r4, r5, pc}

00400a9c <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
  400a9c:	b570      	push	{r4, r5, r6, lr}
  400a9e:	4605      	mov	r5, r0
  400aa0:	460e      	mov	r6, r1
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
  400aa2:	f641 3312 	movw	r3, #6930	; 0x1b12
  400aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400aaa:	7818      	ldrb	r0, [r3, #0]
  400aac:	2800      	cmp	r0, #0
  400aae:	d031      	beq.n	400b14 <udc_update_iface_desc+0x78>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400ab0:	f641 3108 	movw	r1, #6920	; 0x1b08
  400ab4:	f2c2 0100 	movt	r1, #8192	; 0x2000
  400ab8:	680a      	ldr	r2, [r1, #0]
  400aba:	6814      	ldr	r4, [r2, #0]
  400abc:	7923      	ldrb	r3, [r4, #4]
  400abe:	42ab      	cmp	r3, r5
  400ac0:	d92b      	bls.n	400b1a <udc_update_iface_desc+0x7e>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  400ac2:	f641 3014 	movw	r0, #6932	; 0x1b14
  400ac6:	f2c2 0000 	movt	r0, #8192	; 0x2000
  400aca:	6004      	str	r4, [r0, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
  400acc:	f640 2139 	movw	r1, #2617	; 0xa39
  400ad0:	f2c0 0140 	movt	r1, #64	; 0x40
  400ad4:	4788      	blx	r1
	while (ptr_end_desc >
  400ad6:	4284      	cmp	r4, r0
  400ad8:	d222      	bcs.n	400b20 <udc_update_iface_desc+0x84>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  400ada:	7862      	ldrb	r2, [r4, #1]
  400adc:	2a04      	cmp	r2, #4
  400ade:	d10d      	bne.n	400afc <udc_update_iface_desc+0x60>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  400ae0:	78a3      	ldrb	r3, [r4, #2]
  400ae2:	42ab      	cmp	r3, r5
  400ae4:	d10a      	bne.n	400afc <udc_update_iface_desc+0x60>
  400ae6:	78e1      	ldrb	r1, [r4, #3]
  400ae8:	42b1      	cmp	r1, r6
  400aea:	d107      	bne.n	400afc <udc_update_iface_desc+0x60>
  400aec:	f641 3314 	movw	r3, #6932	; 0x1b14
  400af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400af4:	601c      	str	r4, [r3, #0]
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
  400af6:	f04f 0001 	mov.w	r0, #1
  400afa:	bd70      	pop	{r4, r5, r6, pc}
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  400afc:	7822      	ldrb	r2, [r4, #0]
  400afe:	18a4      	adds	r4, r4, r2
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
  400b00:	42a0      	cmp	r0, r4
  400b02:	d8ea      	bhi.n	400ada <udc_update_iface_desc+0x3e>
  400b04:	f641 3014 	movw	r0, #6932	; 0x1b14
  400b08:	f2c2 0000 	movt	r0, #8192	; 0x2000
  400b0c:	6004      	str	r4, [r0, #0]
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
  400b0e:	f04f 0000 	mov.w	r0, #0
  400b12:	bd70      	pop	{r4, r5, r6, pc}
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
  400b14:	f04f 0000 	mov.w	r0, #0
  400b18:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
  400b1a:	f04f 0000 	mov.w	r0, #0
  400b1e:	bd70      	pop	{r4, r5, r6, pc}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
  400b20:	f04f 0000 	mov.w	r0, #0
}
  400b24:	bd70      	pop	{r4, r5, r6, pc}
  400b26:	bf00      	nop

00400b28 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  400b28:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  400b2a:	f641 432c 	movw	r3, #7212	; 0x1c2c
  400b2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400b32:	8858      	ldrh	r0, [r3, #2]
  400b34:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400b38:	f642 2179 	movw	r1, #10873	; 0x2a79
  400b3c:	f2c0 0140 	movt	r1, #64	; 0x40
  400b40:	4788      	blx	r1
  400b42:	bd08      	pop	{r3, pc}

00400b44 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
  400b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400b48:	4680      	mov	r8, r0
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  400b4a:	f640 239d 	movw	r3, #2717	; 0xa9d
  400b4e:	f2c0 0340 	movt	r3, #64	; 0x40
  400b52:	4798      	blx	r3
  400b54:	b338      	cbz	r0, 400ba6 <udc_iface_enable+0x62>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  400b56:	f641 3014 	movw	r0, #6932	; 0x1b14
  400b5a:	f2c2 0000 	movt	r0, #8192	; 0x2000
  400b5e:	6804      	ldr	r4, [r0, #0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400b60:	f04f 0605 	mov.w	r6, #5
  400b64:	f640 254d 	movw	r5, #2637	; 0xa4d
  400b68:	f2c0 0540 	movt	r5, #64	; 0x40
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  400b6c:	f642 3711 	movw	r7, #11025	; 0x2b11
  400b70:	f2c0 0740 	movt	r7, #64	; 0x40

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400b74:	4620      	mov	r0, r4
  400b76:	4631      	mov	r1, r6
  400b78:	47a8      	blx	r5
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
  400b7a:	4604      	mov	r4, r0
  400b7c:	b138      	cbz	r0, 400b8e <udc_iface_enable+0x4a>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  400b7e:	7880      	ldrb	r0, [r0, #2]
  400b80:	78e1      	ldrb	r1, [r4, #3]
  400b82:	88a2      	ldrh	r2, [r4, #4]
  400b84:	47b8      	blx	r7
  400b86:	2800      	cmp	r0, #0
  400b88:	d1f4      	bne.n	400b74 <udc_iface_enable+0x30>
  400b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  400b8e:	f641 3108 	movw	r1, #6920	; 0x1b08
  400b92:	f2c2 0100 	movt	r1, #8192	; 0x2000
  400b96:	680a      	ldr	r2, [r1, #0]
  400b98:	6853      	ldr	r3, [r2, #4]
  400b9a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
  400b9e:	6801      	ldr	r1, [r0, #0]
  400ba0:	4788      	blx	r1
  400ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
		return false;
  400ba6:	f04f 0000 	mov.w	r0, #0
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
  400baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400bae:	bf00      	nop

00400bb0 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
  400bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400bb4:	4604      	mov	r4, r0
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  400bb6:	f04f 0100 	mov.w	r1, #0
  400bba:	f640 239d 	movw	r3, #2717	; 0xa9d
  400bbe:	f2c0 0340 	movt	r3, #64	; 0x40
  400bc2:	4798      	blx	r3
  400bc4:	2800      	cmp	r0, #0
  400bc6:	d030      	beq.n	400c2a <udc_iface_disable+0x7a>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400bc8:	f641 3008 	movw	r0, #6920	; 0x1b08
  400bcc:	f2c2 0000 	movt	r0, #8192	; 0x2000
  400bd0:	6801      	ldr	r1, [r0, #0]
  400bd2:	684a      	ldr	r2, [r1, #4]
  400bd4:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400bd8:	f8d8 300c 	ldr.w	r3, [r8, #12]
  400bdc:	4798      	blx	r3
  400bde:	4601      	mov	r1, r0
  400be0:	4620      	mov	r0, r4
  400be2:	f640 229d 	movw	r2, #2717	; 0xa9d
  400be6:	f2c0 0240 	movt	r2, #64	; 0x40
  400bea:	4790      	blx	r2
  400bec:	b308      	cbz	r0, 400c32 <udc_iface_disable+0x82>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  400bee:	f641 3414 	movw	r4, #6932	; 0x1b14
  400bf2:	f2c2 0400 	movt	r4, #8192	; 0x2000
  400bf6:	6824      	ldr	r4, [r4, #0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400bf8:	f04f 0605 	mov.w	r6, #5
  400bfc:	f640 254d 	movw	r5, #2637	; 0xa4d
  400c00:	f2c0 0540 	movt	r5, #64	; 0x40
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
  400c04:	f642 474d 	movw	r7, #11341	; 0x2c4d
  400c08:	f2c0 0740 	movt	r7, #64	; 0x40
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400c0c:	4620      	mov	r0, r4
  400c0e:	4631      	mov	r1, r6
  400c10:	47a8      	blx	r5
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
  400c12:	4604      	mov	r4, r0
  400c14:	b110      	cbz	r0, 400c1c <udc_iface_disable+0x6c>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
  400c16:	7880      	ldrb	r0, [r0, #2]
  400c18:	47b8      	blx	r7
		}
  400c1a:	e7f7      	b.n	400c0c <udc_iface_disable+0x5c>
	}
#endif

	// Disable interface
	udi_api->disable();
  400c1c:	f8d8 0004 	ldr.w	r0, [r8, #4]
  400c20:	4780      	blx	r0
	return true;
  400c22:	f04f 0001 	mov.w	r0, #1
  400c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
  400c2a:	f04f 0000 	mov.w	r0, #0
  400c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
		return false;
  400c32:	f04f 0000 	mov.w	r0, #0
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
  400c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400c3a:	bf00      	nop

00400c3c <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
  400c3c:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
  400c3e:	f641 3312 	movw	r3, #6930	; 0x1b12
  400c42:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400c46:	7818      	ldrb	r0, [r3, #0]
  400c48:	b1d8      	cbz	r0, 400c82 <udc_reset+0x46>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400c4a:	f641 3108 	movw	r1, #6920	; 0x1b08
  400c4e:	f2c2 0100 	movt	r1, #8192	; 0x2000
  400c52:	680a      	ldr	r2, [r1, #0]
  400c54:	6813      	ldr	r3, [r2, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  400c56:	7918      	ldrb	r0, [r3, #4]
  400c58:	b198      	cbz	r0, 400c82 <udc_reset+0x46>
  400c5a:	f04f 0400 	mov.w	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
  400c5e:	f640 36b1 	movw	r6, #2993	; 0xbb1
  400c62:	f2c0 0640 	movt	r6, #64	; 0x40
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400c66:	f641 3508 	movw	r5, #6920	; 0x1b08
  400c6a:	f2c2 0500 	movt	r5, #8192	; 0x2000
				iface_num++) {
			udc_iface_disable(iface_num);
  400c6e:	4620      	mov	r0, r4
  400c70:	47b0      	blx	r6
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
  400c72:	f104 0401 	add.w	r4, r4, #1
  400c76:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400c78:	6829      	ldr	r1, [r5, #0]
  400c7a:	680a      	ldr	r2, [r1, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  400c7c:	7913      	ldrb	r3, [r2, #4]
  400c7e:	42a3      	cmp	r3, r4
  400c80:	d8f5      	bhi.n	400c6e <udc_reset+0x32>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
  400c82:	f641 3012 	movw	r0, #6930	; 0x1b12
  400c86:	f2c2 0000 	movt	r0, #8192	; 0x2000
  400c8a:	f04f 0100 	mov.w	r1, #0
  400c8e:	7001      	strb	r1, [r0, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
  400c90:	f641 3310 	movw	r3, #6928	; 0x1b10
  400c94:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400c98:	f04f 0201 	mov.w	r2, #1
  400c9c:	801a      	strh	r2, [r3, #0]
  400c9e:	bd70      	pop	{r4, r5, r6, pc}

00400ca0 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
  400ca0:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
  400ca2:	f641 3312 	movw	r3, #6930	; 0x1b12
  400ca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400caa:	7818      	ldrb	r0, [r3, #0]
  400cac:	b1d8      	cbz	r0, 400ce6 <udc_sof_notify+0x46>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400cae:	f641 3108 	movw	r1, #6920	; 0x1b08
  400cb2:	f2c2 0100 	movt	r1, #8192	; 0x2000
  400cb6:	680b      	ldr	r3, [r1, #0]
  400cb8:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  400cba:	7910      	ldrb	r0, [r2, #4]
  400cbc:	b198      	cbz	r0, 400ce6 <udc_sof_notify+0x46>
  400cbe:	f04f 0400 	mov.w	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400cc2:	f641 3508 	movw	r5, #6920	; 0x1b08
  400cc6:	f2c2 0500 	movt	r5, #8192	; 0x2000
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  400cca:	685b      	ldr	r3, [r3, #4]
  400ccc:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
  400cd0:	690a      	ldr	r2, [r1, #16]
  400cd2:	b102      	cbz	r2, 400cd6 <udc_sof_notify+0x36>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  400cd4:	4790      	blx	r2
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
  400cd6:	f104 0401 	add.w	r4, r4, #1
  400cda:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400cdc:	682b      	ldr	r3, [r5, #0]
  400cde:	6818      	ldr	r0, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  400ce0:	7901      	ldrb	r1, [r0, #4]
  400ce2:	42a1      	cmp	r1, r4
  400ce4:	d8f1      	bhi.n	400cca <udc_sof_notify+0x2a>
  400ce6:	bd38      	pop	{r3, r4, r5, pc}

00400ce8 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  400ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  400cea:	f641 432c 	movw	r3, #7212	; 0x1c2c
  400cee:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400cf2:	f04f 0200 	mov.w	r2, #0
  400cf6:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  400cf8:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  400cfa:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  400cfc:	7818      	ldrb	r0, [r3, #0]
  400cfe:	f010 0f80 	tst.w	r0, #128	; 0x80
  400d02:	f000 82ba 	beq.w	40127a <udc_process_setup+0x592>
		if (udd_g_ctrlreq.req.wLength == 0) {
  400d06:	f641 422c 	movw	r2, #7212	; 0x1c2c
  400d0a:	f2c2 0200 	movt	r2, #8192	; 0x2000
  400d0e:	88d2      	ldrh	r2, [r2, #6]
  400d10:	2a00      	cmp	r2, #0
  400d12:	f040 82b7 	bne.w	401284 <udc_process_setup+0x59c>
  400d16:	e2a4      	b.n	401262 <udc_process_setup+0x57a>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  400d18:	f010 001f 	ands.w	r0, r0, #31
  400d1c:	f040 8086 	bne.w	400e2c <udc_process_setup+0x144>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  400d20:	f641 412c 	movw	r1, #7212	; 0x1c2c
  400d24:	f2c2 0100 	movt	r1, #8192	; 0x2000
  400d28:	784b      	ldrb	r3, [r1, #1]
  400d2a:	2b06      	cmp	r3, #6
  400d2c:	d016      	beq.n	400d5c <udc_process_setup+0x74>
  400d2e:	2b08      	cmp	r3, #8
  400d30:	d069      	beq.n	400e06 <udc_process_setup+0x11e>
  400d32:	2b00      	cmp	r3, #0
  400d34:	d17a      	bne.n	400e2c <udc_process_setup+0x144>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  400d36:	2a02      	cmp	r2, #2
  400d38:	d10d      	bne.n	400d56 <udc_process_setup+0x6e>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  400d3a:	f641 3010 	movw	r0, #6928	; 0x1b10
  400d3e:	f2c2 0000 	movt	r0, #8192	; 0x2000
  400d42:	f04f 0102 	mov.w	r1, #2
  400d46:	f642 3301 	movw	r3, #11009	; 0x2b01
  400d4a:	f2c0 0340 	movt	r3, #64	; 0x40
  400d4e:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
  400d50:	f04f 0001 	mov.w	r0, #1
  400d54:	e20a      	b.n	40116c <udc_process_setup+0x484>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
  400d56:	f04f 0000 	mov.w	r0, #0
  400d5a:	e207      	b.n	40116c <udc_process_setup+0x484>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  400d5c:	f641 402c 	movw	r0, #7212	; 0x1c2c
  400d60:	f2c2 0000 	movt	r0, #8192	; 0x2000
  400d64:	8841      	ldrh	r1, [r0, #2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  400d66:	ea4f 2311 	mov.w	r3, r1, lsr #8
  400d6a:	2b02      	cmp	r3, #2
  400d6c:	d010      	beq.n	400d90 <udc_process_setup+0xa8>
  400d6e:	2b03      	cmp	r3, #3
  400d70:	d025      	beq.n	400dbe <udc_process_setup+0xd6>
  400d72:	2b01      	cmp	r3, #1
  400d74:	d13b      	bne.n	400dee <udc_process_setup+0x106>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
  400d76:	f240 0238 	movw	r2, #56	; 0x38
  400d7a:	f2c2 0200 	movt	r2, #8192	; 0x2000
  400d7e:	6811      	ldr	r1, [r2, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
  400d80:	4608      	mov	r0, r1
  400d82:	7809      	ldrb	r1, [r1, #0]
  400d84:	f642 3301 	movw	r3, #11009	; 0x2b01
  400d88:	f2c0 0340 	movt	r3, #64	; 0x40
  400d8c:	4798      	blx	r3
  400d8e:	e01e      	b.n	400dce <udc_process_setup+0xe6>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  400d90:	b2c8      	uxtb	r0, r1
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
  400d92:	f240 0138 	movw	r1, #56	; 0x38
  400d96:	f2c2 0100 	movt	r1, #8192	; 0x2000
  400d9a:	680b      	ldr	r3, [r1, #0]
  400d9c:	7c5a      	ldrb	r2, [r3, #17]
  400d9e:	4282      	cmp	r2, r0
  400da0:	d928      	bls.n	400df4 <udc_process_setup+0x10c>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
  400da2:	49a6      	ldr	r1, [pc, #664]	; (40103c <udc_process_setup+0x354>)
  400da4:	684b      	ldr	r3, [r1, #4]
  400da6:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
  400daa:	4610      	mov	r0, r2
  400dac:	8851      	ldrh	r1, [r2, #2]
  400dae:	4ba4      	ldr	r3, [pc, #656]	; (401040 <udc_process_setup+0x358>)
  400db0:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  400db2:	48a4      	ldr	r0, [pc, #656]	; (401044 <udc_process_setup+0x35c>)
  400db4:	6881      	ldr	r1, [r0, #8]
  400db6:	f04f 0202 	mov.w	r2, #2
  400dba:	704a      	strb	r2, [r1, #1]
  400dbc:	e007      	b.n	400dce <udc_process_setup+0xe6>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  400dbe:	f011 0fff 	tst.w	r1, #255	; 0xff
  400dc2:	d11a      	bne.n	400dfa <udc_process_setup+0x112>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  400dc4:	48a0      	ldr	r0, [pc, #640]	; (401048 <udc_process_setup+0x360>)
  400dc6:	f04f 0104 	mov.w	r1, #4
  400dca:	4a9d      	ldr	r2, [pc, #628]	; (401040 <udc_process_setup+0x358>)
  400dcc:	4790      	blx	r2
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  400dce:	f641 432c 	movw	r3, #7212	; 0x1c2c
  400dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400dd6:	88d8      	ldrh	r0, [r3, #6]
  400dd8:	8999      	ldrh	r1, [r3, #12]
  400dda:	4281      	cmp	r1, r0
  400ddc:	d910      	bls.n	400e00 <udc_process_setup+0x118>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  400dde:	f641 422c 	movw	r2, #7212	; 0x1c2c
  400de2:	f2c2 0200 	movt	r2, #8192	; 0x2000
  400de6:	8190      	strh	r0, [r2, #12]
	}
	return true;
  400de8:	f04f 0001 	mov.w	r0, #1
  400dec:	e1be      	b.n	40116c <udc_process_setup+0x484>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
  400dee:	f04f 0000 	mov.w	r0, #0
  400df2:	e1bb      	b.n	40116c <udc_process_setup+0x484>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
  400df4:	f04f 0000 	mov.w	r0, #0
  400df8:	e1b8      	b.n	40116c <udc_process_setup+0x484>
#endif

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
  400dfa:	f04f 0000 	mov.w	r0, #0
  400dfe:	e1b5      	b.n	40116c <udc_process_setup+0x484>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
  400e00:	f04f 0001 	mov.w	r0, #1
  400e04:	e1b2      	b.n	40116c <udc_process_setup+0x484>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
  400e06:	2a01      	cmp	r2, #1
  400e08:	d10d      	bne.n	400e26 <udc_process_setup+0x13e>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
  400e0a:	f641 3012 	movw	r0, #6930	; 0x1b12
  400e0e:	f2c2 0000 	movt	r0, #8192	; 0x2000
  400e12:	f04f 0101 	mov.w	r1, #1
  400e16:	f642 3201 	movw	r2, #11009	; 0x2b01
  400e1a:	f2c0 0240 	movt	r2, #64	; 0x40
  400e1e:	4790      	blx	r2
	return true;
  400e20:	f04f 0001 	mov.w	r0, #1
  400e24:	e1a2      	b.n	40116c <udc_process_setup+0x484>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
  400e26:	f04f 0000 	mov.w	r0, #0
  400e2a:	e19f      	b.n	40116c <udc_process_setup+0x484>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  400e2c:	2801      	cmp	r0, #1
  400e2e:	d134      	bne.n	400e9a <udc_process_setup+0x1b2>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  400e30:	f641 412c 	movw	r1, #7212	; 0x1c2c
  400e34:	f2c2 0100 	movt	r1, #8192	; 0x2000
  400e38:	784b      	ldrb	r3, [r1, #1]
  400e3a:	2b0a      	cmp	r3, #10
  400e3c:	d12d      	bne.n	400e9a <udc_process_setup+0x1b2>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
  400e3e:	2a01      	cmp	r2, #1
  400e40:	d11f      	bne.n	400e82 <udc_process_setup+0x19a>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
  400e42:	4882      	ldr	r0, [pc, #520]	; (40104c <udc_process_setup+0x364>)
  400e44:	7803      	ldrb	r3, [r0, #0]
  400e46:	b1fb      	cbz	r3, 400e88 <udc_process_setup+0x1a0>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400e48:	4c7e      	ldr	r4, [pc, #504]	; (401044 <udc_process_setup+0x35c>)
  400e4a:	7924      	ldrb	r4, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400e4c:	4d80      	ldr	r5, [pc, #512]	; (401050 <udc_process_setup+0x368>)
  400e4e:	682d      	ldr	r5, [r5, #0]
  400e50:	6829      	ldr	r1, [r5, #0]
  400e52:	790a      	ldrb	r2, [r1, #4]
  400e54:	42a2      	cmp	r2, r4
  400e56:	d91a      	bls.n	400e8e <udc_process_setup+0x1a6>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  400e58:	4620      	mov	r0, r4
  400e5a:	f04f 0100 	mov.w	r1, #0
  400e5e:	4b7d      	ldr	r3, [pc, #500]	; (401054 <udc_process_setup+0x36c>)
  400e60:	4798      	blx	r3
  400e62:	b1b8      	cbz	r0, 400e94 <udc_process_setup+0x1ac>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400e64:	6868      	ldr	r0, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
  400e66:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
  400e6a:	68ca      	ldr	r2, [r1, #12]
  400e6c:	4790      	blx	r2
  400e6e:	4b7a      	ldr	r3, [pc, #488]	; (401058 <udc_process_setup+0x370>)
  400e70:	7018      	strb	r0, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
  400e72:	4618      	mov	r0, r3
  400e74:	f04f 0101 	mov.w	r1, #1
  400e78:	4a71      	ldr	r2, [pc, #452]	; (401040 <udc_process_setup+0x358>)
  400e7a:	4790      	blx	r2
	return true;
  400e7c:	f04f 0001 	mov.w	r0, #1
  400e80:	e174      	b.n	40116c <udc_process_setup+0x484>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
  400e82:	f04f 0000 	mov.w	r0, #0
  400e86:	e171      	b.n	40116c <udc_process_setup+0x484>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
  400e88:	f04f 0000 	mov.w	r0, #0
  400e8c:	e16e      	b.n	40116c <udc_process_setup+0x484>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
  400e8e:	f04f 0000 	mov.w	r0, #0
  400e92:	e16b      	b.n	40116c <udc_process_setup+0x484>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
  400e94:	f04f 0000 	mov.w	r0, #0
  400e98:	e168      	b.n	40116c <udc_process_setup+0x484>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  400e9a:	2802      	cmp	r0, #2
  400e9c:	f040 8168 	bne.w	401170 <udc_process_setup+0x488>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  400ea0:	f641 402c 	movw	r0, #7212	; 0x1c2c
  400ea4:	f2c2 0000 	movt	r0, #8192	; 0x2000
  400ea8:	7841      	ldrb	r1, [r0, #1]
  400eaa:	2900      	cmp	r1, #0
  400eac:	f040 8156 	bne.w	40115c <udc_process_setup+0x474>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  400eb0:	2a02      	cmp	r2, #2
  400eb2:	d10d      	bne.n	400ed0 <udc_process_setup+0x1e8>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  400eb4:	4a63      	ldr	r2, [pc, #396]	; (401044 <udc_process_setup+0x35c>)
  400eb6:	7910      	ldrb	r0, [r2, #4]
  400eb8:	4b68      	ldr	r3, [pc, #416]	; (40105c <udc_process_setup+0x374>)
  400eba:	4798      	blx	r3
  400ebc:	4968      	ldr	r1, [pc, #416]	; (401060 <udc_process_setup+0x378>)
  400ebe:	8008      	strh	r0, [r1, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  400ec0:	4608      	mov	r0, r1
  400ec2:	f04f 0102 	mov.w	r1, #2
  400ec6:	4a5e      	ldr	r2, [pc, #376]	; (401040 <udc_process_setup+0x358>)
  400ec8:	4790      	blx	r2
			sizeof(udc_ep_status));
	return true;
  400eca:	f04f 0001 	mov.w	r0, #1
  400ece:	e14d      	b.n	40116c <udc_process_setup+0x484>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
  400ed0:	f04f 0000 	mov.w	r0, #0
  400ed4:	e14a      	b.n	40116c <udc_process_setup+0x484>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  400ed6:	f010 031f 	ands.w	r3, r0, #31
  400eda:	f040 80c3 	bne.w	401064 <udc_process_setup+0x37c>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  400ede:	f641 412c 	movw	r1, #7212	; 0x1c2c
  400ee2:	f2c2 0100 	movt	r1, #8192	; 0x2000
  400ee6:	784a      	ldrb	r2, [r1, #1]
  400ee8:	f102 30ff 	add.w	r0, r2, #4294967295
  400eec:	2808      	cmp	r0, #8
  400eee:	f200 80b9 	bhi.w	401064 <udc_process_setup+0x37c>
  400ef2:	e8df f010 	tbh	[pc, r0, lsl #1]
  400ef6:	001e      	.short	0x001e
  400ef8:	013600b7 	.word	0x013600b7
  400efc:	000900b7 	.word	0x000900b7
  400f00:	00b700b7 	.word	0x00b700b7
  400f04:	003c00b7 	.word	0x003c00b7
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  400f08:	f641 402c 	movw	r0, #7212	; 0x1c2c
  400f0c:	f2c2 0000 	movt	r0, #8192	; 0x2000
  400f10:	88c1      	ldrh	r1, [r0, #6]
  400f12:	b959      	cbnz	r1, 400f2c <udc_process_setup+0x244>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
  400f14:	f641 432c 	movw	r3, #7212	; 0x1c2c
  400f18:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400f1c:	f640 3229 	movw	r2, #2857	; 0xb29
  400f20:	f2c0 0240 	movt	r2, #64	; 0x40
  400f24:	611a      	str	r2, [r3, #16]
	return true;
  400f26:	f04f 0001 	mov.w	r0, #1
  400f2a:	e11f      	b.n	40116c <udc_process_setup+0x484>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  400f2c:	f04f 0000 	mov.w	r0, #0
  400f30:	e11c      	b.n	40116c <udc_process_setup+0x484>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  400f32:	f641 402c 	movw	r0, #7212	; 0x1c2c
  400f36:	f2c2 0000 	movt	r0, #8192	; 0x2000
  400f3a:	88c1      	ldrh	r1, [r0, #6]
  400f3c:	b989      	cbnz	r1, 400f62 <udc_process_setup+0x27a>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  400f3e:	f641 432c 	movw	r3, #7212	; 0x1c2c
  400f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400f46:	885a      	ldrh	r2, [r3, #2]
  400f48:	2a01      	cmp	r2, #1
  400f4a:	d10d      	bne.n	400f68 <udc_process_setup+0x280>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  400f4c:	f641 3010 	movw	r0, #6928	; 0x1b10
  400f50:	f2c2 0000 	movt	r0, #8192	; 0x2000
  400f54:	8801      	ldrh	r1, [r0, #0]
  400f56:	f021 0302 	bic.w	r3, r1, #2
  400f5a:	8003      	strh	r3, [r0, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
  400f5c:	f04f 0001 	mov.w	r0, #1
  400f60:	e104      	b.n	40116c <udc_process_setup+0x484>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  400f62:	f04f 0000 	mov.w	r0, #0
  400f66:	e101      	b.n	40116c <udc_process_setup+0x484>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
  400f68:	f04f 0000 	mov.w	r0, #0
  400f6c:	e0fe      	b.n	40116c <udc_process_setup+0x484>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
  400f6e:	f641 422c 	movw	r2, #7212	; 0x1c2c
  400f72:	f2c2 0200 	movt	r2, #8192	; 0x2000
  400f76:	88d0      	ldrh	r0, [r2, #6]
  400f78:	2800      	cmp	r0, #0
  400f7a:	d14c      	bne.n	401016 <udc_process_setup+0x32e>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
  400f7c:	f642 21bd 	movw	r1, #10941	; 0x2abd
  400f80:	f2c0 0140 	movt	r1, #64	; 0x40
  400f84:	4788      	blx	r1
  400f86:	2800      	cmp	r0, #0
  400f88:	d048      	beq.n	40101c <udc_process_setup+0x334>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400f8a:	f641 432c 	movw	r3, #7212	; 0x1c2c
  400f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400f92:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
  400f94:	f240 0038 	movw	r0, #56	; 0x38
  400f98:	f2c2 0000 	movt	r0, #8192	; 0x2000
  400f9c:	6801      	ldr	r1, [r0, #0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400f9e:	7c4b      	ldrb	r3, [r1, #17]
  400fa0:	429a      	cmp	r2, r3
  400fa2:	dc3e      	bgt.n	401022 <udc_process_setup+0x33a>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
  400fa4:	f640 423d 	movw	r2, #3133	; 0xc3d
  400fa8:	f2c0 0240 	movt	r2, #64	; 0x40
  400fac:	4790      	blx	r2

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  400fae:	f641 402c 	movw	r0, #7212	; 0x1c2c
  400fb2:	f2c2 0000 	movt	r0, #8192	; 0x2000
  400fb6:	7881      	ldrb	r1, [r0, #2]
  400fb8:	f641 3312 	movw	r3, #6930	; 0x1b12
  400fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400fc0:	7019      	strb	r1, [r3, #0]
	if (udc_num_configuration == 0) {
  400fc2:	b389      	cbz	r1, 401028 <udc_process_setup+0x340>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  400fc4:	f101 33ff 	add.w	r3, r1, #4294967295
  400fc8:	f240 0238 	movw	r2, #56	; 0x38
  400fcc:	f2c2 0200 	movt	r2, #8192	; 0x2000
  400fd0:	6852      	ldr	r2, [r2, #4]
  400fd2:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  400fd6:	f641 3108 	movw	r1, #6920	; 0x1b08
  400fda:	f2c2 0100 	movt	r1, #8192	; 0x2000
  400fde:	6008      	str	r0, [r1, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400fe0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400fe4:	791a      	ldrb	r2, [r3, #4]
  400fe6:	b312      	cbz	r2, 40102e <udc_process_setup+0x346>
  400fe8:	f04f 0400 	mov.w	r4, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
  400fec:	4626      	mov	r6, r4
  400fee:	f640 3545 	movw	r5, #2885	; 0xb45
  400ff2:	f2c0 0540 	movt	r5, #64	; 0x40
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400ff6:	460f      	mov	r7, r1
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
  400ff8:	4620      	mov	r0, r4
  400ffa:	4631      	mov	r1, r6
  400ffc:	47a8      	blx	r5
  400ffe:	b1c8      	cbz	r0, 401034 <udc_process_setup+0x34c>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
  401000:	f104 0401 	add.w	r4, r4, #1
  401004:	b2e4      	uxtb	r4, r4
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401006:	6838      	ldr	r0, [r7, #0]
  401008:	6801      	ldr	r1, [r0, #0]
  40100a:	790b      	ldrb	r3, [r1, #4]
  40100c:	42a3      	cmp	r3, r4
  40100e:	d8f3      	bhi.n	400ff8 <udc_process_setup+0x310>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
  401010:	f04f 0001 	mov.w	r0, #1
  401014:	e0aa      	b.n	40116c <udc_process_setup+0x484>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  401016:	f04f 0000 	mov.w	r0, #0
  40101a:	e0a7      	b.n	40116c <udc_process_setup+0x484>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
  40101c:	f04f 0000 	mov.w	r0, #0
  401020:	e0a4      	b.n	40116c <udc_process_setup+0x484>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
  401022:	f04f 0000 	mov.w	r0, #0
  401026:	e0a1      	b.n	40116c <udc_process_setup+0x484>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
  401028:	f04f 0001 	mov.w	r0, #1
  40102c:	e09e      	b.n	40116c <udc_process_setup+0x484>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
  40102e:	f04f 0001 	mov.w	r0, #1
  401032:	e09b      	b.n	40116c <udc_process_setup+0x484>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
  401034:	f04f 0000 	mov.w	r0, #0
  401038:	e098      	b.n	40116c <udc_process_setup+0x484>
  40103a:	bf00      	nop
  40103c:	20000038 	.word	0x20000038
  401040:	00402b01 	.word	0x00402b01
  401044:	20001c2c 	.word	0x20001c2c
  401048:	200000a8 	.word	0x200000a8
  40104c:	20001b12 	.word	0x20001b12
  401050:	20001b08 	.word	0x20001b08
  401054:	00400a9d 	.word	0x00400a9d
  401058:	20001b0c 	.word	0x20001b0c
  40105c:	00402c7d 	.word	0x00402c7d
  401060:	20001b0e 	.word	0x20001b0e
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  401064:	2b01      	cmp	r3, #1
  401066:	d12d      	bne.n	4010c4 <udc_process_setup+0x3dc>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  401068:	f641 412c 	movw	r1, #7212	; 0x1c2c
  40106c:	f2c2 0100 	movt	r1, #8192	; 0x2000
  401070:	784a      	ldrb	r2, [r1, #1]
  401072:	2a0b      	cmp	r2, #11
  401074:	d126      	bne.n	4010c4 <udc_process_setup+0x3dc>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
  401076:	f641 402c 	movw	r0, #7212	; 0x1c2c
  40107a:	f2c2 0000 	movt	r0, #8192	; 0x2000
  40107e:	88c2      	ldrh	r2, [r0, #6]
  401080:	b9ba      	cbnz	r2, 4010b2 <udc_process_setup+0x3ca>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
  401082:	f641 3312 	movw	r3, #6930	; 0x1b12
  401086:	f2c2 0300 	movt	r3, #8192	; 0x2000
  40108a:	7819      	ldrb	r1, [r3, #0]
  40108c:	b1a1      	cbz	r1, 4010b8 <udc_process_setup+0x3d0>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  40108e:	f641 452c 	movw	r5, #7212	; 0x1c2c
  401092:	f2c2 0500 	movt	r5, #8192	; 0x2000
  401096:	792c      	ldrb	r4, [r5, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  401098:	886d      	ldrh	r5, [r5, #2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
  40109a:	4620      	mov	r0, r4
  40109c:	f640 32b1 	movw	r2, #2993	; 0xbb1
  4010a0:	f2c0 0240 	movt	r2, #64	; 0x40
  4010a4:	4790      	blx	r2
  4010a6:	b150      	cbz	r0, 4010be <udc_process_setup+0x3d6>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
  4010a8:	4620      	mov	r0, r4
  4010aa:	b2e9      	uxtb	r1, r5
  4010ac:	4b78      	ldr	r3, [pc, #480]	; (401290 <udc_process_setup+0x5a8>)
  4010ae:	4798      	blx	r3
  4010b0:	e05c      	b.n	40116c <udc_process_setup+0x484>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
  4010b2:	f04f 0000 	mov.w	r0, #0
  4010b6:	e059      	b.n	40116c <udc_process_setup+0x484>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
  4010b8:	f04f 0000 	mov.w	r0, #0
  4010bc:	e056      	b.n	40116c <udc_process_setup+0x484>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
		return false;
  4010be:	f04f 0000 	mov.w	r0, #0
  4010c2:	e053      	b.n	40116c <udc_process_setup+0x484>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  4010c4:	2b02      	cmp	r3, #2
  4010c6:	d153      	bne.n	401170 <udc_process_setup+0x488>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  4010c8:	f641 432c 	movw	r3, #7212	; 0x1c2c
  4010cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4010d0:	7858      	ldrb	r0, [r3, #1]
  4010d2:	2801      	cmp	r0, #1
  4010d4:	d002      	beq.n	4010dc <udc_process_setup+0x3f4>
  4010d6:	2803      	cmp	r0, #3
  4010d8:	d146      	bne.n	401168 <udc_process_setup+0x480>
  4010da:	e01c      	b.n	401116 <udc_process_setup+0x42e>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  4010dc:	f641 432c 	movw	r3, #7212	; 0x1c2c
  4010e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4010e4:	88d8      	ldrh	r0, [r3, #6]
  4010e6:	b980      	cbnz	r0, 40110a <udc_process_setup+0x422>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  4010e8:	f641 412c 	movw	r1, #7212	; 0x1c2c
  4010ec:	f2c2 0100 	movt	r1, #8192	; 0x2000
  4010f0:	884a      	ldrh	r2, [r1, #2]
  4010f2:	b96a      	cbnz	r2, 401110 <udc_process_setup+0x428>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  4010f4:	f641 432c 	movw	r3, #7212	; 0x1c2c
  4010f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4010fc:	7918      	ldrb	r0, [r3, #4]
  4010fe:	f642 51ed 	movw	r1, #11757	; 0x2ded
  401102:	f2c0 0140 	movt	r1, #64	; 0x40
  401106:	4788      	blx	r1
  401108:	e030      	b.n	40116c <udc_process_setup+0x484>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  40110a:	f04f 0000 	mov.w	r0, #0
  40110e:	e02d      	b.n	40116c <udc_process_setup+0x484>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
  401110:	f04f 0000 	mov.w	r0, #0
  401114:	e02a      	b.n	40116c <udc_process_setup+0x484>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  401116:	f641 412c 	movw	r1, #7212	; 0x1c2c
  40111a:	f2c2 0100 	movt	r1, #8192	; 0x2000
  40111e:	88ca      	ldrh	r2, [r1, #6]
  401120:	b9b2      	cbnz	r2, 401150 <udc_process_setup+0x468>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  401122:	f641 432c 	movw	r3, #7212	; 0x1c2c
  401126:	f2c2 0300 	movt	r3, #8192	; 0x2000
  40112a:	8858      	ldrh	r0, [r3, #2]
  40112c:	b998      	cbnz	r0, 401156 <udc_process_setup+0x46e>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  40112e:	f641 442c 	movw	r4, #7212	; 0x1c2c
  401132:	f2c2 0400 	movt	r4, #8192	; 0x2000
  401136:	7920      	ldrb	r0, [r4, #4]
  401138:	f243 0191 	movw	r1, #12433	; 0x3091
  40113c:	f2c0 0140 	movt	r1, #64	; 0x40
  401140:	4788      	blx	r1
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  401142:	7920      	ldrb	r0, [r4, #4]
  401144:	f642 42cd 	movw	r2, #11469	; 0x2ccd
  401148:	f2c0 0240 	movt	r2, #64	; 0x40
  40114c:	4790      	blx	r2
  40114e:	e00d      	b.n	40116c <udc_process_setup+0x484>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  401150:	f04f 0000 	mov.w	r0, #0
  401154:	e00a      	b.n	40116c <udc_process_setup+0x484>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
  401156:	f04f 0000 	mov.w	r0, #0
  40115a:	e007      	b.n	40116c <udc_process_setup+0x484>
				break;
			}
		}
#endif
	}
	return false;
  40115c:	f04f 0000 	mov.w	r0, #0
  401160:	e004      	b.n	40116c <udc_process_setup+0x484>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
  401162:	f04f 0000 	mov.w	r0, #0
  401166:	e001      	b.n	40116c <udc_process_setup+0x484>
				break;
			}
		}
#endif
	}
	return false;
  401168:	f04f 0000 	mov.w	r0, #0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
  40116c:	2800      	cmp	r0, #0
  40116e:	d17b      	bne.n	401268 <udc_process_setup+0x580>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  401170:	f641 432c 	movw	r3, #7212	; 0x1c2c
  401174:	f2c2 0300 	movt	r3, #8192	; 0x2000
  401178:	7818      	ldrb	r0, [r3, #0]
  40117a:	f000 011f 	and.w	r1, r0, #31
  40117e:	2901      	cmp	r1, #1
  401180:	d12d      	bne.n	4011de <udc_process_setup+0x4f6>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  401182:	f641 3212 	movw	r2, #6930	; 0x1b12
  401186:	f2c2 0200 	movt	r2, #8192	; 0x2000
  40118a:	7813      	ldrb	r3, [r2, #0]
  40118c:	b33b      	cbz	r3, 4011de <udc_process_setup+0x4f6>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  40118e:	f641 442c 	movw	r4, #7212	; 0x1c2c
  401192:	f2c2 0400 	movt	r4, #8192	; 0x2000
  401196:	7924      	ldrb	r4, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  401198:	f641 3508 	movw	r5, #6920	; 0x1b08
  40119c:	f2c2 0500 	movt	r5, #8192	; 0x2000
  4011a0:	682d      	ldr	r5, [r5, #0]
  4011a2:	6828      	ldr	r0, [r5, #0]
  4011a4:	7901      	ldrb	r1, [r0, #4]
  4011a6:	42a1      	cmp	r1, r4
  4011a8:	d919      	bls.n	4011de <udc_process_setup+0x4f6>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  4011aa:	4620      	mov	r0, r4
  4011ac:	f04f 0100 	mov.w	r1, #0
  4011b0:	f640 229d 	movw	r2, #2717	; 0xa9d
  4011b4:	f2c0 0240 	movt	r2, #64	; 0x40
  4011b8:	4790      	blx	r2
  4011ba:	b180      	cbz	r0, 4011de <udc_process_setup+0x4f6>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  4011bc:	686b      	ldr	r3, [r5, #4]
  4011be:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4011c2:	68e8      	ldr	r0, [r5, #12]
  4011c4:	4780      	blx	r0
  4011c6:	4601      	mov	r1, r0
  4011c8:	4620      	mov	r0, r4
  4011ca:	f640 229d 	movw	r2, #2717	; 0xa9d
  4011ce:	f2c0 0240 	movt	r2, #64	; 0x40
  4011d2:	4790      	blx	r2
  4011d4:	b118      	cbz	r0, 4011de <udc_process_setup+0x4f6>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
  4011d6:	68a9      	ldr	r1, [r5, #8]
  4011d8:	4788      	blx	r1
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
  4011da:	2800      	cmp	r0, #0
  4011dc:	d147      	bne.n	40126e <udc_process_setup+0x586>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  4011de:	f641 432c 	movw	r3, #7212	; 0x1c2c
  4011e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4011e6:	7818      	ldrb	r0, [r3, #0]
  4011e8:	f000 021f 	and.w	r2, r0, #31
  4011ec:	2a02      	cmp	r2, #2
  4011ee:	d141      	bne.n	401274 <udc_process_setup+0x58c>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  4011f0:	f641 3112 	movw	r1, #6930	; 0x1b12
  4011f4:	f2c2 0100 	movt	r1, #8192	; 0x2000
  4011f8:	780b      	ldrb	r3, [r1, #0]
  4011fa:	b333      	cbz	r3, 40124a <udc_process_setup+0x562>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4011fc:	f641 3008 	movw	r0, #6920	; 0x1b08
  401200:	f2c2 0000 	movt	r0, #8192	; 0x2000
  401204:	6803      	ldr	r3, [r0, #0]
  401206:	681a      	ldr	r2, [r3, #0]
  401208:	7911      	ldrb	r1, [r2, #4]
  40120a:	b309      	cbz	r1, 401250 <udc_process_setup+0x568>
  40120c:	f04f 0400 	mov.w	r4, #0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  401210:	f640 269d 	movw	r6, #2717	; 0xa9d
  401214:	f2c0 0640 	movt	r6, #64	; 0x40
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401218:	f641 3708 	movw	r7, #6920	; 0x1b08
  40121c:	f2c2 0700 	movt	r7, #8192	; 0x2000
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  401220:	685d      	ldr	r5, [r3, #4]
  401222:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  401226:	68eb      	ldr	r3, [r5, #12]
  401228:	4798      	blx	r3
  40122a:	4601      	mov	r1, r0
  40122c:	4620      	mov	r0, r4
  40122e:	47b0      	blx	r6
  401230:	b188      	cbz	r0, 401256 <udc_process_setup+0x56e>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
  401232:	68a8      	ldr	r0, [r5, #8]
  401234:	4780      	blx	r0
  401236:	b988      	cbnz	r0, 40125c <udc_process_setup+0x574>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
  401238:	f104 0401 	add.w	r4, r4, #1
  40123c:	b2e4      	uxtb	r4, r4
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40123e:	683b      	ldr	r3, [r7, #0]
  401240:	681a      	ldr	r2, [r3, #0]
  401242:	7911      	ldrb	r1, [r2, #4]
  401244:	42a1      	cmp	r1, r4
  401246:	d8eb      	bhi.n	401220 <udc_process_setup+0x538>
  401248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
  40124a:	f04f 0000 	mov.w	r0, #0
  40124e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
  401250:	f04f 0000 	mov.w	r0, #0
  401254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
			return false;
  401256:	f04f 0000 	mov.w	r0, #0
  40125a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
  40125c:	f04f 0001 	mov.w	r0, #1
  401260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
  401262:	f04f 0000 	mov.w	r0, #0
  401266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
  401268:	f04f 0001 	mov.w	r0, #1
  40126c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
			return true;
  40126e:	f04f 0001 	mov.w	r0, #1
  401272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  401274:	f04f 0000 	mov.w	r0, #0
  401278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  40127a:	f010 0f60 	tst.w	r0, #96	; 0x60
  40127e:	f47f af77 	bne.w	401170 <udc_process_setup+0x488>
  401282:	e628      	b.n	400ed6 <udc_process_setup+0x1ee>
  401284:	f010 0f60 	tst.w	r0, #96	; 0x60
  401288:	f47f af72 	bne.w	401170 <udc_process_setup+0x488>
  40128c:	e544      	b.n	400d18 <udc_process_setup+0x30>
  40128e:	bf00      	nop
  401290:	00400b45 	.word	0x00400b45

00401294 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  401294:	68c0      	ldr	r0, [r0, #12]
}
  401296:	4770      	bx	lr

00401298 <udd_sleep_mode>:
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
  401298:	4603      	mov	r3, r0
  40129a:	2800      	cmp	r0, #0
  40129c:	d149      	bne.n	401332 <udd_sleep_mode+0x9a>
  40129e:	f641 3258 	movw	r2, #7000	; 0x1b58
  4012a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
  4012a6:	7811      	ldrb	r1, [r2, #0]
  4012a8:	2900      	cmp	r1, #0
  4012aa:	d03c      	beq.n	401326 <udd_sleep_mode+0x8e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4012ac:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  4012b0:	b672      	cpsid	i
  4012b2:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4012b6:	f240 42ac 	movw	r2, #1196	; 0x4ac
  4012ba:	f2c2 0200 	movt	r2, #8192	; 0x2000
  4012be:	7010      	strb	r0, [r2, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
  4012c0:	f641 4224 	movw	r2, #7204	; 0x1c24
  4012c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
  4012c8:	7890      	ldrb	r0, [r2, #2]
  4012ca:	f100 30ff 	add.w	r0, r0, #4294967295
  4012ce:	7090      	strb	r0, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4012d0:	bb49      	cbnz	r1, 401326 <udd_sleep_mode+0x8e>
		cpu_irq_enable();
  4012d2:	f240 42ac 	movw	r2, #1196	; 0x4ac
  4012d6:	f2c2 0200 	movt	r2, #8192	; 0x2000
  4012da:	f04f 0101 	mov.w	r1, #1
  4012de:	7011      	strb	r1, [r2, #0]
  4012e0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  4012e4:	b662      	cpsie	i
  4012e6:	e01e      	b.n	401326 <udd_sleep_mode+0x8e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4012e8:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  4012ec:	b672      	cpsid	i
  4012ee:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4012f2:	f240 42ac 	movw	r2, #1196	; 0x4ac
  4012f6:	f2c2 0200 	movt	r2, #8192	; 0x2000
  4012fa:	f04f 0000 	mov.w	r0, #0
  4012fe:	7010      	strb	r0, [r2, #0]
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  401300:	f641 4224 	movw	r2, #7204	; 0x1c24
  401304:	f2c2 0200 	movt	r2, #8192	; 0x2000
  401308:	7890      	ldrb	r0, [r2, #2]
  40130a:	f100 0001 	add.w	r0, r0, #1
  40130e:	7090      	strb	r0, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401310:	b949      	cbnz	r1, 401326 <udd_sleep_mode+0x8e>
		cpu_irq_enable();
  401312:	f240 42ac 	movw	r2, #1196	; 0x4ac
  401316:	f2c2 0200 	movt	r2, #8192	; 0x2000
  40131a:	f04f 0101 	mov.w	r1, #1
  40131e:	7011      	strb	r1, [r2, #0]
  401320:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  401324:	b662      	cpsie	i
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
  401326:	f641 3058 	movw	r0, #7000	; 0x1b58
  40132a:	f2c2 0000 	movt	r0, #8192	; 0x2000
  40132e:	7003      	strb	r3, [r0, #0]
  401330:	4770      	bx	lr
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
  401332:	f641 3258 	movw	r2, #7000	; 0x1b58
  401336:	f2c2 0200 	movt	r2, #8192	; 0x2000
  40133a:	7810      	ldrb	r0, [r2, #0]
  40133c:	2800      	cmp	r0, #0
  40133e:	d0d3      	beq.n	4012e8 <udd_sleep_mode+0x50>
  401340:	e7f1      	b.n	401326 <udd_sleep_mode+0x8e>
  401342:	bf00      	nop

00401344 <udd_ctrl_init>:
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
	udd_g_ctrlreq.callback = NULL;
  401344:	f641 422c 	movw	r2, #7212	; 0x1c2c
  401348:	f2c2 0200 	movt	r2, #8192	; 0x2000
  40134c:	f04f 0300 	mov.w	r3, #0
  401350:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  401352:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
  401354:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  401356:	f641 305d 	movw	r0, #7005	; 0x1b5d
  40135a:	f2c2 0000 	movt	r0, #8192	; 0x2000
  40135e:	7003      	strb	r3, [r0, #0]
  401360:	4770      	bx	lr
  401362:	bf00      	nop

00401364 <udd_ctrl_stall_data>:
	udd_ack_bank0_received(0);
}


static void udd_ctrl_stall_data(void)
{
  401364:	b082      	sub	sp, #8
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  401366:	f641 335d 	movw	r3, #7005	; 0x1b5d
  40136a:	f2c2 0300 	movt	r3, #8192	; 0x2000
  40136e:	f04f 0205 	mov.w	r2, #5
  401372:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  401374:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  401378:	f2c4 0003 	movt	r0, #16387	; 0x4003
  40137c:	6b01      	ldr	r1, [r0, #48]	; 0x30
  40137e:	9100      	str	r1, [sp, #0]
  401380:	9b00      	ldr	r3, [sp, #0]
  401382:	f043 024f 	orr.w	r2, r3, #79	; 0x4f
  401386:	9200      	str	r2, [sp, #0]
  401388:	9900      	ldr	r1, [sp, #0]
  40138a:	f041 0320 	orr.w	r3, r1, #32
  40138e:	9300      	str	r3, [sp, #0]
  401390:	9a00      	ldr	r2, [sp, #0]
  401392:	6302      	str	r2, [r0, #48]	; 0x30
  401394:	f04f 0000 	mov.w	r0, #0
  401398:	9001      	str	r0, [sp, #4]
  40139a:	9901      	ldr	r1, [sp, #4]
  40139c:	2913      	cmp	r1, #19
  40139e:	d807      	bhi.n	4013b0 <udd_ctrl_stall_data+0x4c>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4013a0:	bf00      	nop
  4013a2:	9b01      	ldr	r3, [sp, #4]
  4013a4:	f103 0301 	add.w	r3, r3, #1
  4013a8:	9301      	str	r3, [sp, #4]
  4013aa:	9a01      	ldr	r2, [sp, #4]
  4013ac:	2a13      	cmp	r2, #19
  4013ae:	d9f7      	bls.n	4013a0 <udd_ctrl_stall_data+0x3c>
}
  4013b0:	b002      	add	sp, #8
  4013b2:	4770      	bx	lr

004013b4 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
  4013b4:	b082      	sub	sp, #8
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  4013b6:	f641 335d 	movw	r3, #7005	; 0x1b5d
  4013ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4013be:	f04f 0203 	mov.w	r2, #3
  4013c2:	701a      	strb	r2, [r3, #0]
	// Validate and send empty IN packet on control endpoint
	// Send ZLP on IN endpoint
	udd_set_transmit_ready(0);
  4013c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4013c8:	f2c4 0003 	movt	r0, #16387	; 0x4003
  4013cc:	6b01      	ldr	r1, [r0, #48]	; 0x30
  4013ce:	9100      	str	r1, [sp, #0]
  4013d0:	9b00      	ldr	r3, [sp, #0]
  4013d2:	f043 024f 	orr.w	r2, r3, #79	; 0x4f
  4013d6:	9200      	str	r2, [sp, #0]
  4013d8:	9900      	ldr	r1, [sp, #0]
  4013da:	f041 0310 	orr.w	r3, r1, #16
  4013de:	9300      	str	r3, [sp, #0]
  4013e0:	9a00      	ldr	r2, [sp, #0]
  4013e2:	6302      	str	r2, [r0, #48]	; 0x30
  4013e4:	f04f 0000 	mov.w	r0, #0
  4013e8:	9001      	str	r0, [sp, #4]
  4013ea:	9901      	ldr	r1, [sp, #4]
  4013ec:	2913      	cmp	r1, #19
  4013ee:	d807      	bhi.n	401400 <udd_ctrl_send_zlp_in+0x4c>
  4013f0:	bf00      	nop
  4013f2:	9b01      	ldr	r3, [sp, #4]
  4013f4:	f103 0301 	add.w	r3, r3, #1
  4013f8:	9301      	str	r3, [sp, #4]
  4013fa:	9a01      	ldr	r2, [sp, #4]
  4013fc:	2a13      	cmp	r2, #19
  4013fe:	d9f7      	bls.n	4013f0 <udd_ctrl_send_zlp_in+0x3c>
}
  401400:	b002      	add	sp, #8
  401402:	4770      	bx	lr

00401404 <udd_ctrl_endofrequest>:
	// because the buffer of control endpoint is already free
}


static void udd_ctrl_endofrequest(void)
{
  401404:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  401406:	f641 432c 	movw	r3, #7212	; 0x1c2c
  40140a:	f2c2 0300 	movt	r3, #8192	; 0x2000
  40140e:	6918      	ldr	r0, [r3, #16]
  401410:	b100      	cbz	r0, 401414 <udd_ctrl_endofrequest+0x10>
		udd_g_ctrlreq.callback();
  401412:	4780      	blx	r0
  401414:	bd08      	pop	{r3, pc}
  401416:	bf00      	nop

00401418 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
  401418:	b5f0      	push	{r4, r5, r6, r7, lr}
  40141a:	b08b      	sub	sp, #44	; 0x2c
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_src;
	irqflags_t flags;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  40141c:	f641 335d 	movw	r3, #7005	; 0x1b5d
  401420:	f2c2 0300 	movt	r3, #8192	; 0x2000
  401424:	7818      	ldrb	r0, [r3, #0]
  401426:	2803      	cmp	r0, #3
  401428:	d128      	bne.n	40147c <udd_ctrl_in_sent+0x64>
		// Ack
		udd_ack_in_sent(0);
  40142a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  40142e:	f2c4 0103 	movt	r1, #16387	; 0x4003
  401432:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  401434:	9200      	str	r2, [sp, #0]
  401436:	9b00      	ldr	r3, [sp, #0]
  401438:	f043 004f 	orr.w	r0, r3, #79	; 0x4f
  40143c:	9000      	str	r0, [sp, #0]
  40143e:	9a00      	ldr	r2, [sp, #0]
  401440:	f022 0301 	bic.w	r3, r2, #1
  401444:	9300      	str	r3, [sp, #0]
  401446:	9800      	ldr	r0, [sp, #0]
  401448:	6308      	str	r0, [r1, #48]	; 0x30
  40144a:	f04f 0100 	mov.w	r1, #0
  40144e:	9101      	str	r1, [sp, #4]
  401450:	9a01      	ldr	r2, [sp, #4]
  401452:	2a13      	cmp	r2, #19
  401454:	d807      	bhi.n	401466 <udd_ctrl_in_sent+0x4e>
  401456:	bf00      	nop
  401458:	9b01      	ldr	r3, [sp, #4]
  40145a:	f103 0301 	add.w	r3, r3, #1
  40145e:	9301      	str	r3, [sp, #4]
  401460:	9801      	ldr	r0, [sp, #4]
  401462:	2813      	cmp	r0, #19
  401464:	d9f7      	bls.n	401456 <udd_ctrl_in_sent+0x3e>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
  401466:	f241 4105 	movw	r1, #5125	; 0x1405
  40146a:	f2c0 0140 	movt	r1, #64	; 0x40
  40146e:	4788      	blx	r1
		// Reinitializes control endpoint management
		udd_ctrl_init();
  401470:	f241 3245 	movw	r2, #4933	; 0x1345
  401474:	f2c0 0240 	movt	r2, #64	; 0x40
  401478:	4790      	blx	r2
		return;
  40147a:	e135      	b.n	4016e8 <udd_ctrl_in_sent+0x2d0>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  40147c:	f641 315a 	movw	r1, #7002	; 0x1b5a
  401480:	f2c2 0100 	movt	r1, #8192	; 0x2000
  401484:	880b      	ldrh	r3, [r1, #0]
  401486:	f641 422c 	movw	r2, #7212	; 0x1c2c
  40148a:	f2c2 0200 	movt	r2, #8192	; 0x2000
  40148e:	8994      	ldrh	r4, [r2, #12]
  401490:	1ae0      	subs	r0, r4, r3
  401492:	b284      	uxth	r4, r0
	if (0 == nb_remain) {
  401494:	2c00      	cmp	r4, #0
  401496:	d14f      	bne.n	401538 <udd_ctrl_in_sent+0x120>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  401498:	f641 3218 	movw	r2, #6936	; 0x1b18
  40149c:	f2c2 0200 	movt	r2, #8192	; 0x2000
  4014a0:	8811      	ldrh	r1, [r2, #0]
  4014a2:	185b      	adds	r3, r3, r1
  4014a4:	b298      	uxth	r0, r3
  4014a6:	8010      	strh	r0, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  4014a8:	f641 422c 	movw	r2, #7212	; 0x1c2c
  4014ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
  4014b0:	88d1      	ldrh	r1, [r2, #6]
  4014b2:	4281      	cmp	r1, r0
  4014b4:	d005      	beq.n	4014c2 <udd_ctrl_in_sent+0xaa>
				|| b_shortpacket) {
  4014b6:	f641 335c 	movw	r3, #7004	; 0x1b5c
  4014ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4014be:	7818      	ldrb	r0, [r3, #0]
  4014c0:	b330      	cbz	r0, 401510 <udd_ctrl_in_sent+0xf8>
}


static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  4014c2:	f641 335d 	movw	r3, #7005	; 0x1b5d
  4014c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4014ca:	f04f 0004 	mov.w	r0, #4
  4014ce:	7018      	strb	r0, [r3, #0]
				|| b_shortpacket) {
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			udd_ack_in_sent(0);
  4014d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  4014d4:	f2c4 0103 	movt	r1, #16387	; 0x4003
  4014d8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4014da:	9202      	str	r2, [sp, #8]
  4014dc:	9b02      	ldr	r3, [sp, #8]
  4014de:	f043 004f 	orr.w	r0, r3, #79	; 0x4f
  4014e2:	9002      	str	r0, [sp, #8]
  4014e4:	9a02      	ldr	r2, [sp, #8]
  4014e6:	f022 0301 	bic.w	r3, r2, #1
  4014ea:	9302      	str	r3, [sp, #8]
  4014ec:	9802      	ldr	r0, [sp, #8]
  4014ee:	6308      	str	r0, [r1, #48]	; 0x30
  4014f0:	f04f 0100 	mov.w	r1, #0
  4014f4:	9103      	str	r1, [sp, #12]
  4014f6:	9a03      	ldr	r2, [sp, #12]
  4014f8:	2a13      	cmp	r2, #19
  4014fa:	f200 80f5 	bhi.w	4016e8 <udd_ctrl_in_sent+0x2d0>
  4014fe:	bf00      	nop
  401500:	9b03      	ldr	r3, [sp, #12]
  401502:	f103 0301 	add.w	r3, r3, #1
  401506:	9303      	str	r3, [sp, #12]
  401508:	9803      	ldr	r0, [sp, #12]
  40150a:	2813      	cmp	r0, #19
  40150c:	d9f7      	bls.n	4014fe <udd_ctrl_in_sent+0xe6>
  40150e:	e0eb      	b.n	4016e8 <udd_ctrl_in_sent+0x2d0>
			return;
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
  401510:	f641 452c 	movw	r5, #7212	; 0x1c2c
  401514:	f2c2 0500 	movt	r5, #8192	; 0x2000
  401518:	696f      	ldr	r7, [r5, #20]
  40151a:	b1cf      	cbz	r7, 401550 <udd_ctrl_in_sent+0x138>
				|| (!udd_g_ctrlreq.over_under_run())) {
  40151c:	47b8      	blx	r7
  40151e:	b1b8      	cbz	r0, 401550 <udd_ctrl_in_sent+0x138>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
  401520:	f641 345a 	movw	r4, #7002	; 0x1b5a
  401524:	f2c2 0400 	movt	r4, #8192	; 0x2000
  401528:	f04f 0200 	mov.w	r2, #0
  40152c:	8022      	strh	r2, [r4, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  40152e:	f641 412c 	movw	r1, #7212	; 0x1c2c
  401532:	f2c2 0100 	movt	r1, #8192	; 0x2000
  401536:	898c      	ldrh	r4, [r1, #12]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  401538:	2c3f      	cmp	r4, #63	; 0x3f
  40153a:	d909      	bls.n	401550 <udd_ctrl_in_sent+0x138>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
  40153c:	f641 335c 	movw	r3, #7004	; 0x1b5c
  401540:	f2c2 0300 	movt	r3, #8192	; 0x2000
  401544:	f04f 0000 	mov.w	r0, #0
  401548:	7018      	strb	r0, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  40154a:	f04f 0440 	mov.w	r4, #64	; 0x40
  40154e:	e006      	b.n	40155e <udd_ctrl_in_sent+0x146>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
  401550:	f641 355c 	movw	r5, #7004	; 0x1b5c
  401554:	f2c2 0500 	movt	r5, #8192	; 0x2000
  401558:	f04f 0701 	mov.w	r7, #1
  40155c:	702f      	strb	r7, [r5, #0]
	}
	// Fill buffer of endpoint control
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  40155e:	f641 422c 	movw	r2, #7212	; 0x1c2c
  401562:	f2c2 0200 	movt	r2, #8192	; 0x2000
  401566:	6893      	ldr	r3, [r2, #8]
  401568:	f641 315a 	movw	r1, #7002	; 0x1b5a
  40156c:	f2c2 0100 	movt	r1, #8192	; 0x2000
  401570:	880f      	ldrh	r7, [r1, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401572:	f3ef 8010 	mrs	r0, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  401576:	f1d0 0501 	rsbs	r5, r0, #1
  40157a:	bf38      	it	cc
  40157c:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  40157e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401580:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401584:	f240 42ac 	movw	r2, #1196	; 0x4ac
  401588:	f2c2 0200 	movt	r2, #8192	; 0x2000
  40158c:	f04f 0100 	mov.w	r1, #0
  401590:	7011      	strb	r1, [r2, #0]
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_bank0_received(0)) {
  401592:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  401596:	f2c4 0003 	movt	r0, #16387	; 0x4003
  40159a:	6b02      	ldr	r2, [r0, #48]	; 0x30
  40159c:	f012 0f02 	tst.w	r2, #2
  4015a0:	d102      	bne.n	4015a8 <udd_ctrl_in_sent+0x190>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  4015a2:	2c00      	cmp	r4, #0
  4015a4:	d131      	bne.n	40160a <udd_ctrl_in_sent+0x1f2>
  4015a6:	e052      	b.n	40164e <udd_ctrl_in_sent+0x236>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4015a8:	b14d      	cbz	r5, 4015be <udd_ctrl_in_sent+0x1a6>
		cpu_irq_enable();
  4015aa:	f240 43ac 	movw	r3, #1196	; 0x4ac
  4015ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4015b2:	f04f 0001 	mov.w	r0, #1
  4015b6:	7018      	strb	r0, [r3, #0]
  4015b8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  4015bc:	b662      	cpsie	i
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_bank0_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  4015be:	f641 315d 	movw	r1, #7005	; 0x1b5d
  4015c2:	f2c2 0100 	movt	r1, #8192	; 0x2000
  4015c6:	f04f 0204 	mov.w	r2, #4
  4015ca:	700a      	strb	r2, [r1, #0]
		udd_ack_in_sent(0);
  4015cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  4015d0:	f2c4 0303 	movt	r3, #16387	; 0x4003
  4015d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
  4015d6:	9004      	str	r0, [sp, #16]
  4015d8:	9904      	ldr	r1, [sp, #16]
  4015da:	f041 024f 	orr.w	r2, r1, #79	; 0x4f
  4015de:	9204      	str	r2, [sp, #16]
  4015e0:	9804      	ldr	r0, [sp, #16]
  4015e2:	f020 0101 	bic.w	r1, r0, #1
  4015e6:	9104      	str	r1, [sp, #16]
  4015e8:	9a04      	ldr	r2, [sp, #16]
  4015ea:	631a      	str	r2, [r3, #48]	; 0x30
  4015ec:	f04f 0300 	mov.w	r3, #0
  4015f0:	9305      	str	r3, [sp, #20]
  4015f2:	9805      	ldr	r0, [sp, #20]
  4015f4:	2813      	cmp	r0, #19
  4015f6:	d877      	bhi.n	4016e8 <udd_ctrl_in_sent+0x2d0>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4015f8:	bf00      	nop
  4015fa:	9905      	ldr	r1, [sp, #20]
  4015fc:	f101 0101 	add.w	r1, r1, #1
  401600:	9105      	str	r1, [sp, #20]
  401602:	9a05      	ldr	r2, [sp, #20]
  401604:	2a13      	cmp	r2, #19
  401606:	d9f7      	bls.n	4015f8 <udd_ctrl_in_sent+0x1e0>
  401608:	e06e      	b.n	4016e8 <udd_ctrl_in_sent+0x2d0>
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		udd_endpoint_fifo_write(0, *ptr_src++);
  40160a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  40160e:	f2c4 0003 	movt	r0, #16387	; 0x4003
  401612:	f104 31ff 	add.w	r1, r4, #4294967295
  401616:	f001 0101 	and.w	r1, r1, #1
  40161a:	19db      	adds	r3, r3, r7
  40161c:	f813 2b01 	ldrb.w	r2, [r3], #1
  401620:	6502      	str	r2, [r0, #80]	; 0x50
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  401622:	f04f 0201 	mov.w	r2, #1
  401626:	4294      	cmp	r4, r2
  401628:	d860      	bhi.n	4016ec <udd_ctrl_in_sent+0x2d4>
  40162a:	e010      	b.n	40164e <udd_ctrl_in_sent+0x236>
		udd_endpoint_fifo_write(0, *ptr_src++);
  40162c:	4619      	mov	r1, r3
  40162e:	f811 6b01 	ldrb.w	r6, [r1], #1
  401632:	6506      	str	r6, [r0, #80]	; 0x50
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  401634:	f102 0201 	add.w	r2, r2, #1
  401638:	f002 02ff 	and.w	r2, r2, #255	; 0xff
		udd_endpoint_fifo_write(0, *ptr_src++);
  40163c:	785b      	ldrb	r3, [r3, #1]
  40163e:	6503      	str	r3, [r0, #80]	; 0x50
  401640:	f101 0301 	add.w	r3, r1, #1
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  401644:	f102 0201 	add.w	r2, r2, #1
  401648:	b2d2      	uxtb	r2, r2
  40164a:	4294      	cmp	r4, r2
  40164c:	d8ee      	bhi.n	40162c <udd_ctrl_in_sent+0x214>
		udd_endpoint_fifo_write(0, *ptr_src++);
	}
	udd_ctrl_payload_nb_trans += nb_remain;
  40164e:	19e4      	adds	r4, r4, r7
  401650:	f641 305a 	movw	r0, #7002	; 0x1b5a
  401654:	f2c2 0000 	movt	r0, #8192	; 0x2000
  401658:	8004      	strh	r4, [r0, #0]
	// Validate and send the data available in the control endpoint buffer
	udd_set_transmit_ready(0);
  40165a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  40165e:	f2c4 0103 	movt	r1, #16387	; 0x4003
  401662:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  401664:	9206      	str	r2, [sp, #24]
  401666:	9b06      	ldr	r3, [sp, #24]
  401668:	f043 004f 	orr.w	r0, r3, #79	; 0x4f
  40166c:	9006      	str	r0, [sp, #24]
  40166e:	9a06      	ldr	r2, [sp, #24]
  401670:	f042 0310 	orr.w	r3, r2, #16
  401674:	9306      	str	r3, [sp, #24]
  401676:	9806      	ldr	r0, [sp, #24]
  401678:	6308      	str	r0, [r1, #48]	; 0x30
  40167a:	f04f 0100 	mov.w	r1, #0
  40167e:	9107      	str	r1, [sp, #28]
  401680:	9a07      	ldr	r2, [sp, #28]
  401682:	2a13      	cmp	r2, #19
  401684:	d807      	bhi.n	401696 <udd_ctrl_in_sent+0x27e>
  401686:	bf00      	nop
  401688:	9b07      	ldr	r3, [sp, #28]
  40168a:	f103 0301 	add.w	r3, r3, #1
  40168e:	9307      	str	r3, [sp, #28]
  401690:	9807      	ldr	r0, [sp, #28]
  401692:	2813      	cmp	r0, #19
  401694:	d9f7      	bls.n	401686 <udd_ctrl_in_sent+0x26e>
	udd_ack_in_sent(0);
  401696:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  40169a:	f2c4 0103 	movt	r1, #16387	; 0x4003
  40169e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4016a0:	9208      	str	r2, [sp, #32]
  4016a2:	9b08      	ldr	r3, [sp, #32]
  4016a4:	f043 004f 	orr.w	r0, r3, #79	; 0x4f
  4016a8:	9008      	str	r0, [sp, #32]
  4016aa:	9a08      	ldr	r2, [sp, #32]
  4016ac:	f022 0301 	bic.w	r3, r2, #1
  4016b0:	9308      	str	r3, [sp, #32]
  4016b2:	9808      	ldr	r0, [sp, #32]
  4016b4:	6308      	str	r0, [r1, #48]	; 0x30
  4016b6:	f04f 0100 	mov.w	r1, #0
  4016ba:	9109      	str	r1, [sp, #36]	; 0x24
  4016bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4016be:	2a13      	cmp	r2, #19
  4016c0:	d807      	bhi.n	4016d2 <udd_ctrl_in_sent+0x2ba>
  4016c2:	bf00      	nop
  4016c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4016c6:	f103 0301 	add.w	r3, r3, #1
  4016ca:	9309      	str	r3, [sp, #36]	; 0x24
  4016cc:	9809      	ldr	r0, [sp, #36]	; 0x24
  4016ce:	2813      	cmp	r0, #19
  4016d0:	d9f7      	bls.n	4016c2 <udd_ctrl_in_sent+0x2aa>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4016d2:	b14d      	cbz	r5, 4016e8 <udd_ctrl_in_sent+0x2d0>
		cpu_irq_enable();
  4016d4:	f240 41ac 	movw	r1, #1196	; 0x4ac
  4016d8:	f2c2 0100 	movt	r1, #8192	; 0x2000
  4016dc:	f04f 0201 	mov.w	r2, #1
  4016e0:	700a      	strb	r2, [r1, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4016e2:	f3bf 8f5f 	dmb	sy
  4016e6:	b662      	cpsie	i

	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
}
  4016e8:	b00b      	add	sp, #44	; 0x2c
  4016ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4016ec:	b249      	sxtb	r1, r1
  4016ee:	2900      	cmp	r1, #0
  4016f0:	d09c      	beq.n	40162c <udd_ctrl_in_sent+0x214>
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		udd_endpoint_fifo_write(0, *ptr_src++);
  4016f2:	f813 1b01 	ldrb.w	r1, [r3], #1
  4016f6:	6501      	str	r1, [r0, #80]	; 0x50
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  4016f8:	f102 0201 	add.w	r2, r2, #1
  4016fc:	b2d2      	uxtb	r2, r2
  4016fe:	4294      	cmp	r4, r2
  401700:	d894      	bhi.n	40162c <udd_ctrl_in_sent+0x214>
  401702:	e7a4      	b.n	40164e <udd_ctrl_in_sent+0x236>

00401704 <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
		uint8_t ep_num)
{
  401704:	b538      	push	{r3, r4, r5, lr}
  401706:	4603      	mov	r3, r0
	if (ptr_job->busy == false) {
  401708:	7c44      	ldrb	r4, [r0, #17]
  40170a:	f004 0010 	and.w	r0, r4, #16
  40170e:	b2c4      	uxtb	r4, r0
  401710:	b1c4      	cbz	r4, 401744 <udd_ep_finish_job+0x40>
		return; // No on-going job
	}
	ptr_job->busy = false;
  401712:	7c5c      	ldrb	r4, [r3, #17]
  401714:	f36f 1404 	bfc	r4, #4, #1
  401718:	745c      	strb	r4, [r3, #17]
	if (NULL == ptr_job->call_trans) {
  40171a:	681c      	ldr	r4, [r3, #0]
  40171c:	b194      	cbz	r4, 401744 <udd_ep_finish_job+0x40>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_type_in(ep_num)) {
  40171e:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  401722:	f2c4 0503 	movt	r5, #16387	; 0x4003
  401726:	f102 000c 	add.w	r0, r2, #12
  40172a:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
  40172e:	f410 6f80 	tst.w	r0, #1024	; 0x400
		ep_num |= USB_EP_DIR_IN;
  401732:	bf18      	it	ne
  401734:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}	
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  401738:	2901      	cmp	r1, #1
  40173a:	bf14      	ite	ne
  40173c:	2000      	movne	r0, #0
  40173e:	2001      	moveq	r0, #1
  401740:	6899      	ldr	r1, [r3, #8]
  401742:	47a0      	blx	r4
  401744:	bd38      	pop	{r3, r4, r5, pc}
  401746:	bf00      	nop

00401748 <udd_ep_abort_job>:
	}
}


static void udd_ep_abort_job(udd_ep_id_t ep)
{
  401748:	b508      	push	{r3, lr}
	ep &= USB_EP_ADDR_MASK;
  40174a:	f000 020f 	and.w	r2, r0, #15

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  40174e:	f102 30ff 	add.w	r0, r2, #4294967295
  401752:	eb00 0180 	add.w	r1, r0, r0, lsl #2
  401756:	f641 331c 	movw	r3, #6940	; 0x1b1c
  40175a:	f2c2 0300 	movt	r3, #8192	; 0x2000
  40175e:	eb03 0081 	add.w	r0, r3, r1, lsl #2
  401762:	f04f 0101 	mov.w	r1, #1
  401766:	f241 7305 	movw	r3, #5893	; 0x1705
  40176a:	f2c0 0340 	movt	r3, #64	; 0x40
  40176e:	4798      	blx	r3
  401770:	bd08      	pop	{r3, pc}
  401772:	bf00      	nop

00401774 <udd_ep_ack_out_received>:
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
  401774:	b410      	push	{r4}
  401776:	b085      	sub	sp, #20
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  401778:	f100 32ff 	add.w	r2, r0, #4294967295
  40177c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  401780:	f641 331c 	movw	r3, #6940	; 0x1b1c
  401784:	f2c2 0300 	movt	r3, #8192	; 0x2000
  401788:	eb03 0281 	add.w	r2, r3, r1, lsl #2
	if (Is_udd_all_banks_received(ep)) {
  40178c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  401790:	f2c4 0303 	movt	r3, #16387	; 0x4003
  401794:	f100 010c 	add.w	r1, r0, #12
  401798:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  40179c:	f003 0342 	and.w	r3, r3, #66	; 0x42
  4017a0:	2b42      	cmp	r3, #66	; 0x42
  4017a2:	d00f      	beq.n	4017c4 <udd_ep_ack_out_received+0x50>
		// The only way is to use ptr_job->bank
	} else if (Is_udd_bank0_received(ep)) {
  4017a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  4017a8:	f2c4 0303 	movt	r3, #16387	; 0x4003
  4017ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  4017b0:	f013 0f02 	tst.w	r3, #2
		// Must be bank0
		ptr_job->bank = 0;
  4017b4:	7c53      	ldrb	r3, [r2, #17]
  4017b6:	bf12      	itee	ne
  4017b8:	f36f 0383 	bfcne	r3, #2, #2
	} else {
		// Must be bank1
		ptr_job->bank = 1;
  4017bc:	2101      	moveq	r1, #1
  4017be:	f361 0383 	bfieq	r3, r1, #2, #2
  4017c2:	7453      	strb	r3, [r2, #17]
	}
	if (ptr_job->bank == 0) {
  4017c4:	7c51      	ldrb	r1, [r2, #17]
  4017c6:	f011 0f0c 	tst.w	r1, #12
  4017ca:	d12b      	bne.n	401824 <udd_ep_ack_out_received+0xb0>
		udd_ack_bank0_received(ep);
  4017cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  4017d0:	f2c4 0303 	movt	r3, #16387	; 0x4003
  4017d4:	f100 010c 	add.w	r1, r0, #12
  4017d8:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
  4017dc:	9400      	str	r4, [sp, #0]
  4017de:	9c00      	ldr	r4, [sp, #0]
  4017e0:	f044 044f 	orr.w	r4, r4, #79	; 0x4f
  4017e4:	9400      	str	r4, [sp, #0]
  4017e6:	9c00      	ldr	r4, [sp, #0]
  4017e8:	f024 0402 	bic.w	r4, r4, #2
  4017ec:	9400      	str	r4, [sp, #0]
  4017ee:	9c00      	ldr	r4, [sp, #0]
  4017f0:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
  4017f4:	f04f 0300 	mov.w	r3, #0
  4017f8:	9301      	str	r3, [sp, #4]
  4017fa:	9901      	ldr	r1, [sp, #4]
  4017fc:	2913      	cmp	r1, #19
  4017fe:	d807      	bhi.n	401810 <udd_ep_ack_out_received+0x9c>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401800:	bf00      	nop
  401802:	9b01      	ldr	r3, [sp, #4]
  401804:	f103 0301 	add.w	r3, r3, #1
  401808:	9301      	str	r3, [sp, #4]
  40180a:	9901      	ldr	r1, [sp, #4]
  40180c:	2913      	cmp	r1, #19
  40180e:	d9f7      	bls.n	401800 <udd_ep_ack_out_received+0x8c>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  401810:	b370      	cbz	r0, 401870 <udd_ep_ack_out_received+0xfc>
  401812:	2803      	cmp	r0, #3
  401814:	d02c      	beq.n	401870 <udd_ep_ack_out_received+0xfc>
			ptr_job->bank = 1;
  401816:	7c50      	ldrb	r0, [r2, #17]
  401818:	f04f 0301 	mov.w	r3, #1
  40181c:	f363 0083 	bfi	r0, r3, #2, #2
  401820:	7450      	strb	r0, [r2, #17]
  401822:	e025      	b.n	401870 <udd_ep_ack_out_received+0xfc>
		}
	} else {
		udd_ack_bank1_received(ep);
  401824:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  401828:	f2c4 0303 	movt	r3, #16387	; 0x4003
  40182c:	f100 000c 	add.w	r0, r0, #12
  401830:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  401834:	9102      	str	r1, [sp, #8]
  401836:	9902      	ldr	r1, [sp, #8]
  401838:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  40183c:	9102      	str	r1, [sp, #8]
  40183e:	9902      	ldr	r1, [sp, #8]
  401840:	f021 0140 	bic.w	r1, r1, #64	; 0x40
  401844:	9102      	str	r1, [sp, #8]
  401846:	9902      	ldr	r1, [sp, #8]
  401848:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
  40184c:	f04f 0000 	mov.w	r0, #0
  401850:	9003      	str	r0, [sp, #12]
  401852:	9b03      	ldr	r3, [sp, #12]
  401854:	2b13      	cmp	r3, #19
  401856:	d807      	bhi.n	401868 <udd_ep_ack_out_received+0xf4>
  401858:	bf00      	nop
  40185a:	9903      	ldr	r1, [sp, #12]
  40185c:	f101 0101 	add.w	r1, r1, #1
  401860:	9103      	str	r1, [sp, #12]
  401862:	9803      	ldr	r0, [sp, #12]
  401864:	2813      	cmp	r0, #19
  401866:	d9f7      	bls.n	401858 <udd_ep_ack_out_received+0xe4>
		ptr_job->bank = 0;
  401868:	7c53      	ldrb	r3, [r2, #17]
  40186a:	f36f 0383 	bfc	r3, #2, #2
  40186e:	7453      	strb	r3, [r2, #17]
	}
}
  401870:	b005      	add	sp, #20
  401872:	bc10      	pop	{r4}
  401874:	4770      	bx	lr
  401876:	bf00      	nop

00401878 <udd_ep_in_sent>:
	return is_short_pkt;
}


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  401878:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40187c:	b082      	sub	sp, #8
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  40187e:	4605      	mov	r5, r0
  401880:	f100 36ff 	add.w	r6, r0, #4294967295
  401884:	eb06 0286 	add.w	r2, r6, r6, lsl #2
  401888:	f641 331c 	movw	r3, #6940	; 0x1b1c
  40188c:	f2c2 0300 	movt	r3, #8192	; 0x2000
  401890:	eb03 0682 	add.w	r6, r3, r2, lsl #2

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  401894:	7c72      	ldrb	r2, [r6, #17]
  401896:	f3c2 0381 	ubfx	r3, r2, #2, #2
  40189a:	b120      	cbz	r0, 4018a6 <udd_ep_in_sent+0x2e>
  40189c:	2803      	cmp	r0, #3
  40189e:	bf14      	ite	ne
  4018a0:	2202      	movne	r2, #2
  4018a2:	2201      	moveq	r2, #1
  4018a4:	e001      	b.n	4018aa <udd_ep_in_sent+0x32>
  4018a6:	f04f 0201 	mov.w	r2, #1
  4018aa:	429a      	cmp	r2, r3
  4018ac:	f340 8115 	ble.w	401ada <udd_ep_in_sent+0x262>
		return true; // Data pending
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  4018b0:	68f2      	ldr	r2, [r6, #12]
  4018b2:	68b4      	ldr	r4, [r6, #8]
  4018b4:	42a2      	cmp	r2, r4
  4018b6:	d306      	bcc.n	4018c6 <udd_ep_in_sent+0x4e>
  4018b8:	7c73      	ldrb	r3, [r6, #17]
  4018ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4018be:	b2db      	uxtb	r3, r3
  4018c0:	2b00      	cmp	r3, #0
  4018c2:	f000 810d 	beq.w	401ae0 <udd_ep_in_sent+0x268>


static bool udd_ep_write_fifo(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  4018c6:	6873      	ldr	r3, [r6, #4]
  4018c8:	eb03 0802 	add.w	r8, r3, r2
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  4018cc:	ebc2 0904 	rsb	r9, r2, r4
	uint32_t pkt_size = ptr_job->size;
  4018d0:	8a33      	ldrh	r3, [r6, #16]
  4018d2:	ea4f 5383 	mov.w	r3, r3, lsl #22
  4018d6:	ea4f 5393 	mov.w	r3, r3, lsr #22
	bool is_short_pkt = false;

	// Packet size
	if (nb_remain < pkt_size) {
  4018da:	4599      	cmp	r9, r3
static bool udd_ep_write_fifo(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
	uint32_t pkt_size = ptr_job->size;
  4018dc:	bf26      	itte	cs
  4018de:	4699      	movcs	r9, r3
	bool is_short_pkt = false;
  4018e0:	f04f 0c00 	movcs.w	ip, #0

	// Packet size
	if (nb_remain < pkt_size) {
		pkt_size = nb_remain;
		is_short_pkt = true;
  4018e4:	f04f 0c01 	movcc.w	ip, #1
	}

	// Modify job information
	ptr_job->buf_cnt += pkt_size;
  4018e8:	444a      	add	r2, r9
  4018ea:	60f2      	str	r2, [r6, #12]

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  4018ec:	f1b9 0f07 	cmp.w	r9, #7
  4018f0:	f240 8089 	bls.w	401a06 <udd_ep_in_sent+0x18e>
  4018f4:	464f      	mov	r7, r9


static bool udd_ep_write_fifo(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  4018f6:	4642      	mov	r2, r8
	// Modify job information
	ptr_job->buf_cnt += pkt_size;

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4018f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  4018fc:	f2c4 0303 	movt	r3, #16387	; 0x4003
  401900:	f1a9 0a08 	sub.w	sl, r9, #8
  401904:	f3ca 0ac0 	ubfx	sl, sl, #3, #1
  401908:	f898 b000 	ldrb.w	fp, [r8]
  40190c:	f105 0414 	add.w	r4, r5, #20
  401910:	f843 b024 	str.w	fp, [r3, r4, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401914:	f898 b001 	ldrb.w	fp, [r8, #1]
  401918:	f843 b024 	str.w	fp, [r3, r4, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40191c:	f898 b002 	ldrb.w	fp, [r8, #2]
  401920:	f843 b024 	str.w	fp, [r3, r4, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401924:	f898 b003 	ldrb.w	fp, [r8, #3]
  401928:	f843 b024 	str.w	fp, [r3, r4, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40192c:	f898 b004 	ldrb.w	fp, [r8, #4]
  401930:	f843 b024 	str.w	fp, [r3, r4, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401934:	f898 b005 	ldrb.w	fp, [r8, #5]
  401938:	f843 b024 	str.w	fp, [r3, r4, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40193c:	f898 b006 	ldrb.w	fp, [r8, #6]
  401940:	f843 b024 	str.w	fp, [r3, r4, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401944:	f898 b007 	ldrb.w	fp, [r8, #7]
  401948:	f843 b024 	str.w	fp, [r3, r4, lsl #2]
	ptr_job->bank++;
	return is_short_pkt;
}


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
  40194c:	f102 0208 	add.w	r2, r2, #8

	// Modify job information
	ptr_job->buf_cnt += pkt_size;

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  401950:	f1a7 0708 	sub.w	r7, r7, #8
  401954:	2f07      	cmp	r7, #7
  401956:	f200 80db 	bhi.w	401b10 <udd_ep_in_sent+0x298>
  40195a:	e04b      	b.n	4019f4 <udd_ep_in_sent+0x17c>
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40195c:	f892 a000 	ldrb.w	sl, [r2]
  401960:	f105 0414 	add.w	r4, r5, #20
  401964:	f843 a024 	str.w	sl, [r3, r4, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401968:	f892 a001 	ldrb.w	sl, [r2, #1]
  40196c:	f843 a024 	str.w	sl, [r3, r4, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401970:	f892 a002 	ldrb.w	sl, [r2, #2]
  401974:	f843 a024 	str.w	sl, [r3, r4, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401978:	f892 a003 	ldrb.w	sl, [r2, #3]
  40197c:	f843 a024 	str.w	sl, [r3, r4, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401980:	f892 a004 	ldrb.w	sl, [r2, #4]
  401984:	f843 a024 	str.w	sl, [r3, r4, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401988:	f892 a005 	ldrb.w	sl, [r2, #5]
  40198c:	f843 a024 	str.w	sl, [r3, r4, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401990:	f892 a006 	ldrb.w	sl, [r2, #6]
  401994:	f843 a024 	str.w	sl, [r3, r4, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401998:	f892 a007 	ldrb.w	sl, [r2, #7]
  40199c:	f843 a024 	str.w	sl, [r3, r4, lsl #2]
	ptr_job->bank++;
	return is_short_pkt;
}


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
  4019a0:	f102 0408 	add.w	r4, r2, #8
	// Modify job information
	ptr_job->buf_cnt += pkt_size;

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4019a4:	f892 a008 	ldrb.w	sl, [r2, #8]
  4019a8:	f105 0214 	add.w	r2, r5, #20
  4019ac:	f843 a022 	str.w	sl, [r3, r2, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4019b0:	f894 a001 	ldrb.w	sl, [r4, #1]
  4019b4:	f843 a022 	str.w	sl, [r3, r2, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4019b8:	f894 a002 	ldrb.w	sl, [r4, #2]
  4019bc:	f843 a022 	str.w	sl, [r3, r2, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4019c0:	f894 a003 	ldrb.w	sl, [r4, #3]
  4019c4:	f843 a022 	str.w	sl, [r3, r2, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4019c8:	f894 a004 	ldrb.w	sl, [r4, #4]
  4019cc:	f843 a022 	str.w	sl, [r3, r2, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4019d0:	f894 a005 	ldrb.w	sl, [r4, #5]
  4019d4:	f843 a022 	str.w	sl, [r3, r2, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4019d8:	f894 a006 	ldrb.w	sl, [r4, #6]
  4019dc:	f843 a022 	str.w	sl, [r3, r2, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4019e0:	f894 a007 	ldrb.w	sl, [r4, #7]
  4019e4:	f843 a022 	str.w	sl, [r3, r2, lsl #2]
	ptr_job->bank++;
	return is_short_pkt;
}


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
  4019e8:	f104 0208 	add.w	r2, r4, #8

	// Modify job information
	ptr_job->buf_cnt += pkt_size;

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  4019ec:	f1a7 0710 	sub.w	r7, r7, #16
  4019f0:	2f07      	cmp	r7, #7
  4019f2:	d8b3      	bhi.n	40195c <udd_ep_in_sent+0xe4>
	ptr_job->bank++;
	return is_short_pkt;
}


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
  4019f4:	f1a9 0308 	sub.w	r3, r9, #8
  4019f8:	f023 0207 	bic.w	r2, r3, #7
  4019fc:	f102 0208 	add.w	r2, r2, #8
  401a00:	4490      	add	r8, r2
  401a02:	f009 0907 	and.w	r9, r9, #7
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  401a06:	f1b9 0f00 	cmp.w	r9, #0
  401a0a:	d024      	beq.n	401a56 <udd_ep_in_sent+0x1de>
	ptr_job->bank++;
	return is_short_pkt;
}


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
  401a0c:	44c1      	add	r9, r8
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401a0e:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  401a12:	f2c4 0403 	movt	r4, #16387	; 0x4003
  401a16:	ea6f 0708 	mvn.w	r7, r8
  401a1a:	eb09 0307 	add.w	r3, r9, r7
  401a1e:	f003 0a01 	and.w	sl, r3, #1
  401a22:	4643      	mov	r3, r8
  401a24:	f813 7b01 	ldrb.w	r7, [r3], #1
  401a28:	f105 0214 	add.w	r2, r5, #20
  401a2c:	f844 7022 	str.w	r7, [r4, r2, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  401a30:	454b      	cmp	r3, r9
  401a32:	d161      	bne.n	401af8 <udd_ep_in_sent+0x280>
  401a34:	e00f      	b.n	401a56 <udd_ep_in_sent+0x1de>
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401a36:	461a      	mov	r2, r3
  401a38:	f812 8b01 	ldrb.w	r8, [r2], #1
  401a3c:	f105 0714 	add.w	r7, r5, #20
  401a40:	f844 8027 	str.w	r8, [r4, r7, lsl #2]
  401a44:	785f      	ldrb	r7, [r3, #1]
  401a46:	f105 0314 	add.w	r3, r5, #20
  401a4a:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
  401a4e:	f102 0301 	add.w	r3, r2, #1
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  401a52:	454b      	cmp	r3, r9
  401a54:	d1ef      	bne.n	401a36 <udd_ep_in_sent+0x1be>
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}

	// Add to buffered banks
	ptr_job->bank++;
  401a56:	7c73      	ldrb	r3, [r6, #17]
  401a58:	f3c3 0281 	ubfx	r2, r3, #2, #2
  401a5c:	f102 0201 	add.w	r2, r2, #1
  401a60:	f362 0383 	bfi	r3, r2, #2, #2
  401a64:	7473      	strb	r3, [r6, #17]

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);

	// Data is ready to send
	if (b_tx) {
  401a66:	b309      	cbz	r1, 401aac <udd_ep_in_sent+0x234>
		udd_set_transmit_ready(ep);
  401a68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  401a6c:	f2c4 0103 	movt	r1, #16387	; 0x4003
  401a70:	f100 000c 	add.w	r0, r0, #12
  401a74:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
  401a78:	9300      	str	r3, [sp, #0]
  401a7a:	9a00      	ldr	r2, [sp, #0]
  401a7c:	f042 034f 	orr.w	r3, r2, #79	; 0x4f
  401a80:	9300      	str	r3, [sp, #0]
  401a82:	9a00      	ldr	r2, [sp, #0]
  401a84:	f042 0310 	orr.w	r3, r2, #16
  401a88:	9300      	str	r3, [sp, #0]
  401a8a:	9a00      	ldr	r2, [sp, #0]
  401a8c:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
  401a90:	f04f 0000 	mov.w	r0, #0
  401a94:	9001      	str	r0, [sp, #4]
  401a96:	9901      	ldr	r1, [sp, #4]
  401a98:	2913      	cmp	r1, #19
  401a9a:	d807      	bhi.n	401aac <udd_ep_in_sent+0x234>
  401a9c:	bf00      	nop
  401a9e:	9b01      	ldr	r3, [sp, #4]
  401aa0:	f103 0301 	add.w	r3, r3, #1
  401aa4:	9301      	str	r3, [sp, #4]
  401aa6:	9a01      	ldr	r2, [sp, #4]
  401aa8:	2a13      	cmp	r2, #19
  401aaa:	d9f7      	bls.n	401a9c <udd_ep_in_sent+0x224>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  401aac:	f1bc 0f00 	cmp.w	ip, #0
  401ab0:	d003      	beq.n	401aba <udd_ep_in_sent+0x242>
		ptr_job->b_shortpacket = false;
  401ab2:	7c70      	ldrb	r0, [r6, #17]
  401ab4:	f36f 1086 	bfc	r0, #6, #1
  401ab8:	7470      	strb	r0, [r6, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  401aba:	68f1      	ldr	r1, [r6, #12]
  401abc:	68b3      	ldr	r3, [r6, #8]
  401abe:	4299      	cmp	r1, r3
  401ac0:	d311      	bcc.n	401ae6 <udd_ep_in_sent+0x26e>
			&& (!ptr_job->b_shortpacket)) {
  401ac2:	7c72      	ldrb	r2, [r6, #17]
  401ac4:	f002 0040 	and.w	r0, r2, #64	; 0x40
  401ac8:	b2c1      	uxtb	r1, r0
  401aca:	b979      	cbnz	r1, 401aec <udd_ep_in_sent+0x274>
		ptr_job->b_buf_end = true;
  401acc:	7c73      	ldrb	r3, [r6, #17]
  401ace:	f043 0280 	orr.w	r2, r3, #128	; 0x80
  401ad2:	7472      	strb	r2, [r6, #17]
		return false;
  401ad4:	f04f 0000 	mov.w	r0, #0
  401ad8:	e00a      	b.n	401af0 <udd_ep_in_sent+0x278>
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
		return true; // Data pending
  401ada:	f04f 0001 	mov.w	r0, #1
  401ade:	e007      	b.n	401af0 <udd_ep_in_sent+0x278>
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
		return false;
  401ae0:	f04f 0000 	mov.w	r0, #0
  401ae4:	e004      	b.n	401af0 <udd_ep_in_sent+0x278>
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
			&& (!ptr_job->b_shortpacket)) {
		ptr_job->b_buf_end = true;
		return false;
	}
	return true; // Pending
  401ae6:	f04f 0001 	mov.w	r0, #1
  401aea:	e001      	b.n	401af0 <udd_ep_in_sent+0x278>
  401aec:	f04f 0001 	mov.w	r0, #1
}
  401af0:	b002      	add	sp, #8
  401af2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  401af6:	4770      	bx	lr
  401af8:	f1ba 0f00 	cmp.w	sl, #0
  401afc:	d09b      	beq.n	401a36 <udd_ep_in_sent+0x1be>
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401afe:	f813 7b01 	ldrb.w	r7, [r3], #1
  401b02:	f105 0214 	add.w	r2, r5, #20
  401b06:	f844 7022 	str.w	r7, [r4, r2, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  401b0a:	454b      	cmp	r3, r9
  401b0c:	d193      	bne.n	401a36 <udd_ep_in_sent+0x1be>
  401b0e:	e7a2      	b.n	401a56 <udd_ep_in_sent+0x1de>
  401b10:	f1ba 0f00 	cmp.w	sl, #0
  401b14:	f43f af22 	beq.w	40195c <udd_ep_in_sent+0xe4>
	// Modify job information
	ptr_job->buf_cnt += pkt_size;

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401b18:	f892 a000 	ldrb.w	sl, [r2]
  401b1c:	f105 0414 	add.w	r4, r5, #20
  401b20:	f843 a024 	str.w	sl, [r3, r4, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401b24:	f892 a001 	ldrb.w	sl, [r2, #1]
  401b28:	f843 a024 	str.w	sl, [r3, r4, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401b2c:	f892 a002 	ldrb.w	sl, [r2, #2]
  401b30:	f843 a024 	str.w	sl, [r3, r4, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401b34:	f892 a003 	ldrb.w	sl, [r2, #3]
  401b38:	f843 a024 	str.w	sl, [r3, r4, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401b3c:	f892 a004 	ldrb.w	sl, [r2, #4]
  401b40:	f843 a024 	str.w	sl, [r3, r4, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401b44:	f892 a005 	ldrb.w	sl, [r2, #5]
  401b48:	f843 a024 	str.w	sl, [r3, r4, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401b4c:	f892 a006 	ldrb.w	sl, [r2, #6]
  401b50:	f843 a024 	str.w	sl, [r3, r4, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401b54:	f892 a007 	ldrb.w	sl, [r2, #7]
  401b58:	f843 a024 	str.w	sl, [r3, r4, lsl #2]
	ptr_job->bank++;
	return is_short_pkt;
}


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
  401b5c:	f102 0208 	add.w	r2, r2, #8

	// Modify job information
	ptr_job->buf_cnt += pkt_size;

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  401b60:	f1a7 0708 	sub.w	r7, r7, #8
  401b64:	2f07      	cmp	r7, #7
  401b66:	f63f aef9 	bhi.w	40195c <udd_ep_in_sent+0xe4>
  401b6a:	e743      	b.n	4019f4 <udd_ep_in_sent+0x17c>

00401b6c <UDP_Handler>:
 * - control endpoint events (setup reception, end of data transfer, underflow, overflow, stall)
 * - bulk/interrupt/isochronous endpoints events (end of data transfer)
 *
 */
ISR(UDD_USB_INT_FUN)
{
  401b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401b70:	b0b0      	sub	sp, #192	; 0xc0
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  401b72:	f244 4379 	movw	r3, #17529	; 0x4479
  401b76:	f2c0 0340 	movt	r3, #64	; 0x40
  401b7a:	4798      	blx	r3
  401b7c:	b998      	cbnz	r0, 401ba6 <UDP_Handler+0x3a>
  401b7e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  401b82:	f2c4 0003 	movt	r0, #16387	; 0x4003
  401b86:	69c1      	ldr	r1, [r0, #28]
  401b88:	f411 7f80 	tst.w	r1, #256	; 0x100
  401b8c:	d10b      	bne.n	401ba6 <UDP_Handler+0x3a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  401b8e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401b90:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  401b94:	f240 41ac 	movw	r1, #1196	; 0x4ac
  401b98:	f2c2 0100 	movt	r1, #8192	; 0x2000
  401b9c:	f04f 0200 	mov.w	r2, #0
  401ba0:	700a      	strb	r2, [r1, #0]
		return;
  401ba2:	f000 bf41 	b.w	402a28 <UDP_Handler+0xebc>
	}

	/* The UDP peripheral clock in the Power Management Controller (PMC)
	   must be enabled before any read/write operations to the UDP registers
	   including the UDP_TXVC register. */
	udd_enable_periph_ck();
  401ba6:	f04f 0022 	mov.w	r0, #34	; 0x22
  401baa:	f244 3271 	movw	r2, #17265	; 0x4371
  401bae:	f2c0 0240 	movt	r2, #64	; 0x40
  401bb2:	4790      	blx	r2

	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  401bb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  401bb8:	f2c4 0303 	movt	r3, #16387	; 0x4003
  401bbc:	6998      	ldr	r0, [r3, #24]
  401bbe:	f410 6f00 	tst.w	r0, #2048	; 0x800
  401bc2:	d015      	beq.n	401bf0 <UDP_Handler+0x84>
  401bc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  401bc8:	f2c4 0103 	movt	r1, #16387	; 0x4003
  401bcc:	69cb      	ldr	r3, [r1, #28]
  401bce:	f413 6f00 	tst.w	r3, #2048	; 0x800
  401bd2:	d00d      	beq.n	401bf0 <UDP_Handler+0x84>
		udd_ack_sof();
  401bd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  401bd8:	f2c4 0103 	movt	r1, #16387	; 0x4003
  401bdc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401be0:	620b      	str	r3, [r1, #32]
		udc_sof_notify();
  401be2:	f640 40a1 	movw	r0, #3233	; 0xca1
  401be6:	f2c0 0040 	movt	r0, #64	; 0x40
  401bea:	4780      	blx	r0
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_sof_end;
  401bec:	f000 bf1c 	b.w	402a28 <UDP_Handler+0xebc>
}


static bool udd_ctrl_interrupt(void)
{
	if (!Is_udd_endpoint_interrupt(0))
  401bf0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  401bf4:	f2c4 0003 	movt	r0, #16387	; 0x4003
  401bf8:	69c1      	ldr	r1, [r0, #28]
  401bfa:	f011 0f01 	tst.w	r1, #1
  401bfe:	f000 82a7 	beq.w	402150 <UDP_Handler+0x5e4>
		return false; // No interrupt events on control endpoint

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
  401c02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  401c06:	f2c4 0303 	movt	r3, #16387	; 0x4003
  401c0a:	6b18      	ldr	r0, [r3, #48]	; 0x30
  401c0c:	f010 0f04 	tst.w	r0, #4
  401c10:	f000 811f 	beq.w	401e52 <UDP_Handler+0x2e6>

static void udd_ctrl_setup_received(void)
{
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  401c14:	f641 305d 	movw	r0, #7005	; 0x1b5d
  401c18:	f2c2 0000 	movt	r0, #8192	; 0x2000
  401c1c:	7802      	ldrb	r2, [r0, #0]
  401c1e:	b14a      	cbz	r2, 401c34 <UDP_Handler+0xc8>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
  401c20:	f241 4305 	movw	r3, #5125	; 0x1405
  401c24:	f2c0 0340 	movt	r3, #64	; 0x40
  401c28:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
  401c2a:	f241 3145 	movw	r1, #4933	; 0x1345
  401c2e:	f2c0 0140 	movt	r1, #64	; 0x40
  401c32:	4788      	blx	r1
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
  401c34:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  401c38:	f2c4 0003 	movt	r0, #16387	; 0x4003
  401c3c:	6b02      	ldr	r2, [r0, #48]	; 0x30
  401c3e:	f3c2 430a 	ubfx	r3, r2, #16, #11
  401c42:	2b08      	cmp	r3, #8
  401c44:	d024      	beq.n	401c90 <UDP_Handler+0x124>
		udd_ack_setup_received(0);
  401c46:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  401c4a:	f2c4 0003 	movt	r0, #16387	; 0x4003
  401c4e:	6b02      	ldr	r2, [r0, #48]	; 0x30
  401c50:	9202      	str	r2, [sp, #8]
  401c52:	9b02      	ldr	r3, [sp, #8]
  401c54:	f043 014f 	orr.w	r1, r3, #79	; 0x4f
  401c58:	9102      	str	r1, [sp, #8]
  401c5a:	9a02      	ldr	r2, [sp, #8]
  401c5c:	f022 0304 	bic.w	r3, r2, #4
  401c60:	9302      	str	r3, [sp, #8]
  401c62:	9902      	ldr	r1, [sp, #8]
  401c64:	6301      	str	r1, [r0, #48]	; 0x30
  401c66:	f04f 0000 	mov.w	r0, #0
  401c6a:	9003      	str	r0, [sp, #12]
  401c6c:	9a03      	ldr	r2, [sp, #12]
  401c6e:	2a13      	cmp	r2, #19
  401c70:	d807      	bhi.n	401c82 <UDP_Handler+0x116>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401c72:	bf00      	nop
  401c74:	9b03      	ldr	r3, [sp, #12]
  401c76:	f103 0301 	add.w	r3, r3, #1
  401c7a:	9303      	str	r3, [sp, #12]
  401c7c:	9903      	ldr	r1, [sp, #12]
  401c7e:	2913      	cmp	r1, #19
  401c80:	d9f7      	bls.n	401c72 <UDP_Handler+0x106>
		udd_ctrl_stall_data();
  401c82:	f241 3065 	movw	r0, #4965	; 0x1365
  401c86:	f2c0 0040 	movt	r0, #64	; 0x40
  401c8a:	4780      	blx	r0
  401c8c:	f000 becc 	b.w	402a28 <UDP_Handler+0xebc>
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
			udd_endpoint_fifo_read(0);
  401c90:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  401c94:	f2c4 0003 	movt	r0, #16387	; 0x4003
  401c98:	6d01      	ldr	r1, [r0, #80]	; 0x50
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  401c9a:	f641 422c 	movw	r2, #7212	; 0x1c2c
  401c9e:	f2c2 0200 	movt	r2, #8192	; 0x2000
  401ca2:	7011      	strb	r1, [r2, #0]
			udd_endpoint_fifo_read(0);
  401ca4:	6d03      	ldr	r3, [r0, #80]	; 0x50
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  401ca6:	7053      	strb	r3, [r2, #1]
			udd_endpoint_fifo_read(0);
  401ca8:	6d01      	ldr	r1, [r0, #80]	; 0x50
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  401caa:	7091      	strb	r1, [r2, #2]
			udd_endpoint_fifo_read(0);
  401cac:	6d03      	ldr	r3, [r0, #80]	; 0x50
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  401cae:	70d3      	strb	r3, [r2, #3]
			udd_endpoint_fifo_read(0);
  401cb0:	6d01      	ldr	r1, [r0, #80]	; 0x50
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  401cb2:	7111      	strb	r1, [r2, #4]
			udd_endpoint_fifo_read(0);
  401cb4:	6d03      	ldr	r3, [r0, #80]	; 0x50
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  401cb6:	7153      	strb	r3, [r2, #5]
			udd_endpoint_fifo_read(0);
  401cb8:	6d01      	ldr	r1, [r0, #80]	; 0x50
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  401cba:	7191      	strb	r1, [r2, #6]
			udd_endpoint_fifo_read(0);
  401cbc:	6d00      	ldr	r0, [r0, #80]	; 0x50
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  401cbe:	71d0      	strb	r0, [r2, #7]
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
  401cc0:	f640 42e9 	movw	r2, #3305	; 0xce9
  401cc4:	f2c0 0240 	movt	r2, #64	; 0x40
  401cc8:	4790      	blx	r2
  401cca:	bb20      	cbnz	r0, 401d16 <UDP_Handler+0x1aa>
		// Setup request unknown then stall it
		udd_ack_setup_received(0);
  401ccc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  401cd0:	f2c4 0103 	movt	r1, #16387	; 0x4003
  401cd4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  401cd6:	9204      	str	r2, [sp, #16]
  401cd8:	9804      	ldr	r0, [sp, #16]
  401cda:	f040 034f 	orr.w	r3, r0, #79	; 0x4f
  401cde:	9304      	str	r3, [sp, #16]
  401ce0:	9a04      	ldr	r2, [sp, #16]
  401ce2:	f022 0004 	bic.w	r0, r2, #4
  401ce6:	9004      	str	r0, [sp, #16]
  401ce8:	9b04      	ldr	r3, [sp, #16]
  401cea:	630b      	str	r3, [r1, #48]	; 0x30
  401cec:	f04f 0100 	mov.w	r1, #0
  401cf0:	9105      	str	r1, [sp, #20]
  401cf2:	9a05      	ldr	r2, [sp, #20]
  401cf4:	2a13      	cmp	r2, #19
  401cf6:	d807      	bhi.n	401d08 <UDP_Handler+0x19c>
  401cf8:	bf00      	nop
  401cfa:	9805      	ldr	r0, [sp, #20]
  401cfc:	f100 0001 	add.w	r0, r0, #1
  401d00:	9005      	str	r0, [sp, #20]
  401d02:	9b05      	ldr	r3, [sp, #20]
  401d04:	2b13      	cmp	r3, #19
  401d06:	d9f7      	bls.n	401cf8 <UDP_Handler+0x18c>
		udd_ctrl_stall_data();
  401d08:	f241 3165 	movw	r1, #4965	; 0x1365
  401d0c:	f2c0 0140 	movt	r1, #64	; 0x40
  401d10:	4788      	blx	r1
  401d12:	f000 be89 	b.w	402a28 <UDP_Handler+0xebc>
		return;
	}

	if (Udd_setup_is_in()) {
  401d16:	f641 432c 	movw	r3, #7212	; 0x1c2c
  401d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
  401d1e:	f993 1000 	ldrsb.w	r1, [r3]
  401d22:	2900      	cmp	r1, #0
  401d24:	da55      	bge.n	401dd2 <UDP_Handler+0x266>
		// Set DIR
		udd_set_endpoint_direction_in(0);
  401d26:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  401d2a:	f2c4 0003 	movt	r0, #16387	; 0x4003
  401d2e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401d30:	9306      	str	r3, [sp, #24]
  401d32:	9a06      	ldr	r2, [sp, #24]
  401d34:	f042 014f 	orr.w	r1, r2, #79	; 0x4f
  401d38:	9106      	str	r1, [sp, #24]
  401d3a:	9b06      	ldr	r3, [sp, #24]
  401d3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
  401d40:	9206      	str	r2, [sp, #24]
  401d42:	9906      	ldr	r1, [sp, #24]
  401d44:	6301      	str	r1, [r0, #48]	; 0x30
  401d46:	f04f 0000 	mov.w	r0, #0
  401d4a:	9007      	str	r0, [sp, #28]
  401d4c:	9b07      	ldr	r3, [sp, #28]
  401d4e:	2b13      	cmp	r3, #19
  401d50:	d807      	bhi.n	401d62 <UDP_Handler+0x1f6>
  401d52:	bf00      	nop
  401d54:	9a07      	ldr	r2, [sp, #28]
  401d56:	f102 0201 	add.w	r2, r2, #1
  401d5a:	9207      	str	r2, [sp, #28]
  401d5c:	9907      	ldr	r1, [sp, #28]
  401d5e:	2913      	cmp	r1, #19
  401d60:	d9f7      	bls.n	401d52 <UDP_Handler+0x1e6>
		udd_ack_setup_received(0);
  401d62:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  401d66:	f2c4 0003 	movt	r0, #16387	; 0x4003
  401d6a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401d6c:	9308      	str	r3, [sp, #32]
  401d6e:	9a08      	ldr	r2, [sp, #32]
  401d70:	f042 014f 	orr.w	r1, r2, #79	; 0x4f
  401d74:	9108      	str	r1, [sp, #32]
  401d76:	9b08      	ldr	r3, [sp, #32]
  401d78:	f023 0204 	bic.w	r2, r3, #4
  401d7c:	9208      	str	r2, [sp, #32]
  401d7e:	9908      	ldr	r1, [sp, #32]
  401d80:	6301      	str	r1, [r0, #48]	; 0x30
  401d82:	f04f 0000 	mov.w	r0, #0
  401d86:	9009      	str	r0, [sp, #36]	; 0x24
  401d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401d8a:	2b13      	cmp	r3, #19
  401d8c:	d807      	bhi.n	401d9e <UDP_Handler+0x232>
  401d8e:	bf00      	nop
  401d90:	9a09      	ldr	r2, [sp, #36]	; 0x24
  401d92:	f102 0201 	add.w	r2, r2, #1
  401d96:	9209      	str	r2, [sp, #36]	; 0x24
  401d98:	9909      	ldr	r1, [sp, #36]	; 0x24
  401d9a:	2913      	cmp	r1, #19
  401d9c:	d9f7      	bls.n	401d8e <UDP_Handler+0x222>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  401d9e:	f04f 0000 	mov.w	r0, #0
  401da2:	f641 3318 	movw	r3, #6936	; 0x1b18
  401da6:	f2c2 0300 	movt	r3, #8192	; 0x2000
  401daa:	8018      	strh	r0, [r3, #0]
		udd_ctrl_payload_nb_trans = 0;
  401dac:	f641 325a 	movw	r2, #7002	; 0x1b5a
  401db0:	f2c2 0200 	movt	r2, #8192	; 0x2000
  401db4:	8010      	strh	r0, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  401db6:	f641 315d 	movw	r1, #7005	; 0x1b5d
  401dba:	f2c2 0100 	movt	r1, #8192	; 0x2000
  401dbe:	f04f 0002 	mov.w	r0, #2
  401dc2:	7008      	strb	r0, [r1, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  401dc4:	f241 4319 	movw	r3, #5145	; 0x1419
  401dc8:	f2c0 0340 	movt	r3, #64	; 0x40
  401dcc:	4798      	blx	r3
  401dce:	f000 be2b 	b.w	402a28 <UDP_Handler+0xebc>
	} else {
		udd_ack_setup_received(0);
  401dd2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  401dd6:	f2c4 0003 	movt	r0, #16387	; 0x4003
  401dda:	6b02      	ldr	r2, [r0, #48]	; 0x30
  401ddc:	920a      	str	r2, [sp, #40]	; 0x28
  401dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401de0:	f043 014f 	orr.w	r1, r3, #79	; 0x4f
  401de4:	910a      	str	r1, [sp, #40]	; 0x28
  401de6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  401de8:	f022 0304 	bic.w	r3, r2, #4
  401dec:	930a      	str	r3, [sp, #40]	; 0x28
  401dee:	990a      	ldr	r1, [sp, #40]	; 0x28
  401df0:	6301      	str	r1, [r0, #48]	; 0x30
  401df2:	f04f 0000 	mov.w	r0, #0
  401df6:	900b      	str	r0, [sp, #44]	; 0x2c
  401df8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  401dfa:	2a13      	cmp	r2, #19
  401dfc:	d807      	bhi.n	401e0e <UDP_Handler+0x2a2>
  401dfe:	bf00      	nop
  401e00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401e02:	f103 0301 	add.w	r3, r3, #1
  401e06:	930b      	str	r3, [sp, #44]	; 0x2c
  401e08:	990b      	ldr	r1, [sp, #44]	; 0x2c
  401e0a:	2913      	cmp	r1, #19
  401e0c:	d9f7      	bls.n	401dfe <UDP_Handler+0x292>
		if (0 == udd_g_ctrlreq.req.wLength) {
  401e0e:	f641 402c 	movw	r0, #7212	; 0x1c2c
  401e12:	f2c2 0000 	movt	r0, #8192	; 0x2000
  401e16:	88c2      	ldrh	r2, [r0, #6]
  401e18:	b932      	cbnz	r2, 401e28 <UDP_Handler+0x2bc>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
  401e1a:	f241 31b5 	movw	r1, #5045	; 0x13b5
  401e1e:	f2c0 0140 	movt	r1, #64	; 0x40
  401e22:	4788      	blx	r1
  401e24:	f000 be00 	b.w	402a28 <UDP_Handler+0xebc>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  401e28:	f04f 0300 	mov.w	r3, #0
  401e2c:	f641 3118 	movw	r1, #6936	; 0x1b18
  401e30:	f2c2 0100 	movt	r1, #8192	; 0x2000
  401e34:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
  401e36:	f641 305a 	movw	r0, #7002	; 0x1b5a
  401e3a:	f2c2 0000 	movt	r0, #8192	; 0x2000
  401e3e:	8003      	strh	r3, [r0, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  401e40:	f641 335d 	movw	r3, #7005	; 0x1b5d
  401e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
  401e48:	f04f 0201 	mov.w	r2, #1
  401e4c:	701a      	strb	r2, [r3, #0]
  401e4e:	f000 bdeb 	b.w	402a28 <UDP_Handler+0xebc>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_sent(0)) {
  401e52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  401e56:	f2c4 0103 	movt	r1, #16387	; 0x4003
  401e5a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401e5c:	f013 0f01 	tst.w	r3, #1
  401e60:	d006      	beq.n	401e70 <UDP_Handler+0x304>
		// IN packet sent
		udd_ctrl_in_sent();
  401e62:	f241 4119 	movw	r1, #5145	; 0x1419
  401e66:	f2c0 0140 	movt	r1, #64	; 0x40
  401e6a:	4788      	blx	r1
  401e6c:	f000 bddc 	b.w	402a28 <UDP_Handler+0xebc>
		return true;
	}
	if (Is_udd_bank0_received(0)) {
  401e70:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  401e74:	f2c4 0003 	movt	r0, #16387	; 0x4003
  401e78:	6b01      	ldr	r1, [r0, #48]	; 0x30
  401e7a:	f011 0f02 	tst.w	r1, #2
  401e7e:	f000 815f 	beq.w	402140 <UDP_Handler+0x5d4>
static void udd_ctrl_out_received(void)
{
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  401e82:	f641 315d 	movw	r1, #7005	; 0x1b5d
  401e86:	f2c2 0100 	movt	r1, #8192	; 0x2000
  401e8a:	780a      	ldrb	r2, [r1, #0]
  401e8c:	2a01      	cmp	r2, #1
  401e8e:	d033      	beq.n	401ef8 <UDP_Handler+0x38c>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  401e90:	2a02      	cmp	r2, #2
  401e92:	d001      	beq.n	401e98 <UDP_Handler+0x32c>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  401e94:	2a04      	cmp	r2, #4
  401e96:	d105      	bne.n	401ea4 <UDP_Handler+0x338>
				udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
  401e98:	f241 4205 	movw	r2, #5125	; 0x1405
  401e9c:	f2c0 0240 	movt	r2, #64	; 0x40
  401ea0:	4790      	blx	r2
  401ea2:	e004      	b.n	401eae <UDP_Handler+0x342>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
  401ea4:	f241 3065 	movw	r0, #4965	; 0x1365
  401ea8:	f2c0 0040 	movt	r0, #64	; 0x40
  401eac:	4780      	blx	r0
		}
		udd_ack_bank0_received(0);
  401eae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  401eb2:	f2c4 0303 	movt	r3, #16387	; 0x4003
  401eb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401eb8:	910c      	str	r1, [sp, #48]	; 0x30
  401eba:	980c      	ldr	r0, [sp, #48]	; 0x30
  401ebc:	f040 024f 	orr.w	r2, r0, #79	; 0x4f
  401ec0:	920c      	str	r2, [sp, #48]	; 0x30
  401ec2:	990c      	ldr	r1, [sp, #48]	; 0x30
  401ec4:	f021 0002 	bic.w	r0, r1, #2
  401ec8:	900c      	str	r0, [sp, #48]	; 0x30
  401eca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  401ecc:	631a      	str	r2, [r3, #48]	; 0x30
  401ece:	f04f 0300 	mov.w	r3, #0
  401ed2:	930d      	str	r3, [sp, #52]	; 0x34
  401ed4:	990d      	ldr	r1, [sp, #52]	; 0x34
  401ed6:	2913      	cmp	r1, #19
  401ed8:	d807      	bhi.n	401eea <UDP_Handler+0x37e>
  401eda:	bf00      	nop
  401edc:	980d      	ldr	r0, [sp, #52]	; 0x34
  401ede:	f100 0001 	add.w	r0, r0, #1
  401ee2:	900d      	str	r0, [sp, #52]	; 0x34
  401ee4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  401ee6:	2a13      	cmp	r2, #19
  401ee8:	d9f7      	bls.n	401eda <UDP_Handler+0x36e>
		// Reinitializes control endpoint management
		udd_ctrl_init();
  401eea:	f241 3345 	movw	r3, #4933	; 0x1345
  401eee:	f2c0 0340 	movt	r3, #64	; 0x40
  401ef2:	4798      	blx	r3
  401ef4:	f000 bd98 	b.w	402a28 <UDP_Handler+0xebc>
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
  401ef8:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  401efc:	f2c4 0403 	movt	r4, #16387	; 0x4003
  401f00:	6b26      	ldr	r6, [r4, #48]	; 0x30
  401f02:	f3c6 440a 	ubfx	r4, r6, #16, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  401f06:	f641 432c 	movw	r3, #7212	; 0x1c2c
  401f0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
  401f0e:	8998      	ldrh	r0, [r3, #12]
  401f10:	f641 315a 	movw	r1, #7002	; 0x1b5a
  401f14:	f2c2 0100 	movt	r1, #8192	; 0x2000
  401f18:	880e      	ldrh	r6, [r1, #0]
  401f1a:	1932      	adds	r2, r6, r4
  401f1c:	4290      	cmp	r0, r2
		// Reinitializes control endpoint management
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
  401f1e:	bfae      	itee	ge
  401f20:	b2a4      	uxthge	r4, r4
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
  401f22:	ebc6 0000 	rsblt	r0, r6, r0
  401f26:	b284      	uxthlt	r4, r0
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  401f28:	f641 432c 	movw	r3, #7212	; 0x1c2c
  401f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
  401f30:	6898      	ldr	r0, [r3, #8]
  401f32:	1982      	adds	r2, r0, r6
	for (i = 0; i < nb_data; i++) {
  401f34:	b3a4      	cbz	r4, 401fa0 <UDP_Handler+0x434>
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  401f36:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  401f3a:	f2c4 0003 	movt	r0, #16387	; 0x4003
  401f3e:	f104 35ff 	add.w	r5, r4, #4294967295
  401f42:	f005 0501 	and.w	r5, r5, #1
  401f46:	6d01      	ldr	r1, [r0, #80]	; 0x50
  401f48:	f802 1b01 	strb.w	r1, [r2], #1
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
  401f4c:	f04f 0101 	mov.w	r1, #1
  401f50:	42a1      	cmp	r1, r4
  401f52:	f0c0 857c 	bcc.w	402a4e <UDP_Handler+0xee2>
  401f56:	e00d      	b.n	401f74 <UDP_Handler+0x408>
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  401f58:	6d05      	ldr	r5, [r0, #80]	; 0x50
  401f5a:	4613      	mov	r3, r2
  401f5c:	f803 5b01 	strb.w	r5, [r3], #1
  401f60:	6d05      	ldr	r5, [r0, #80]	; 0x50
  401f62:	7055      	strb	r5, [r2, #1]
  401f64:	f103 0201 	add.w	r2, r3, #1
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
  401f68:	f101 0102 	add.w	r1, r1, #2
  401f6c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  401f70:	42a1      	cmp	r1, r4
  401f72:	d3f1      	bcc.n	401f58 <UDP_Handler+0x3ec>
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;
  401f74:	19a6      	adds	r6, r4, r6
  401f76:	b2b6      	uxth	r6, r6
  401f78:	f641 325a 	movw	r2, #7002	; 0x1b5a
  401f7c:	f2c2 0200 	movt	r2, #8192	; 0x2000
  401f80:	8016      	strh	r6, [r2, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  401f82:	2c40      	cmp	r4, #64	; 0x40
  401f84:	d10c      	bne.n	401fa0 <UDP_Handler+0x434>
			|| (udd_g_ctrlreq.req.wLength <=
  401f86:	f641 402c 	movw	r0, #7212	; 0x1c2c
  401f8a:	f2c2 0000 	movt	r0, #8192	; 0x2000
  401f8e:	88c1      	ldrh	r1, [r0, #6]
			(udd_ctrl_prev_payload_nb_trans +
  401f90:	f641 3318 	movw	r3, #6936	; 0x1b18
  401f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
  401f98:	881a      	ldrh	r2, [r3, #0]
  401f9a:	1990      	adds	r0, r2, r6
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
			|| (udd_g_ctrlreq.req.wLength <=
  401f9c:	4281      	cmp	r1, r0
  401f9e:	dc53      	bgt.n	402048 <UDP_Handler+0x4dc>
			(udd_ctrl_prev_payload_nb_trans +
			udd_ctrl_payload_nb_trans))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  401fa0:	f641 402c 	movw	r0, #7212	; 0x1c2c
  401fa4:	f2c2 0000 	movt	r0, #8192	; 0x2000
  401fa8:	8186      	strh	r6, [r0, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  401faa:	6942      	ldr	r2, [r0, #20]
  401fac:	b33a      	cbz	r2, 401ffe <UDP_Handler+0x492>
			if (!udd_g_ctrlreq.over_under_run()) {
  401fae:	4790      	blx	r2
  401fb0:	bb28      	cbnz	r0, 401ffe <UDP_Handler+0x492>
				// Stall ZLP
				udd_ctrl_stall_data();
  401fb2:	f241 3165 	movw	r1, #4965	; 0x1365
  401fb6:	f2c0 0140 	movt	r1, #64	; 0x40
  401fba:	4788      	blx	r1
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_bank0_received(0);
  401fbc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  401fc0:	f2c4 0003 	movt	r0, #16387	; 0x4003
  401fc4:	6b02      	ldr	r2, [r0, #48]	; 0x30
  401fc6:	920e      	str	r2, [sp, #56]	; 0x38
  401fc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401fca:	f043 014f 	orr.w	r1, r3, #79	; 0x4f
  401fce:	910e      	str	r1, [sp, #56]	; 0x38
  401fd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  401fd2:	f022 0302 	bic.w	r3, r2, #2
  401fd6:	930e      	str	r3, [sp, #56]	; 0x38
  401fd8:	990e      	ldr	r1, [sp, #56]	; 0x38
  401fda:	6301      	str	r1, [r0, #48]	; 0x30
  401fdc:	f04f 0000 	mov.w	r0, #0
  401fe0:	900f      	str	r0, [sp, #60]	; 0x3c
  401fe2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401fe4:	2a13      	cmp	r2, #19
  401fe6:	f200 851f 	bhi.w	402a28 <UDP_Handler+0xebc>
  401fea:	bf00      	nop
  401fec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401fee:	f103 0301 	add.w	r3, r3, #1
  401ff2:	930f      	str	r3, [sp, #60]	; 0x3c
  401ff4:	990f      	ldr	r1, [sp, #60]	; 0x3c
  401ff6:	2913      	cmp	r1, #19
  401ff8:	d9f7      	bls.n	401fea <UDP_Handler+0x47e>
  401ffa:	f000 bd15 	b.w	402a28 <UDP_Handler+0xebc>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_bank0_received(0);
  401ffe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  402002:	f2c4 0303 	movt	r3, #16387	; 0x4003
  402006:	6b19      	ldr	r1, [r3, #48]	; 0x30
  402008:	9110      	str	r1, [sp, #64]	; 0x40
  40200a:	9810      	ldr	r0, [sp, #64]	; 0x40
  40200c:	f040 024f 	orr.w	r2, r0, #79	; 0x4f
  402010:	9210      	str	r2, [sp, #64]	; 0x40
  402012:	9910      	ldr	r1, [sp, #64]	; 0x40
  402014:	f021 0002 	bic.w	r0, r1, #2
  402018:	9010      	str	r0, [sp, #64]	; 0x40
  40201a:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40201c:	631a      	str	r2, [r3, #48]	; 0x30
  40201e:	f04f 0300 	mov.w	r3, #0
  402022:	9311      	str	r3, [sp, #68]	; 0x44
  402024:	9911      	ldr	r1, [sp, #68]	; 0x44
  402026:	2913      	cmp	r1, #19
  402028:	d807      	bhi.n	40203a <UDP_Handler+0x4ce>
  40202a:	bf00      	nop
  40202c:	9811      	ldr	r0, [sp, #68]	; 0x44
  40202e:	f100 0001 	add.w	r0, r0, #1
  402032:	9011      	str	r0, [sp, #68]	; 0x44
  402034:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402036:	2a13      	cmp	r2, #19
  402038:	d9f7      	bls.n	40202a <UDP_Handler+0x4be>
		udd_ctrl_send_zlp_in();
  40203a:	f241 33b5 	movw	r3, #5045	; 0x13b5
  40203e:	f2c0 0340 	movt	r3, #64	; 0x40
  402042:	4798      	blx	r3
  402044:	f000 bcf0 	b.w	402a28 <UDP_Handler+0xebc>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  402048:	f641 412c 	movw	r1, #7212	; 0x1c2c
  40204c:	f2c2 0100 	movt	r1, #8192	; 0x2000
  402050:	898b      	ldrh	r3, [r1, #12]
  402052:	42b3      	cmp	r3, r6
  402054:	d153      	bne.n	4020fe <UDP_Handler+0x592>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
  402056:	4ac0      	ldr	r2, [pc, #768]	; (402358 <UDP_Handler+0x7ec>)
  402058:	6950      	ldr	r0, [r2, #20]
  40205a:	bb10      	cbnz	r0, 4020a2 <UDP_Handler+0x536>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
  40205c:	49bf      	ldr	r1, [pc, #764]	; (40235c <UDP_Handler+0x7f0>)
  40205e:	4788      	blx	r1
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  402060:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  402064:	f2c4 0003 	movt	r0, #16387	; 0x4003
  402068:	6b02      	ldr	r2, [r0, #48]	; 0x30
  40206a:	9212      	str	r2, [sp, #72]	; 0x48
  40206c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40206e:	f043 014f 	orr.w	r1, r3, #79	; 0x4f
  402072:	9112      	str	r1, [sp, #72]	; 0x48
  402074:	9a12      	ldr	r2, [sp, #72]	; 0x48
  402076:	f022 0302 	bic.w	r3, r2, #2
  40207a:	9312      	str	r3, [sp, #72]	; 0x48
  40207c:	9912      	ldr	r1, [sp, #72]	; 0x48
  40207e:	6301      	str	r1, [r0, #48]	; 0x30
  402080:	f04f 0000 	mov.w	r0, #0
  402084:	9013      	str	r0, [sp, #76]	; 0x4c
  402086:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  402088:	2a13      	cmp	r2, #19
  40208a:	f200 84cd 	bhi.w	402a28 <UDP_Handler+0xebc>
  40208e:	bf00      	nop
  402090:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402092:	f103 0301 	add.w	r3, r3, #1
  402096:	9313      	str	r3, [sp, #76]	; 0x4c
  402098:	9913      	ldr	r1, [sp, #76]	; 0x4c
  40209a:	2913      	cmp	r1, #19
  40209c:	d9f7      	bls.n	40208e <UDP_Handler+0x522>
  40209e:	f000 bcc3 	b.w	402a28 <UDP_Handler+0xebc>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
  4020a2:	4780      	blx	r0
  4020a4:	bb10      	cbnz	r0, 4020ec <UDP_Handler+0x580>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
  4020a6:	4bad      	ldr	r3, [pc, #692]	; (40235c <UDP_Handler+0x7f0>)
  4020a8:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  4020aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  4020ae:	f2c4 0103 	movt	r1, #16387	; 0x4003
  4020b2:	6b08      	ldr	r0, [r1, #48]	; 0x30
  4020b4:	9014      	str	r0, [sp, #80]	; 0x50
  4020b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4020b8:	f042 034f 	orr.w	r3, r2, #79	; 0x4f
  4020bc:	9314      	str	r3, [sp, #80]	; 0x50
  4020be:	9814      	ldr	r0, [sp, #80]	; 0x50
  4020c0:	f020 0202 	bic.w	r2, r0, #2
  4020c4:	9214      	str	r2, [sp, #80]	; 0x50
  4020c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4020c8:	630b      	str	r3, [r1, #48]	; 0x30
  4020ca:	f04f 0100 	mov.w	r1, #0
  4020ce:	9115      	str	r1, [sp, #84]	; 0x54
  4020d0:	9815      	ldr	r0, [sp, #84]	; 0x54
  4020d2:	2813      	cmp	r0, #19
  4020d4:	f200 84a8 	bhi.w	402a28 <UDP_Handler+0xebc>
  4020d8:	bf00      	nop
  4020da:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4020dc:	f102 0201 	add.w	r2, r2, #1
  4020e0:	9215      	str	r2, [sp, #84]	; 0x54
  4020e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4020e4:	2b13      	cmp	r3, #19
  4020e6:	d9f7      	bls.n	4020d8 <UDP_Handler+0x56c>
  4020e8:	f000 bc9e 	b.w	402a28 <UDP_Handler+0xebc>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  4020ec:	4a9c      	ldr	r2, [pc, #624]	; (402360 <UDP_Handler+0x7f4>)
  4020ee:	4b9d      	ldr	r3, [pc, #628]	; (402364 <UDP_Handler+0x7f8>)
  4020f0:	8818      	ldrh	r0, [r3, #0]
  4020f2:	8811      	ldrh	r1, [r2, #0]
  4020f4:	1840      	adds	r0, r0, r1
  4020f6:	8010      	strh	r0, [r2, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
  4020f8:	f04f 0200 	mov.w	r2, #0
  4020fc:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_bank0_received(0);
  4020fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  402102:	f2c4 0303 	movt	r3, #16387	; 0x4003
  402106:	6b19      	ldr	r1, [r3, #48]	; 0x30
  402108:	9116      	str	r1, [sp, #88]	; 0x58
  40210a:	9816      	ldr	r0, [sp, #88]	; 0x58
  40210c:	f040 024f 	orr.w	r2, r0, #79	; 0x4f
  402110:	9216      	str	r2, [sp, #88]	; 0x58
  402112:	9916      	ldr	r1, [sp, #88]	; 0x58
  402114:	f021 0002 	bic.w	r0, r1, #2
  402118:	9016      	str	r0, [sp, #88]	; 0x58
  40211a:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40211c:	631a      	str	r2, [r3, #48]	; 0x30
  40211e:	f04f 0300 	mov.w	r3, #0
  402122:	9317      	str	r3, [sp, #92]	; 0x5c
  402124:	9917      	ldr	r1, [sp, #92]	; 0x5c
  402126:	2913      	cmp	r1, #19
  402128:	f200 847e 	bhi.w	402a28 <UDP_Handler+0xebc>
  40212c:	bf00      	nop
  40212e:	9817      	ldr	r0, [sp, #92]	; 0x5c
  402130:	f100 0001 	add.w	r0, r0, #1
  402134:	9017      	str	r0, [sp, #92]	; 0x5c
  402136:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  402138:	2a13      	cmp	r2, #19
  40213a:	d9f7      	bls.n	40212c <UDP_Handler+0x5c0>
  40213c:	f000 bc74 	b.w	402a28 <UDP_Handler+0xebc>
	if (Is_udd_bank0_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_stall(0)) {
  402140:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  402144:	f2c4 0303 	movt	r3, #16387	; 0x4003
  402148:	6b18      	ldr	r0, [r3, #48]	; 0x30
  40214a:	f010 0f08 	tst.w	r0, #8
  40214e:	d14d      	bne.n	4021ec <UDP_Handler+0x680>
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  402150:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  402154:	f2c4 0303 	movt	r3, #16387	; 0x4003
  402158:	6999      	ldr	r1, [r3, #24]
  40215a:	f011 0f02 	tst.w	r1, #2
  40215e:	d019      	beq.n	402194 <UDP_Handler+0x628>

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// RXOUT: Full packet received
		if (Is_udd_any_bank_received(ep)) {
  402160:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  402164:	f2c4 0003 	movt	r0, #16387	; 0x4003
  402168:	6b43      	ldr	r3, [r0, #52]	; 0x34
  40216a:	f013 0f42 	tst.w	r3, #66	; 0x42
  40216e:	d16d      	bne.n	40224c <UDP_Handler+0x6e0>
			udd_ep_out_received(ep);
			return true;
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {
  402170:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  402174:	f2c4 0103 	movt	r1, #16387	; 0x4003
  402178:	6b48      	ldr	r0, [r1, #52]	; 0x34
  40217a:	f010 0f01 	tst.w	r0, #1
  40217e:	f040 80f3 	bne.w	402368 <UDP_Handler+0x7fc>
				udd_ack_in_sent(ep);
			}
			return true;
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  402182:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  402186:	f2c4 0303 	movt	r3, #16387	; 0x4003
  40218a:	6b59      	ldr	r1, [r3, #52]	; 0x34
  40218c:	f011 0f08 	tst.w	r1, #8
  402190:	f040 82be 	bne.w	402710 <UDP_Handler+0xba4>
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  402194:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  402198:	f2c4 0003 	movt	r0, #16387	; 0x4003
  40219c:	6983      	ldr	r3, [r0, #24]
  40219e:	f013 0f04 	tst.w	r3, #4
  4021a2:	d019      	beq.n	4021d8 <UDP_Handler+0x66c>

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// RXOUT: Full packet received
		if (Is_udd_any_bank_received(ep)) {
  4021a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  4021a8:	f2c4 0103 	movt	r1, #16387	; 0x4003
  4021ac:	6b88      	ldr	r0, [r1, #56]	; 0x38
  4021ae:	f010 0f42 	tst.w	r0, #66	; 0x42
  4021b2:	d153      	bne.n	40225c <UDP_Handler+0x6f0>
			udd_ep_out_received(ep);
			return true;
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {
  4021b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  4021b8:	f2c4 0303 	movt	r3, #16387	; 0x4003
  4021bc:	6b99      	ldr	r1, [r3, #56]	; 0x38
  4021be:	f011 0f01 	tst.w	r1, #1
  4021c2:	f040 80d9 	bne.w	402378 <UDP_Handler+0x80c>
				udd_ack_in_sent(ep);
			}
			return true;
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  4021c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4021ca:	f2c4 0003 	movt	r0, #16387	; 0x4003
  4021ce:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4021d0:	f013 0f08 	tst.w	r3, #8
  4021d4:	f040 829f 	bne.w	402716 <UDP_Handler+0xbaa>
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  4021d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  4021dc:	f2c4 0103 	movt	r1, #16387	; 0x4003
  4021e0:	6988      	ldr	r0, [r1, #24]
  4021e2:	f010 0f08 	tst.w	r0, #8
  4021e6:	f000 82cf 	beq.w	402788 <UDP_Handler+0xc1c>
  4021ea:	e01f      	b.n	40222c <UDP_Handler+0x6c0>
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_stall(0)) {
		// STALLed
		udd_ack_stall(0);
  4021ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  4021f0:	f2c4 0103 	movt	r1, #16387	; 0x4003
  4021f4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4021f6:	9200      	str	r2, [sp, #0]
  4021f8:	9b00      	ldr	r3, [sp, #0]
  4021fa:	f043 004f 	orr.w	r0, r3, #79	; 0x4f
  4021fe:	9000      	str	r0, [sp, #0]
  402200:	9a00      	ldr	r2, [sp, #0]
  402202:	f022 0308 	bic.w	r3, r2, #8
  402206:	9300      	str	r3, [sp, #0]
  402208:	9800      	ldr	r0, [sp, #0]
  40220a:	6308      	str	r0, [r1, #48]	; 0x30
  40220c:	f04f 0100 	mov.w	r1, #0
  402210:	9101      	str	r1, [sp, #4]
  402212:	9a01      	ldr	r2, [sp, #4]
  402214:	2a13      	cmp	r2, #19
  402216:	f200 8407 	bhi.w	402a28 <UDP_Handler+0xebc>
  40221a:	bf00      	nop
  40221c:	9b01      	ldr	r3, [sp, #4]
  40221e:	f103 0301 	add.w	r3, r3, #1
  402222:	9301      	str	r3, [sp, #4]
  402224:	9801      	ldr	r0, [sp, #4]
  402226:	2813      	cmp	r0, #19
  402228:	d9f7      	bls.n	40221a <UDP_Handler+0x6ae>
  40222a:	e3fd      	b.n	402a28 <UDP_Handler+0xebc>

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// RXOUT: Full packet received
		if (Is_udd_any_bank_received(ep)) {
  40222c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  402230:	f2c4 0303 	movt	r3, #16387	; 0x4003
  402234:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  402236:	f011 0f42 	tst.w	r1, #66	; 0x42
  40223a:	d07c      	beq.n	402336 <UDP_Handler+0x7ca>
  40223c:	f04f 0803 	mov.w	r8, #3
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
			continue;
		}

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
  402240:	f04f 0702 	mov.w	r7, #2
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  402244:	f04f 0908 	mov.w	r9, #8
  402248:	4644      	mov	r4, r8
  40224a:	e00e      	b.n	40226a <UDP_Handler+0x6fe>

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// RXOUT: Full packet received
		if (Is_udd_any_bank_received(ep)) {
  40224c:	f04f 0801 	mov.w	r8, #1
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
			continue;
		}

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
  402250:	f04f 0700 	mov.w	r7, #0
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  402254:	f04f 0902 	mov.w	r9, #2
  402258:	4644      	mov	r4, r8
  40225a:	e006      	b.n	40226a <UDP_Handler+0x6fe>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  40225c:	f04f 0802 	mov.w	r8, #2
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
			continue;
		}

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
  402260:	f04f 0701 	mov.w	r7, #1
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  402264:	f04f 0904 	mov.w	r9, #4
  402268:	4644      	mov	r4, r8
}


static void udd_ep_out_received(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  40226a:	eb07 0587 	add.w	r5, r7, r7, lsl #2
  40226e:	f641 361c 	movw	r6, #6940	; 0x1b1c
  402272:	f2c2 0600 	movt	r6, #8192	; 0x2000
  402276:	eb06 0585 	add.w	r5, r6, r5, lsl #2
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  40227a:	f8d5 e008 	ldr.w	lr, [r5, #8]
  40227e:	68e9      	ldr	r1, [r5, #12]
	uint32_t pkt_size = ptr_job->size;
  402280:	8a2f      	ldrh	r7, [r5, #16]
  402282:	ea4f 5087 	mov.w	r0, r7, lsl #22
  402286:	ea4f 5690 	mov.w	r6, r0, lsr #22
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  40228a:	686a      	ldr	r2, [r5, #4]
  40228c:	1852      	adds	r2, r2, r1
	bool b_full = false, b_short;

	// Read byte count
	nb_data = udd_byte_count(ep);
  40228e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  402292:	f2c4 0303 	movt	r3, #16387	; 0x4003
  402296:	f104 070c 	add.w	r7, r4, #12
  40229a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
  40229e:	f3c0 470a 	ubfx	r7, r0, #16, #11
	b_short = (nb_data < pkt_size);

	// Copy data if there is
	if (nb_data > 0) {
  4022a2:	2f00      	cmp	r7, #0
  4022a4:	f000 83b5 	beq.w	402a12 <UDP_Handler+0xea6>

static void udd_ep_out_received(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  4022a8:	ebc1 000e 	rsb	r0, r1, lr
	nb_data = udd_byte_count(ep);
	b_short = (nb_data < pkt_size);

	// Copy data if there is
	if (nb_data > 0) {
		if (nb_data >= nb_remain) {
  4022ac:	42b8      	cmp	r0, r7
  4022ae:	f200 8393 	bhi.w	4029d8 <UDP_Handler+0xe6c>
			nb_data = nb_remain;
			b_full = true;
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;
  4022b2:	f8c5 e00c 	str.w	lr, [r5, #12]

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  4022b6:	2800      	cmp	r0, #0
  4022b8:	f040 8394 	bne.w	4029e4 <UDP_Handler+0xe78>
  4022bc:	e3b0      	b.n	402a20 <UDP_Handler+0xeb4>
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  4022be:	f104 0e14 	add.w	lr, r4, #20
  4022c2:	f851 c02e 	ldr.w	ip, [r1, lr, lsl #2]
  4022c6:	f802 c003 	strb.w	ip, [r2, r3]
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  4022ca:	f103 0301 	add.w	r3, r3, #1
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  4022ce:	f104 0e14 	add.w	lr, r4, #20
  4022d2:	f851 c02e 	ldr.w	ip, [r1, lr, lsl #2]
  4022d6:	f802 c003 	strb.w	ip, [r2, r3]
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  4022da:	f103 0301 	add.w	r3, r3, #1
  4022de:	4283      	cmp	r3, r0
  4022e0:	d3ed      	bcc.n	4022be <UDP_Handler+0x752>
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  4022e2:	4640      	mov	r0, r8
  4022e4:	f241 7275 	movw	r2, #6005	; 0x1775
  4022e8:	f2c0 0240 	movt	r2, #64	; 0x40
  4022ec:	4790      	blx	r2
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  4022ee:	f1ba 0f00 	cmp.w	sl, #0
  4022f2:	d102      	bne.n	4022fa <UDP_Handler+0x78e>
  4022f4:	42be      	cmp	r6, r7
  4022f6:	f240 8397 	bls.w	402a28 <UDP_Handler+0xebc>
			!Is_udd_endpoint_stall_requested(ep)) {
  4022fa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4022fe:	f2c4 0003 	movt	r0, #16387	; 0x4003
  402302:	f104 040c 	add.w	r4, r4, #12
  402306:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  40230a:	f011 0f20 	tst.w	r1, #32
  40230e:	f040 838b 	bne.w	402a28 <UDP_Handler+0xebc>
			!Is_udd_endpoint_stall_requested(ep)) {
		udd_disable_endpoint_interrupt(ep);
  402312:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  402316:	f2c4 0303 	movt	r3, #16387	; 0x4003
  40231a:	f8c3 9014 	str.w	r9, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  40231e:	68ea      	ldr	r2, [r5, #12]
  402320:	60aa      	str	r2, [r5, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  402322:	4628      	mov	r0, r5
  402324:	f04f 0100 	mov.w	r1, #0
  402328:	4642      	mov	r2, r8
  40232a:	f241 7305 	movw	r3, #5893	; 0x1705
  40232e:	f2c0 0340 	movt	r3, #64	; 0x40
  402332:	4798      	blx	r3
  402334:	e378      	b.n	402a28 <UDP_Handler+0xebc>
		if (Is_udd_any_bank_received(ep)) {
			udd_ep_out_received(ep);
			return true;
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {
  402336:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  40233a:	f2c4 0003 	movt	r0, #16387	; 0x4003
  40233e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  402340:	f013 0f01 	tst.w	r3, #1
  402344:	f000 81d9 	beq.w	4026fa <UDP_Handler+0xb8e>
  402348:	f04f 0603 	mov.w	r6, #3
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
			continue;
		}

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
  40234c:	f04f 0402 	mov.w	r4, #2
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  402350:	f04f 0708 	mov.w	r7, #8
  402354:	4635      	mov	r5, r6
  402356:	e016      	b.n	402386 <UDP_Handler+0x81a>
  402358:	20001c2c 	.word	0x20001c2c
  40235c:	00401365 	.word	0x00401365
  402360:	20001b18 	.word	0x20001b18
  402364:	20001b5a 	.word	0x20001b5a
		if (Is_udd_any_bank_received(ep)) {
			udd_ep_out_received(ep);
			return true;
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {
  402368:	f04f 0601 	mov.w	r6, #1
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
			continue;
		}

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
  40236c:	f04f 0400 	mov.w	r4, #0
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  402370:	f04f 0702 	mov.w	r7, #2
  402374:	4635      	mov	r5, r6
  402376:	e006      	b.n	402386 <UDP_Handler+0x81a>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  402378:	f04f 0602 	mov.w	r6, #2
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
			continue;
		}

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
  40237c:	f04f 0401 	mov.w	r4, #1
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  402380:	f04f 0704 	mov.w	r7, #4
  402384:	4635      	mov	r5, r6
			continue;
		}

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
  402386:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40238a:	f641 311c 	movw	r1, #6940	; 0x1b1c
  40238e:	f2c2 0100 	movt	r1, #8192	; 0x2000
  402392:	eb01 0484 	add.w	r4, r1, r4, lsl #2
			return true;
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {

			ptr_job->bank--;
  402396:	7c63      	ldrb	r3, [r4, #17]
  402398:	f3c3 0081 	ubfx	r0, r3, #2, #2
  40239c:	f100 0003 	add.w	r0, r0, #3
  4023a0:	f360 0383 	bfi	r3, r0, #2, #2
  4023a4:	7463      	strb	r3, [r4, #17]
			// Stall when all banks free
			if (ptr_job->b_stall_requested) {
  4023a6:	b2d9      	uxtb	r1, r3
  4023a8:	f001 0220 	and.w	r2, r1, #32
  4023ac:	b2d3      	uxtb	r3, r2
  4023ae:	2b00      	cmp	r3, #0
  4023b0:	f000 8092 	beq.w	4024d8 <UDP_Handler+0x96c>
				if (ptr_job->bank) {
  4023b4:	f011 0f0c 	tst.w	r1, #12
  4023b8:	d045      	beq.n	402446 <UDP_Handler+0x8da>
					// Send remaining
					udd_set_transmit_ready(ep);
  4023ba:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4023be:	f2c4 0003 	movt	r0, #16387	; 0x4003
  4023c2:	f105 020c 	add.w	r2, r5, #12
  4023c6:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
  4023ca:	9118      	str	r1, [sp, #96]	; 0x60
  4023cc:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4023ce:	f043 014f 	orr.w	r1, r3, #79	; 0x4f
  4023d2:	9118      	str	r1, [sp, #96]	; 0x60
  4023d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4023d6:	f043 0110 	orr.w	r1, r3, #16
  4023da:	9118      	str	r1, [sp, #96]	; 0x60
  4023dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4023de:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  4023e2:	f04f 0000 	mov.w	r0, #0
  4023e6:	9019      	str	r0, [sp, #100]	; 0x64
  4023e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4023ea:	2a13      	cmp	r2, #19
  4023ec:	d807      	bhi.n	4023fe <UDP_Handler+0x892>
  4023ee:	bf00      	nop
  4023f0:	9919      	ldr	r1, [sp, #100]	; 0x64
  4023f2:	f101 0101 	add.w	r1, r1, #1
  4023f6:	9119      	str	r1, [sp, #100]	; 0x64
  4023f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4023fa:	2b13      	cmp	r3, #19
  4023fc:	d9f7      	bls.n	4023ee <UDP_Handler+0x882>
					udd_ack_in_sent(ep);
  4023fe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  402402:	f2c4 0003 	movt	r0, #16387	; 0x4003
  402406:	f105 050c 	add.w	r5, r5, #12
  40240a:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
  40240e:	921a      	str	r2, [sp, #104]	; 0x68
  402410:	991a      	ldr	r1, [sp, #104]	; 0x68
  402412:	f041 034f 	orr.w	r3, r1, #79	; 0x4f
  402416:	931a      	str	r3, [sp, #104]	; 0x68
  402418:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40241a:	f022 0101 	bic.w	r1, r2, #1
  40241e:	911a      	str	r1, [sp, #104]	; 0x68
  402420:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  402422:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
  402426:	f04f 0000 	mov.w	r0, #0
  40242a:	901b      	str	r0, [sp, #108]	; 0x6c
  40242c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40242e:	2a13      	cmp	r2, #19
  402430:	f200 82fa 	bhi.w	402a28 <UDP_Handler+0xebc>
  402434:	bf00      	nop
  402436:	991b      	ldr	r1, [sp, #108]	; 0x6c
  402438:	f101 0101 	add.w	r1, r1, #1
  40243c:	911b      	str	r1, [sp, #108]	; 0x6c
  40243e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  402440:	2b13      	cmp	r3, #19
  402442:	d9f7      	bls.n	402434 <UDP_Handler+0x8c8>
  402444:	e2f0      	b.n	402a28 <UDP_Handler+0xebc>
				} else {
					// Ack last packet
					udd_ack_in_sent(ep);
  402446:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  40244a:	f2c4 0303 	movt	r3, #16387	; 0x4003
  40244e:	f105 000c 	add.w	r0, r5, #12
  402452:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  402456:	911c      	str	r1, [sp, #112]	; 0x70
  402458:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  40245a:	f042 014f 	orr.w	r1, r2, #79	; 0x4f
  40245e:	911c      	str	r1, [sp, #112]	; 0x70
  402460:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  402462:	f022 0101 	bic.w	r1, r2, #1
  402466:	911c      	str	r1, [sp, #112]	; 0x70
  402468:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  40246a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
  40246e:	f04f 0300 	mov.w	r3, #0
  402472:	931d      	str	r3, [sp, #116]	; 0x74
  402474:	981d      	ldr	r0, [sp, #116]	; 0x74
  402476:	2813      	cmp	r0, #19
  402478:	d807      	bhi.n	40248a <UDP_Handler+0x91e>
  40247a:	bf00      	nop
  40247c:	991d      	ldr	r1, [sp, #116]	; 0x74
  40247e:	f101 0101 	add.w	r1, r1, #1
  402482:	911d      	str	r1, [sp, #116]	; 0x74
  402484:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  402486:	2a13      	cmp	r2, #19
  402488:	d9f7      	bls.n	40247a <UDP_Handler+0x90e>
					// Enable stall
					udd_enable_stall_handshake(ep);
  40248a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  40248e:	f2c4 0303 	movt	r3, #16387	; 0x4003
  402492:	f105 050c 	add.w	r5, r5, #12
  402496:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
  40249a:	901e      	str	r0, [sp, #120]	; 0x78
  40249c:	991e      	ldr	r1, [sp, #120]	; 0x78
  40249e:	f041 024f 	orr.w	r2, r1, #79	; 0x4f
  4024a2:	921e      	str	r2, [sp, #120]	; 0x78
  4024a4:	981e      	ldr	r0, [sp, #120]	; 0x78
  4024a6:	f040 0120 	orr.w	r1, r0, #32
  4024aa:	911e      	str	r1, [sp, #120]	; 0x78
  4024ac:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  4024ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
  4024b2:	f04f 0300 	mov.w	r3, #0
  4024b6:	931f      	str	r3, [sp, #124]	; 0x7c
  4024b8:	981f      	ldr	r0, [sp, #124]	; 0x7c
  4024ba:	2813      	cmp	r0, #19
  4024bc:	d807      	bhi.n	4024ce <UDP_Handler+0x962>
  4024be:	bf00      	nop
  4024c0:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4024c2:	f101 0101 	add.w	r1, r1, #1
  4024c6:	911f      	str	r1, [sp, #124]	; 0x7c
  4024c8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4024ca:	2a13      	cmp	r2, #19
  4024cc:	d9f7      	bls.n	4024be <UDP_Handler+0x952>
					// Halt executed
					ptr_job->b_stall_requested = false;
  4024ce:	7c63      	ldrb	r3, [r4, #17]
  4024d0:	f36f 1345 	bfc	r3, #5, #1
  4024d4:	7463      	strb	r3, [r4, #17]
  4024d6:	e2a7      	b.n	402a28 <UDP_Handler+0xebc>
				}
				return true;
			}
			// Finish Job when buffer end
			if (ptr_job->b_buf_end) {
  4024d8:	f011 0f80 	tst.w	r1, #128	; 0x80
  4024dc:	d00e      	beq.n	4024fc <UDP_Handler+0x990>
				ptr_job->b_buf_end = false;
  4024de:	7c60      	ldrb	r0, [r4, #17]
  4024e0:	f36f 10c7 	bfc	r0, #7, #1
  4024e4:	7460      	strb	r0, [r4, #17]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  4024e6:	68e1      	ldr	r1, [r4, #12]
  4024e8:	60a1      	str	r1, [r4, #8]
				udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  4024ea:	4620      	mov	r0, r4
  4024ec:	f04f 0100 	mov.w	r1, #0
  4024f0:	4632      	mov	r2, r6
  4024f2:	f241 7305 	movw	r3, #5893	; 0x1705
  4024f6:	f2c0 0340 	movt	r3, #64	; 0x40
  4024fa:	4798      	blx	r3
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  4024fc:	68e2      	ldr	r2, [r4, #12]
  4024fe:	68a0      	ldr	r0, [r4, #8]
  402500:	4282      	cmp	r2, r0
  402502:	d340      	bcc.n	402586 <UDP_Handler+0xa1a>
					!ptr_job->b_shortpacket &&
  402504:	7c61      	ldrb	r1, [r4, #17]
  402506:	f011 0f4c 	tst.w	r1, #76	; 0x4c
  40250a:	d13c      	bne.n	402586 <UDP_Handler+0xa1a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40250c:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402510:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402512:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  402516:	f240 42ac 	movw	r2, #1196	; 0x4ac
  40251a:	f2c2 0200 	movt	r2, #8192	; 0x2000
  40251e:	f04f 0100 	mov.w	r1, #0
  402522:	7011      	strb	r1, [r2, #0]
					ptr_job->bank == 0) {
				// All transfer done, including ZLP
				irqflags_t flags = cpu_irq_save();
				udd_disable_endpoint_interrupt(ep);
  402524:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  402528:	f2c4 0303 	movt	r3, #16387	; 0x4003
  40252c:	615f      	str	r7, [r3, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40252e:	b930      	cbnz	r0, 40253e <UDP_Handler+0x9d2>
		cpu_irq_enable();
  402530:	48b9      	ldr	r0, [pc, #740]	; (402818 <UDP_Handler+0xcac>)
  402532:	f04f 0201 	mov.w	r2, #1
  402536:	7002      	strb	r2, [r0, #0]
  402538:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  40253c:	b662      	cpsie	i
				cpu_irq_restore(flags);
				// Ack last packet
				udd_ack_in_sent(ep);
  40253e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  402542:	f2c4 0103 	movt	r1, #16387	; 0x4003
  402546:	f105 050c 	add.w	r5, r5, #12
  40254a:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
  40254e:	9320      	str	r3, [sp, #128]	; 0x80
  402550:	9820      	ldr	r0, [sp, #128]	; 0x80
  402552:	f040 024f 	orr.w	r2, r0, #79	; 0x4f
  402556:	9220      	str	r2, [sp, #128]	; 0x80
  402558:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40255a:	f023 0001 	bic.w	r0, r3, #1
  40255e:	9020      	str	r0, [sp, #128]	; 0x80
  402560:	9a20      	ldr	r2, [sp, #128]	; 0x80
  402562:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  402566:	f04f 0100 	mov.w	r1, #0
  40256a:	9121      	str	r1, [sp, #132]	; 0x84
  40256c:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40256e:	2b13      	cmp	r3, #19
  402570:	f200 825a 	bhi.w	402a28 <UDP_Handler+0xebc>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402574:	bf00      	nop
  402576:	9821      	ldr	r0, [sp, #132]	; 0x84
  402578:	f100 0001 	add.w	r0, r0, #1
  40257c:	9021      	str	r0, [sp, #132]	; 0x84
  40257e:	9a21      	ldr	r2, [sp, #132]	; 0x84
  402580:	2a13      	cmp	r2, #19
  402582:	d9f7      	bls.n	402574 <UDP_Handler+0xa08>
  402584:	e250      	b.n	402a28 <UDP_Handler+0xebc>
				return true;
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  402586:	2e00      	cmp	r6, #0
  402588:	f000 808b 	beq.w	4026a2 <UDP_Handler+0xb36>
  40258c:	2e03      	cmp	r6, #3
  40258e:	f000 8088 	beq.w	4026a2 <UDP_Handler+0xb36>
					&& ptr_job->bank > 0) {
  402592:	7c60      	ldrb	r0, [r4, #17]
  402594:	f010 0f0c 	tst.w	r0, #12
  402598:	d049      	beq.n	40262e <UDP_Handler+0xac2>
				// Already banks buffered, transmit while loading
				udd_set_transmit_ready(ep);
  40259a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  40259e:	f2c4 0003 	movt	r0, #16387	; 0x4003
  4025a2:	f105 030c 	add.w	r3, r5, #12
  4025a6:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
  4025aa:	9122      	str	r1, [sp, #136]	; 0x88
  4025ac:	9a22      	ldr	r2, [sp, #136]	; 0x88
  4025ae:	f042 014f 	orr.w	r1, r2, #79	; 0x4f
  4025b2:	9122      	str	r1, [sp, #136]	; 0x88
  4025b4:	9a22      	ldr	r2, [sp, #136]	; 0x88
  4025b6:	f042 0110 	orr.w	r1, r2, #16
  4025ba:	9122      	str	r1, [sp, #136]	; 0x88
  4025bc:	9a22      	ldr	r2, [sp, #136]	; 0x88
  4025be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  4025c2:	f04f 0000 	mov.w	r0, #0
  4025c6:	9023      	str	r0, [sp, #140]	; 0x8c
  4025c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4025ca:	2b13      	cmp	r3, #19
  4025cc:	d807      	bhi.n	4025de <UDP_Handler+0xa72>
  4025ce:	bf00      	nop
  4025d0:	9923      	ldr	r1, [sp, #140]	; 0x8c
  4025d2:	f101 0101 	add.w	r1, r1, #1
  4025d6:	9123      	str	r1, [sp, #140]	; 0x8c
  4025d8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
  4025da:	2a13      	cmp	r2, #19
  4025dc:	d9f7      	bls.n	4025ce <UDP_Handler+0xa62>
				udd_ack_in_sent(ep);
  4025de:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4025e2:	f2c4 0003 	movt	r0, #16387	; 0x4003
  4025e6:	f105 050c 	add.w	r5, r5, #12
  4025ea:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
  4025ee:	9324      	str	r3, [sp, #144]	; 0x90
  4025f0:	9924      	ldr	r1, [sp, #144]	; 0x90
  4025f2:	f041 024f 	orr.w	r2, r1, #79	; 0x4f
  4025f6:	9224      	str	r2, [sp, #144]	; 0x90
  4025f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4025fa:	f023 0101 	bic.w	r1, r3, #1
  4025fe:	9124      	str	r1, [sp, #144]	; 0x90
  402600:	9a24      	ldr	r2, [sp, #144]	; 0x90
  402602:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
  402606:	f04f 0000 	mov.w	r0, #0
  40260a:	9025      	str	r0, [sp, #148]	; 0x94
  40260c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40260e:	2b13      	cmp	r3, #19
  402610:	d807      	bhi.n	402622 <UDP_Handler+0xab6>
  402612:	bf00      	nop
  402614:	9925      	ldr	r1, [sp, #148]	; 0x94
  402616:	f101 0101 	add.w	r1, r1, #1
  40261a:	9125      	str	r1, [sp, #148]	; 0x94
  40261c:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40261e:	2a13      	cmp	r2, #19
  402620:	d9f7      	bls.n	402612 <UDP_Handler+0xaa6>
				udd_ep_in_sent(ep, false);
  402622:	4630      	mov	r0, r6
  402624:	f04f 0100 	mov.w	r1, #0
  402628:	4b7c      	ldr	r3, [pc, #496]	; (40281c <UDP_Handler+0xcb0>)
  40262a:	4798      	blx	r3
  40262c:	e1fc      	b.n	402a28 <UDP_Handler+0xebc>
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
				// Still bank free, load and transmit
				if (!udd_ep_in_sent(ep, true)) {
  40262e:	4630      	mov	r0, r6
  402630:	f04f 0101 	mov.w	r1, #1
  402634:	4a79      	ldr	r2, [pc, #484]	; (40281c <UDP_Handler+0xcb0>)
  402636:	4790      	blx	r2
  402638:	b958      	cbnz	r0, 402652 <UDP_Handler+0xae6>
					ptr_job->b_buf_end = false;
  40263a:	7c61      	ldrb	r1, [r4, #17]
  40263c:	f36f 11c7 	bfc	r1, #7, #1
  402640:	7461      	strb	r1, [r4, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  402642:	68e3      	ldr	r3, [r4, #12]
  402644:	60a3      	str	r3, [r4, #8]
					udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  402646:	4620      	mov	r0, r4
  402648:	f04f 0100 	mov.w	r1, #0
  40264c:	4632      	mov	r2, r6
  40264e:	4b74      	ldr	r3, [pc, #464]	; (402820 <UDP_Handler+0xcb4>)
  402650:	4798      	blx	r3
				}
				udd_ack_in_sent(ep);
  402652:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  402656:	f2c4 0003 	movt	r0, #16387	; 0x4003
  40265a:	f105 050c 	add.w	r5, r5, #12
  40265e:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
  402662:	9226      	str	r2, [sp, #152]	; 0x98
  402664:	9926      	ldr	r1, [sp, #152]	; 0x98
  402666:	f041 034f 	orr.w	r3, r1, #79	; 0x4f
  40266a:	9326      	str	r3, [sp, #152]	; 0x98
  40266c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40266e:	f022 0101 	bic.w	r1, r2, #1
  402672:	9126      	str	r1, [sp, #152]	; 0x98
  402674:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402676:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
  40267a:	f04f 0000 	mov.w	r0, #0
  40267e:	9027      	str	r0, [sp, #156]	; 0x9c
  402680:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  402682:	2a13      	cmp	r2, #19
  402684:	d807      	bhi.n	402696 <UDP_Handler+0xb2a>
  402686:	bf00      	nop
  402688:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40268a:	f101 0101 	add.w	r1, r1, #1
  40268e:	9127      	str	r1, [sp, #156]	; 0x9c
  402690:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402692:	2b13      	cmp	r3, #19
  402694:	d9f7      	bls.n	402686 <UDP_Handler+0xb1a>
				udd_ep_in_sent(ep, false);
  402696:	4630      	mov	r0, r6
  402698:	f04f 0100 	mov.w	r1, #0
  40269c:	4a5f      	ldr	r2, [pc, #380]	; (40281c <UDP_Handler+0xcb0>)
  40269e:	4790      	blx	r2
  4026a0:	e1c2      	b.n	402a28 <UDP_Handler+0xebc>
			} else {
				// Single bank transfer, ack when ready
				udd_ep_in_sent(ep, true);
  4026a2:	4630      	mov	r0, r6
  4026a4:	f04f 0101 	mov.w	r1, #1
  4026a8:	f641 0379 	movw	r3, #6265	; 0x1879
  4026ac:	f2c0 0340 	movt	r3, #64	; 0x40
  4026b0:	4798      	blx	r3
				udd_ack_in_sent(ep);
  4026b2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4026b6:	f2c4 0003 	movt	r0, #16387	; 0x4003
  4026ba:	f105 050c 	add.w	r5, r5, #12
  4026be:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
  4026c2:	9228      	str	r2, [sp, #160]	; 0xa0
  4026c4:	9928      	ldr	r1, [sp, #160]	; 0xa0
  4026c6:	f041 034f 	orr.w	r3, r1, #79	; 0x4f
  4026ca:	9328      	str	r3, [sp, #160]	; 0xa0
  4026cc:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  4026ce:	f022 0101 	bic.w	r1, r2, #1
  4026d2:	9128      	str	r1, [sp, #160]	; 0xa0
  4026d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4026d6:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
  4026da:	f04f 0000 	mov.w	r0, #0
  4026de:	9029      	str	r0, [sp, #164]	; 0xa4
  4026e0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
  4026e2:	2a13      	cmp	r2, #19
  4026e4:	f200 81a0 	bhi.w	402a28 <UDP_Handler+0xebc>
  4026e8:	bf00      	nop
  4026ea:	9929      	ldr	r1, [sp, #164]	; 0xa4
  4026ec:	f101 0101 	add.w	r1, r1, #1
  4026f0:	9129      	str	r1, [sp, #164]	; 0xa4
  4026f2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  4026f4:	2b13      	cmp	r3, #19
  4026f6:	d9f7      	bls.n	4026e8 <UDP_Handler+0xb7c>
  4026f8:	e196      	b.n	402a28 <UDP_Handler+0xebc>
			}
			return true;
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  4026fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  4026fe:	f2c4 0103 	movt	r1, #16387	; 0x4003
  402702:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
  402704:	f010 0f08 	tst.w	r0, #8
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  402708:	bf18      	it	ne
  40270a:	2203      	movne	r2, #3
				udd_ack_in_sent(ep);
			}
			return true;
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  40270c:	d105      	bne.n	40271a <UDP_Handler+0xbae>
  40270e:	e03b      	b.n	402788 <UDP_Handler+0xc1c>
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  402710:	f04f 0201 	mov.w	r2, #1
  402714:	e001      	b.n	40271a <UDP_Handler+0xbae>
  402716:	f04f 0202 	mov.w	r2, #2
			}
			return true;
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
			udd_ack_stall(ep);
  40271a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  40271e:	f2c4 0303 	movt	r3, #16387	; 0x4003
  402722:	f102 010c 	add.w	r1, r2, #12
  402726:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40272a:	902a      	str	r0, [sp, #168]	; 0xa8
  40272c:	982a      	ldr	r0, [sp, #168]	; 0xa8
  40272e:	f040 004f 	orr.w	r0, r0, #79	; 0x4f
  402732:	902a      	str	r0, [sp, #168]	; 0xa8
  402734:	982a      	ldr	r0, [sp, #168]	; 0xa8
  402736:	f020 0008 	bic.w	r0, r0, #8
  40273a:	902a      	str	r0, [sp, #168]	; 0xa8
  40273c:	982a      	ldr	r0, [sp, #168]	; 0xa8
  40273e:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  402742:	f04f 0300 	mov.w	r3, #0
  402746:	932b      	str	r3, [sp, #172]	; 0xac
  402748:	992b      	ldr	r1, [sp, #172]	; 0xac
  40274a:	2913      	cmp	r1, #19
  40274c:	d807      	bhi.n	40275e <UDP_Handler+0xbf2>
  40274e:	bf00      	nop
  402750:	982b      	ldr	r0, [sp, #172]	; 0xac
  402752:	f100 0001 	add.w	r0, r0, #1
  402756:	902b      	str	r0, [sp, #172]	; 0xac
  402758:	9b2b      	ldr	r3, [sp, #172]	; 0xac
  40275a:	2b13      	cmp	r3, #19
  40275c:	d9f7      	bls.n	40274e <UDP_Handler+0xbe2>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  40275e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  402762:	f2c4 0003 	movt	r0, #16387	; 0x4003
  402766:	f102 020c 	add.w	r2, r2, #12
  40276a:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
  40276e:	f401 63e0 	and.w	r3, r1, #1792	; 0x700
  402772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  402776:	f000 8157 	beq.w	402a28 <UDP_Handler+0xebc>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  40277a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  40277e:	f2c4 0003 	movt	r0, #16387	; 0x4003
  402782:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
  402786:	e14f      	b.n	402a28 <UDP_Handler+0xebc>
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  402788:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  40278c:	f2c4 0003 	movt	r0, #16387	; 0x4003
  402790:	6981      	ldr	r1, [r0, #24]
  402792:	f411 5f00 	tst.w	r1, #8192	; 0x2000
  402796:	d007      	beq.n	4027a8 <UDP_Handler+0xc3c>
  402798:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  40279c:	f2c4 0203 	movt	r2, #16387	; 0x4003
  4027a0:	69d3      	ldr	r3, [r2, #28]
  4027a2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  4027a6:	d11f      	bne.n	4027e8 <UDP_Handler+0xc7c>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  4027a8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4027ac:	f2c4 0003 	movt	r0, #16387	; 0x4003
  4027b0:	6981      	ldr	r1, [r0, #24]
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  4027b2:	f411 7f00 	tst.w	r1, #512	; 0x200
  4027b6:	d007      	beq.n	4027c8 <UDP_Handler+0xc5c>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  4027b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4027bc:	f2c4 0203 	movt	r2, #16387	; 0x4003
  4027c0:	69d3      	ldr	r3, [r2, #28]
  4027c2:	f413 7f00 	tst.w	r3, #512	; 0x200
  4027c6:	d10f      	bne.n	4027e8 <UDP_Handler+0xc7c>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  4027c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4027cc:	f2c4 0003 	movt	r0, #16387	; 0x4003
  4027d0:	6981      	ldr	r1, [r0, #24]
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  4027d2:	f411 6f80 	tst.w	r1, #1024	; 0x400
  4027d6:	d025      	beq.n	402824 <UDP_Handler+0xcb8>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  4027d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4027dc:	f2c4 0203 	movt	r2, #16387	; 0x4003
  4027e0:	69d3      	ldr	r3, [r2, #28]
  4027e2:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4027e6:	d01d      	beq.n	402824 <UDP_Handler+0xcb8>
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wakeups();
  4027e8:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  4027ec:	f2c4 0403 	movt	r4, #16387	; 0x4003
  4027f0:	f44f 5118 	mov.w	r1, #9728	; 0x2600
  4027f4:	6221      	str	r1, [r4, #32]
		// Do resume operations
		udd_disable_wakeups();
  4027f6:	6161      	str	r1, [r4, #20]

		udd_sleep_mode(true); // Enter in IDLE mode
  4027f8:	f04f 0001 	mov.w	r0, #1
  4027fc:	f241 2399 	movw	r3, #4761	; 0x1299
  402800:	f2c0 0340 	movt	r3, #64	; 0x40
  402804:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		udd_ack_suspend();
  402806:	f44f 7080 	mov.w	r0, #256	; 0x100
  40280a:	6220      	str	r0, [r4, #32]
		udd_enable_suspend_interrupt();
  40280c:	6120      	str	r0, [r4, #16]
		udd_enable_sof_interrupt();
  40280e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402812:	6122      	str	r2, [r4, #16]
		goto udd_interrupt_end;
  402814:	e108      	b.n	402a28 <UDP_Handler+0xebc>
  402816:	bf00      	nop
  402818:	200004ac 	.word	0x200004ac
  40281c:	00401879 	.word	0x00401879
  402820:	00401705 	.word	0x00401705
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  402824:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  402828:	f2c4 0003 	movt	r0, #16387	; 0x4003
  40282c:	6981      	ldr	r1, [r0, #24]
  40282e:	f411 7f80 	tst.w	r1, #256	; 0x100
  402832:	d027      	beq.n	402884 <UDP_Handler+0xd18>
  402834:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  402838:	f2c4 0203 	movt	r2, #16387	; 0x4003
  40283c:	69d3      	ldr	r3, [r2, #28]
  40283e:	f413 7f80 	tst.w	r3, #256	; 0x100
  402842:	d01f      	beq.n	402884 <UDP_Handler+0xd18>
		// Ack suspend interrupt and enable resume interrupt
		udd_ack_suspend();
  402844:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  402848:	f2c4 0303 	movt	r3, #16387	; 0x4003
  40284c:	f44f 7080 	mov.w	r0, #256	; 0x100
  402850:	6218      	str	r0, [r3, #32]
		udd_disable_suspend_interrupt();
  402852:	6158      	str	r0, [r3, #20]
		udd_enable_wake_up_interrupt();
  402854:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  402858:	611a      	str	r2, [r3, #16]
		udd_enable_resume_interrupt();
  40285a:	f44f 7100 	mov.w	r1, #512	; 0x200
  40285e:	6119      	str	r1, [r3, #16]
		udd_enable_ext_resume_interrupt();
  402860:	f44f 6080 	mov.w	r0, #1024	; 0x400
  402864:	6118      	str	r0, [r3, #16]
		udd_disable_periph_ck();
  402866:	f04f 0022 	mov.w	r0, #34	; 0x22
  40286a:	f244 33f5 	movw	r3, #17397	; 0x43f5
  40286e:	f2c0 0340 	movt	r3, #64	; 0x40
  402872:	4798      	blx	r3

		udd_sleep_mode(false); // Enter in SUSPEND mode
  402874:	f04f 0000 	mov.w	r0, #0
  402878:	f241 2299 	movw	r2, #4761	; 0x1299
  40287c:	f2c0 0240 	movt	r2, #64	; 0x40
  402880:	4790      	blx	r2
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
  402882:	e0d1      	b.n	402a28 <UDP_Handler+0xebc>
	}
	if (Is_udd_reset()) {
  402884:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  402888:	f2c4 0003 	movt	r0, #16387	; 0x4003
  40288c:	69c1      	ldr	r1, [r0, #28]
  40288e:	f411 5f80 	tst.w	r1, #4096	; 0x1000
  402892:	f000 80c9 	beq.w	402a28 <UDP_Handler+0xebc>
		// USB bus reset detection
		udd_ack_reset();
  402896:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  40289a:	f2c4 0403 	movt	r4, #16387	; 0x4003
  40289e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  4028a2:	6225      	str	r5, [r4, #32]
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  4028a4:	f641 361c 	movw	r6, #6940	; 0x1b1c
  4028a8:	f2c2 0600 	movt	r6, #8192	; 0x2000
  4028ac:	4630      	mov	r0, r6
  4028ae:	f04f 0101 	mov.w	r1, #1
  4028b2:	460a      	mov	r2, r1
  4028b4:	f241 7505 	movw	r5, #5893	; 0x1705
  4028b8:	f2c0 0540 	movt	r5, #64	; 0x40
  4028bc:	47a8      	blx	r5
  4028be:	f106 0014 	add.w	r0, r6, #20
  4028c2:	f04f 0101 	mov.w	r1, #1
  4028c6:	f04f 0202 	mov.w	r2, #2
  4028ca:	47a8      	blx	r5
  4028cc:	f106 0028 	add.w	r0, r6, #40	; 0x28
  4028d0:	f04f 0101 	mov.w	r1, #1
  4028d4:	f04f 0203 	mov.w	r2, #3
  4028d8:	47a8      	blx	r5
		// Abort all jobs on-going
#if (0 != USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
  4028da:	f640 423d 	movw	r2, #3133	; 0xc3d
  4028de:	f2c0 0240 	movt	r2, #64	; 0x40
  4028e2:	4790      	blx	r2
		// Reset device state
		udd_disable_address_state();
  4028e4:	6863      	ldr	r3, [r4, #4]
  4028e6:	f023 0001 	bic.w	r0, r3, #1
  4028ea:	6060      	str	r0, [r4, #4]
		udd_disable_configured_state();
  4028ec:	6861      	ldr	r1, [r4, #4]
  4028ee:	f021 0202 	bic.w	r2, r1, #2
  4028f2:	6062      	str	r2, [r4, #4]
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_enable_address();
  4028f4:	68a3      	ldr	r3, [r4, #8]
  4028f6:	f443 7080 	orr.w	r0, r3, #256	; 0x100
  4028fa:	60a0      	str	r0, [r4, #8]
	udd_configure_address(0);
  4028fc:	68a1      	ldr	r1, [r4, #8]
  4028fe:	f021 027f 	bic.w	r2, r1, #127	; 0x7f
  402902:	60a2      	str	r2, [r4, #8]
	// Alloc and configure control endpoint in OUT direction
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  402904:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402906:	932c      	str	r3, [sp, #176]	; 0xb0
  402908:	982c      	ldr	r0, [sp, #176]	; 0xb0
  40290a:	f040 014f 	orr.w	r1, r0, #79	; 0x4f
  40290e:	912c      	str	r1, [sp, #176]	; 0xb0
  402910:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  402912:	f422 4307 	bic.w	r3, r2, #34560	; 0x8700
  402916:	f023 0080 	bic.w	r0, r3, #128	; 0x80
  40291a:	902c      	str	r0, [sp, #176]	; 0xb0
  40291c:	992c      	ldr	r1, [sp, #176]	; 0xb0
  40291e:	f441 4200 	orr.w	r2, r1, #32768	; 0x8000
  402922:	922c      	str	r2, [sp, #176]	; 0xb0
  402924:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  402926:	6323      	str	r3, [r4, #48]	; 0x30
  402928:	f04f 0000 	mov.w	r0, #0
  40292c:	902d      	str	r0, [sp, #180]	; 0xb4
  40292e:	992d      	ldr	r1, [sp, #180]	; 0xb4
  402930:	2913      	cmp	r1, #19
  402932:	d807      	bhi.n	402944 <UDP_Handler+0xdd8>
  402934:	bf00      	nop
  402936:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  402938:	f102 0201 	add.w	r2, r2, #1
  40293c:	922d      	str	r2, [sp, #180]	; 0xb4
  40293e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  402940:	2b13      	cmp	r3, #19
  402942:	d9f7      	bls.n	402934 <UDP_Handler+0xdc8>
	udd_enable_endpoint(0);
  402944:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  402948:	f2c4 0003 	movt	r0, #16387	; 0x4003
  40294c:	6b01      	ldr	r1, [r0, #48]	; 0x30
  40294e:	912e      	str	r1, [sp, #184]	; 0xb8
  402950:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
  402952:	f042 034f 	orr.w	r3, r2, #79	; 0x4f
  402956:	932e      	str	r3, [sp, #184]	; 0xb8
  402958:	992e      	ldr	r1, [sp, #184]	; 0xb8
  40295a:	f441 4200 	orr.w	r2, r1, #32768	; 0x8000
  40295e:	922e      	str	r2, [sp, #184]	; 0xb8
  402960:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  402962:	6303      	str	r3, [r0, #48]	; 0x30
  402964:	f04f 0000 	mov.w	r0, #0
  402968:	902f      	str	r0, [sp, #188]	; 0xbc
  40296a:	992f      	ldr	r1, [sp, #188]	; 0xbc
  40296c:	2913      	cmp	r1, #19
  40296e:	d807      	bhi.n	402980 <UDP_Handler+0xe14>
  402970:	bf00      	nop
  402972:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
  402974:	f102 0201 	add.w	r2, r2, #1
  402978:	922f      	str	r2, [sp, #188]	; 0xbc
  40297a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  40297c:	2b13      	cmp	r3, #19
  40297e:	d9f7      	bls.n	402970 <UDP_Handler+0xe04>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402980:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402984:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402986:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  40298a:	f240 42ac 	movw	r2, #1196	; 0x4ac
  40298e:	f2c2 0200 	movt	r2, #8192	; 0x2000
  402992:	f04f 0100 	mov.w	r1, #0
  402996:	7011      	strb	r1, [r2, #0]

	flags = cpu_irq_save();
	udd_enable_endpoint_interrupt(0);
  402998:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  40299c:	f2c4 0303 	movt	r3, #16387	; 0x4003
  4029a0:	f04f 0201 	mov.w	r2, #1
  4029a4:	611a      	str	r2, [r3, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4029a6:	b938      	cbnz	r0, 4029b8 <UDP_Handler+0xe4c>
		cpu_irq_enable();
  4029a8:	f240 40ac 	movw	r0, #1196	; 0x4ac
  4029ac:	f2c2 0000 	movt	r0, #8192	; 0x2000
  4029b0:	7002      	strb	r2, [r0, #0]
  4029b2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  4029b6:	b662      	cpsie	i
		udd_disable_address_state();
		udd_disable_configured_state();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
  4029b8:	f241 3345 	movw	r3, #4933	; 0x1345
  4029bc:	f2c0 0340 	movt	r3, #64	; 0x40
  4029c0:	4798      	blx	r3
		// After a USB reset, the suspend and SOF interrupt masks has been reseted
		// Thus, re-enable these
		udd_enable_suspend_interrupt();
  4029c2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4029c6:	f2c4 0003 	movt	r0, #16387	; 0x4003
  4029ca:	f44f 7280 	mov.w	r2, #256	; 0x100
  4029ce:	6102      	str	r2, [r0, #16]
		udd_enable_sof_interrupt();
  4029d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4029d4:	6101      	str	r1, [r0, #16]
		goto udd_interrupt_end;
  4029d6:	e027      	b.n	402a28 <UDP_Handler+0xebc>
		if (nb_data >= nb_remain) {
			nb_data = nb_remain;
			b_full = true;
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;
  4029d8:	187b      	adds	r3, r7, r1
  4029da:	60eb      	str	r3, [r5, #12]
	uint32_t pkt_size = ptr_job->size;
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
	bool b_full = false, b_short;

	// Read byte count
	nb_data = udd_byte_count(ep);
  4029dc:	4638      	mov	r0, r7
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
	uint32_t pkt_size = ptr_job->size;
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
	bool b_full = false, b_short;
  4029de:	f04f 0a00 	mov.w	sl, #0
  4029e2:	e001      	b.n	4029e8 <UDP_Handler+0xe7c>

	// Copy data if there is
	if (nb_data > 0) {
		if (nb_data >= nb_remain) {
			nb_data = nb_remain;
			b_full = true;
  4029e4:	f04f 0a01 	mov.w	sl, #1
		// Modify job information
		ptr_job->buf_cnt += nb_data;

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  4029e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  4029ec:	f2c4 0103 	movt	r1, #16387	; 0x4003
  4029f0:	f04f 0300 	mov.w	r3, #0
  4029f4:	f100 3cff 	add.w	ip, r0, #4294967295
  4029f8:	f00c 0e01 	and.w	lr, ip, #1
  4029fc:	f104 0c14 	add.w	ip, r4, #20
  402a00:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
  402a04:	f802 c003 	strb.w	ip, [r2, r3]
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  402a08:	f103 0301 	add.w	r3, r3, #1
  402a0c:	4283      	cmp	r3, r0
  402a0e:	d30e      	bcc.n	402a2e <UDP_Handler+0xec2>
  402a10:	e467      	b.n	4022e2 <UDP_Handler+0x776>
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  402a12:	4640      	mov	r0, r8
  402a14:	f241 7175 	movw	r1, #6005	; 0x1775
  402a18:	f2c0 0140 	movt	r1, #64	; 0x40
  402a1c:	4788      	blx	r1
  402a1e:	e469      	b.n	4022f4 <UDP_Handler+0x788>
  402a20:	4640      	mov	r0, r8
  402a22:	4a12      	ldr	r2, [pc, #72]	; (402a6c <UDP_Handler+0xf00>)
  402a24:	4790      	blx	r2
  402a26:	e468      	b.n	4022fa <UDP_Handler+0x78e>
	}

udd_interrupt_end:
udd_interrupt_sof_end:
	return;
}
  402a28:	b030      	add	sp, #192	; 0xc0
  402a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402a2e:	f1be 0f00 	cmp.w	lr, #0
  402a32:	f43f ac44 	beq.w	4022be <UDP_Handler+0x752>
		// Modify job information
		ptr_job->buf_cnt += nb_data;

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  402a36:	f104 0e14 	add.w	lr, r4, #20
  402a3a:	f851 c02e 	ldr.w	ip, [r1, lr, lsl #2]
  402a3e:	f802 c003 	strb.w	ip, [r2, r3]
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  402a42:	f103 0301 	add.w	r3, r3, #1
  402a46:	4283      	cmp	r3, r0
  402a48:	f4ff ac39 	bcc.w	4022be <UDP_Handler+0x752>
  402a4c:	e449      	b.n	4022e2 <UDP_Handler+0x776>
  402a4e:	b26d      	sxtb	r5, r5
  402a50:	2d00      	cmp	r5, #0
  402a52:	f43f aa81 	beq.w	401f58 <UDP_Handler+0x3ec>
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  402a56:	6d03      	ldr	r3, [r0, #80]	; 0x50
  402a58:	f802 3b01 	strb.w	r3, [r2], #1
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
  402a5c:	f101 0101 	add.w	r1, r1, #1
  402a60:	b2c9      	uxtb	r1, r1
  402a62:	42a1      	cmp	r1, r4
  402a64:	f4ff aa78 	bcc.w	401f58 <UDP_Handler+0x3ec>
  402a68:	f7ff ba84 	b.w	401f74 <UDP_Handler+0x408>
  402a6c:	00401775 	.word	0x00401775

00402a70 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
	return false;
}
  402a70:	f04f 0000 	mov.w	r0, #0
  402a74:	4770      	bx	lr
  402a76:	bf00      	nop

00402a78 <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address_state();
  402a78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  402a7c:	f2c4 0303 	movt	r3, #16387	; 0x4003
  402a80:	685a      	ldr	r2, [r3, #4]
  402a82:	f022 0101 	bic.w	r1, r2, #1
  402a86:	6059      	str	r1, [r3, #4]
	udd_disable_address();
  402a88:	689a      	ldr	r2, [r3, #8]
  402a8a:	f422 7180 	bic.w	r1, r2, #256	; 0x100
  402a8e:	6099      	str	r1, [r3, #8]
	if (address) {
  402a90:	4602      	mov	r2, r0
  402a92:	b190      	cbz	r0, 402aba <udd_set_address+0x42>
		udd_configure_address(address);
  402a94:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  402a98:	f2c4 0003 	movt	r0, #16387	; 0x4003
  402a9c:	6883      	ldr	r3, [r0, #8]
  402a9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  402aa2:	f023 017f 	bic.w	r1, r3, #127	; 0x7f
  402aa6:	430a      	orrs	r2, r1
  402aa8:	6082      	str	r2, [r0, #8]
		udd_enable_address();
  402aaa:	6883      	ldr	r3, [r0, #8]
  402aac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
  402ab0:	6082      	str	r2, [r0, #8]
		udd_enable_address_state();
  402ab2:	6841      	ldr	r1, [r0, #4]
  402ab4:	f041 0301 	orr.w	r3, r1, #1
  402ab8:	6043      	str	r3, [r0, #4]
  402aba:	4770      	bx	lr

00402abc <udd_getaddress>:
}


uint8_t udd_getaddress(void)
{
	if (Is_udd_address_state_enabled())
  402abc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  402ac0:	f2c4 0303 	movt	r3, #16387	; 0x4003
  402ac4:	6858      	ldr	r0, [r3, #4]
  402ac6:	f010 0f01 	tst.w	r0, #1
  402aca:	d007      	beq.n	402adc <udd_getaddress+0x20>
		return udd_get_configured_address();
  402acc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  402ad0:	f2c4 0103 	movt	r1, #16387	; 0x4003
  402ad4:	688a      	ldr	r2, [r1, #8]
  402ad6:	f002 007f 	and.w	r0, r2, #127	; 0x7f
  402ada:	4770      	bx	lr
	return 0;
  402adc:	f04f 0000 	mov.w	r0, #0
}
  402ae0:	4770      	bx	lr
  402ae2:	bf00      	nop

00402ae4 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
  402ae4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  402ae8:	f2c4 0303 	movt	r3, #16387	; 0x4003
  402aec:	6818      	ldr	r0, [r3, #0]
}
  402aee:	ea4f 5140 	mov.w	r1, r0, lsl #21
  402af2:	ea4f 5051 	mov.w	r0, r1, lsr #21
  402af6:	4770      	bx	lr

00402af8 <udd_get_micro_frame_number>:


uint16_t udd_get_micro_frame_number(void)
{
	return 0;
}
  402af8:	f04f 0000 	mov.w	r0, #0
  402afc:	4770      	bx	lr
  402afe:	bf00      	nop

00402b00 <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
  402b00:	f641 432c 	movw	r3, #7212	; 0x1c2c
  402b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
  402b08:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  402b0a:	8199      	strh	r1, [r3, #12]
  402b0c:	4770      	bx	lr
  402b0e:	bf00      	nop

00402b10 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
  402b10:	b430      	push	{r4, r5}
  402b12:	b082      	sub	sp, #8
	udd_ep_job_t *ptr_job;
	bool b_dir_in;
	bool b_iso;
	b_dir_in = ep & USB_EP_DIR_IN;
	b_iso = (bmAttributes&USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS;
	ep = ep & USB_EP_ADDR_MASK;
  402b14:	f000 030f 	and.w	r3, r0, #15

	if (ep > USB_DEVICE_MAX_EP) {
  402b18:	2b03      	cmp	r3, #3
  402b1a:	f200 8083 	bhi.w	402c24 <udd_ep_alloc+0x114>
		return false;
	}
	if (Is_udd_endpoint_enabled(ep)) {
  402b1e:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  402b22:	f2c4 0403 	movt	r4, #16387	; 0x4003
  402b26:	f103 050c 	add.w	r5, r3, #12
  402b2a:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
  402b2e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
  402b32:	d17a      	bne.n	402c2a <udd_ep_alloc+0x11a>
		return false;
	}

	// Check parameters
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  402b34:	f001 0403 	and.w	r4, r1, #3
  402b38:	2c01      	cmp	r4, #1
  402b3a:	d103      	bne.n	402b44 <udd_ep_alloc+0x34>
  402b3c:	2b00      	cmp	r3, #0
  402b3e:	d077      	beq.n	402c30 <udd_ep_alloc+0x120>
  402b40:	2b03      	cmp	r3, #3
  402b42:	d078      	beq.n	402c36 <udd_ep_alloc+0x126>
		return false;
	}
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  402b44:	f1a3 0404 	sub.w	r4, r3, #4
  402b48:	b2e4      	uxtb	r4, r4
  402b4a:	2c01      	cmp	r4, #1
  402b4c:	bf8c      	ite	hi
  402b4e:	2440      	movhi	r4, #64	; 0x40
  402b50:	f44f 7400 	movls.w	r4, #512	; 0x200
  402b54:	4294      	cmp	r4, r2
  402b56:	db71      	blt.n	402c3c <udd_ep_alloc+0x12c>
		return false;
	}
	ptr_job = &udd_ep_job[ep - 1];
  402b58:	f103 35ff 	add.w	r5, r3, #4294967295
  402b5c:	eb05 0485 	add.w	r4, r5, r5, lsl #2
  402b60:	f641 351c 	movw	r5, #6940	; 0x1b1c
  402b64:	f2c2 0500 	movt	r5, #8192	; 0x2000
  402b68:	eb05 0484 	add.w	r4, r5, r4, lsl #2

	// Set endpoint size
	ptr_job->size = MaxEndpointSize;
  402b6c:	8a25      	ldrh	r5, [r4, #16]
  402b6e:	f362 0509 	bfi	r5, r2, #0, #10
  402b72:	8225      	strh	r5, [r4, #16]
	ptr_job->b_buf_end = false;
  402b74:	7c62      	ldrb	r2, [r4, #17]
	ptr_job->b_stall_requested = false;
  402b76:	f002 057f 	and.w	r5, r2, #127	; 0x7f
  402b7a:	f36f 1545 	bfc	r5, #5, #1
  402b7e:	7465      	strb	r5, [r4, #17]
	if (b_dir_in) {
  402b80:	09c0      	lsrs	r0, r0, #7
  402b82:	d003      	beq.n	402b8c <udd_ep_alloc+0x7c>
		// No data buffered in FIFO
		ptr_job->bank = 0;
  402b84:	b2ea      	uxtb	r2, r5
  402b86:	f36f 0283 	bfc	r2, #2, #2
  402b8a:	7462      	strb	r2, [r4, #17]
	}

	// Reset FIFOs
	udd_reset_endpoint(ep);
  402b8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  402b90:	f2c4 0203 	movt	r2, #16387	; 0x4003
  402b94:	6a95      	ldr	r5, [r2, #40]	; 0x28
  402b96:	f04f 0401 	mov.w	r4, #1
  402b9a:	fa04 f403 	lsl.w	r4, r4, r3
  402b9e:	4325      	orrs	r5, r4
  402ba0:	6295      	str	r5, [r2, #40]	; 0x28
  402ba2:	6a95      	ldr	r5, [r2, #40]	; 0x28
  402ba4:	ea25 0404 	bic.w	r4, r5, r4
  402ba8:	6294      	str	r4, [r2, #40]	; 0x28
	// Set configuration of new endpoint
	udd_configure_endpoint(ep,
  402baa:	f103 040c 	add.w	r4, r3, #12
  402bae:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
  402bb2:	9200      	str	r2, [sp, #0]
  402bb4:	9a00      	ldr	r2, [sp, #0]
  402bb6:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402bba:	9200      	str	r2, [sp, #0]
  402bbc:	9a00      	ldr	r2, [sp, #0]
  402bbe:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  402bc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  402bc6:	9200      	str	r2, [sp, #0]
  402bc8:	b140      	cbz	r0, 402bdc <udd_ep_alloc+0xcc>
  402bca:	f041 0204 	orr.w	r2, r1, #4
  402bce:	ea4f 2002 	mov.w	r0, r2, lsl #8
  402bd2:	f400 61e0 	and.w	r1, r0, #1792	; 0x700
  402bd6:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
  402bda:	e005      	b.n	402be8 <udd_ep_alloc+0xd8>
  402bdc:	ea4f 2101 	mov.w	r1, r1, lsl #8
  402be0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
  402be4:	f440 4100 	orr.w	r1, r0, #32768	; 0x8000
  402be8:	9a00      	ldr	r2, [sp, #0]
  402bea:	ea41 0002 	orr.w	r0, r1, r2
  402bee:	9000      	str	r0, [sp, #0]
  402bf0:	9900      	ldr	r1, [sp, #0]
  402bf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  402bf6:	f2c4 0203 	movt	r2, #16387	; 0x4003
  402bfa:	f103 030c 	add.w	r3, r3, #12
  402bfe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  402c02:	f04f 0300 	mov.w	r3, #0
  402c06:	9301      	str	r3, [sp, #4]
  402c08:	9801      	ldr	r0, [sp, #4]
  402c0a:	2813      	cmp	r0, #19
  402c0c:	d819      	bhi.n	402c42 <udd_ep_alloc+0x132>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402c0e:	bf00      	nop
  402c10:	9901      	ldr	r1, [sp, #4]
  402c12:	f101 0101 	add.w	r1, r1, #1
  402c16:	9101      	str	r1, [sp, #4]
  402c18:	9a01      	ldr	r2, [sp, #4]
  402c1a:	2a13      	cmp	r2, #19
  402c1c:	d9f7      	bls.n	402c0e <udd_ep_alloc+0xfe>
		(b_dir_in ? (bmAttributes | 0x4) : bmAttributes),
		0);
	return true;
  402c1e:	f04f 0001 	mov.w	r0, #1
  402c22:	e010      	b.n	402c46 <udd_ep_alloc+0x136>
	b_dir_in = ep & USB_EP_DIR_IN;
	b_iso = (bmAttributes&USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS;
	ep = ep & USB_EP_ADDR_MASK;

	if (ep > USB_DEVICE_MAX_EP) {
		return false;
  402c24:	f04f 0000 	mov.w	r0, #0
  402c28:	e00d      	b.n	402c46 <udd_ep_alloc+0x136>
	}
	if (Is_udd_endpoint_enabled(ep)) {
		return false;
  402c2a:	f04f 0000 	mov.w	r0, #0
  402c2e:	e00a      	b.n	402c46 <udd_ep_alloc+0x136>
	}

	// Check parameters
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
		return false;
  402c30:	f04f 0000 	mov.w	r0, #0
  402c34:	e007      	b.n	402c46 <udd_ep_alloc+0x136>
  402c36:	f04f 0000 	mov.w	r0, #0
  402c3a:	e004      	b.n	402c46 <udd_ep_alloc+0x136>
	}
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
		return false;
  402c3c:	f04f 0000 	mov.w	r0, #0
  402c40:	e001      	b.n	402c46 <udd_ep_alloc+0x136>
	udd_reset_endpoint(ep);
	// Set configuration of new endpoint
	udd_configure_endpoint(ep,
		(b_dir_in ? (bmAttributes | 0x4) : bmAttributes),
		0);
	return true;
  402c42:	f04f 0001 	mov.w	r0, #1
}
  402c46:	b002      	add	sp, #8
  402c48:	bc30      	pop	{r4, r5}
  402c4a:	4770      	bx	lr

00402c4c <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
  402c4c:	b508      	push	{r3, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402c4e:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  402c52:	2b03      	cmp	r3, #3
  402c54:	d810      	bhi.n	402c78 <udd_ep_free+0x2c>
		return;
	}
	udd_disable_endpoint(ep_index);
  402c56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  402c5a:	f2c4 0203 	movt	r2, #16387	; 0x4003
  402c5e:	f103 030c 	add.w	r3, r3, #12
  402c62:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
  402c66:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
  402c6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	udd_ep_abort_job(ep);
  402c6e:	f241 7349 	movw	r3, #5961	; 0x1749
  402c72:	f2c0 0340 	movt	r3, #64	; 0x40
  402c76:	4798      	blx	r3
  402c78:	bd08      	pop	{r3, pc}
  402c7a:	bf00      	nop

00402c7c <udd_ep_is_halted>:
}


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402c7c:	f000 000f 	and.w	r0, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
  402c80:	2803      	cmp	r0, #3
  402c82:	d81f      	bhi.n	402cc4 <udd_ep_is_halted+0x48>


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  402c84:	f100 33ff 	add.w	r3, r0, #4294967295
  402c88:	eb03 0183 	add.w	r1, r3, r3, lsl #2
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	return ptr_job->b_stall_requested ||
  402c8c:	f641 321c 	movw	r2, #6940	; 0x1b1c
  402c90:	f2c2 0200 	movt	r2, #8192	; 0x2000
  402c94:	eb02 0381 	add.w	r3, r2, r1, lsl #2
  402c98:	7c59      	ldrb	r1, [r3, #17]
  402c9a:	f001 0220 	and.w	r2, r1, #32
  402c9e:	b2d3      	uxtb	r3, r2
  402ca0:	b96b      	cbnz	r3, 402cbe <udd_ep_is_halted+0x42>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  402ca2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  402ca6:	f2c4 0103 	movt	r1, #16387	; 0x4003
  402caa:	f100 000c 	add.w	r0, r0, #12
  402cae:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	return ptr_job->b_stall_requested ||
  402cb2:	f010 0f28 	tst.w	r0, #40	; 0x28
  402cb6:	bf0c      	ite	eq
  402cb8:	2000      	moveq	r0, #0
  402cba:	2001      	movne	r0, #1
  402cbc:	4770      	bx	lr
  402cbe:	f04f 0001 	mov.w	r0, #1
  402cc2:	4770      	bx	lr
bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
  402cc4:	f04f 0000 	mov.w	r0, #0
	}
	return ptr_job->b_stall_requested ||
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
}
  402cc8:	4770      	bx	lr
  402cca:	bf00      	nop

00402ccc <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
  402ccc:	b410      	push	{r4}
  402cce:	b083      	sub	sp, #12
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402cd0:	f000 020f 	and.w	r2, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
  402cd4:	2a03      	cmp	r2, #3
  402cd6:	d87d      	bhi.n	402dd4 <udd_ep_set_halt+0x108>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402cd8:	f3ef 8110 	mrs	r1, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  402cdc:	f1d1 0101 	rsbs	r1, r1, #1
  402ce0:	bf38      	it	cc
  402ce2:	2100      	movcc	r1, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402ce4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402ce6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402cea:	f240 43ac 	movw	r3, #1196	; 0x4ac
  402cee:	f2c2 0300 	movt	r3, #8192	; 0x2000
  402cf2:	f04f 0400 	mov.w	r4, #0
  402cf6:	701c      	strb	r4, [r3, #0]
		return false;
	}
	flags = cpu_irq_save();
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  402cf8:	f010 0f80 	tst.w	r0, #128	; 0x80
  402cfc:	d033      	beq.n	402d66 <udd_ep_set_halt+0x9a>

bool udd_ep_set_halt(udd_ep_id_t ep)
{
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  402cfe:	f102 30ff 	add.w	r0, r2, #4294967295
  402d02:	eb00 0380 	add.w	r3, r0, r0, lsl #2
  402d06:	f641 341c 	movw	r4, #6940	; 0x1b1c
  402d0a:	f2c2 0400 	movt	r4, #8192	; 0x2000
  402d0e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	flags = cpu_irq_save();
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  402d12:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  402d16:	f2c4 0003 	movt	r0, #16387	; 0x4003
  402d1a:	f102 040c 	add.w	r4, r2, #12
  402d1e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
  402d22:	f010 0f10 	tst.w	r0, #16
  402d26:	d104      	bne.n	402d32 <udd_ep_set_halt+0x66>
				|| ptr_job->bank > 1)) {
  402d28:	7c58      	ldrb	r0, [r3, #17]
  402d2a:	f3c0 0081 	ubfx	r0, r0, #2, #2
  402d2e:	2801      	cmp	r0, #1
  402d30:	dd19      	ble.n	402d66 <udd_ep_set_halt+0x9a>
		// Halt until banks sent
		ptr_job->b_stall_requested = true;
  402d32:	7c58      	ldrb	r0, [r3, #17]
  402d34:	f040 0020 	orr.w	r0, r0, #32
  402d38:	7458      	strb	r0, [r3, #17]
		udd_enable_endpoint_interrupt(ep_index);
  402d3a:	f04f 0301 	mov.w	r3, #1
  402d3e:	fa03 f202 	lsl.w	r2, r3, r2
  402d42:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  402d46:	f2c4 0003 	movt	r0, #16387	; 0x4003
  402d4a:	6102      	str	r2, [r0, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402d4c:	2900      	cmp	r1, #0
  402d4e:	d044      	beq.n	402dda <udd_ep_set_halt+0x10e>
		cpu_irq_enable();
  402d50:	f04f 0001 	mov.w	r0, #1
  402d54:	f240 41ac 	movw	r1, #1196	; 0x4ac
  402d58:	f2c2 0100 	movt	r1, #8192	; 0x2000
  402d5c:	7008      	strb	r0, [r1, #0]
  402d5e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  402d62:	b662      	cpsie	i
  402d64:	e03e      	b.n	402de4 <udd_ep_set_halt+0x118>
		cpu_irq_restore(flags);
		return true;
	} else {
		// Stall endpoint
		udd_enable_stall_handshake(ep_index);
  402d66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  402d6a:	f2c4 0303 	movt	r3, #16387	; 0x4003
  402d6e:	f102 000c 	add.w	r0, r2, #12
  402d72:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  402d76:	9400      	str	r4, [sp, #0]
  402d78:	9c00      	ldr	r4, [sp, #0]
  402d7a:	f044 044f 	orr.w	r4, r4, #79	; 0x4f
  402d7e:	9400      	str	r4, [sp, #0]
  402d80:	9c00      	ldr	r4, [sp, #0]
  402d82:	f044 0420 	orr.w	r4, r4, #32
  402d86:	9400      	str	r4, [sp, #0]
  402d88:	9c00      	ldr	r4, [sp, #0]
  402d8a:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  402d8e:	f04f 0300 	mov.w	r3, #0
  402d92:	9301      	str	r3, [sp, #4]
  402d94:	9801      	ldr	r0, [sp, #4]
  402d96:	2813      	cmp	r0, #19
  402d98:	d807      	bhi.n	402daa <udd_ep_set_halt+0xde>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402d9a:	bf00      	nop
  402d9c:	9b01      	ldr	r3, [sp, #4]
  402d9e:	f103 0301 	add.w	r3, r3, #1
  402da2:	9301      	str	r3, [sp, #4]
  402da4:	9801      	ldr	r0, [sp, #4]
  402da6:	2813      	cmp	r0, #19
  402da8:	d9f7      	bls.n	402d9a <udd_ep_set_halt+0xce>
		udd_enable_endpoint_interrupt(ep_index);
  402daa:	f04f 0301 	mov.w	r3, #1
  402dae:	fa03 f202 	lsl.w	r2, r3, r2
  402db2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  402db6:	f2c4 0003 	movt	r0, #16387	; 0x4003
  402dba:	6102      	str	r2, [r0, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402dbc:	b181      	cbz	r1, 402de0 <udd_ep_set_halt+0x114>
		cpu_irq_enable();
  402dbe:	f04f 0001 	mov.w	r0, #1
  402dc2:	f240 41ac 	movw	r1, #1196	; 0x4ac
  402dc6:	f2c2 0100 	movt	r1, #8192	; 0x2000
  402dca:	7008      	strb	r0, [r1, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402dcc:	f3bf 8f5f 	dmb	sy
  402dd0:	b662      	cpsie	i
  402dd2:	e007      	b.n	402de4 <udd_ep_set_halt+0x118>
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
  402dd4:	f04f 0000 	mov.w	r0, #0
  402dd8:	e004      	b.n	402de4 <udd_ep_set_halt+0x118>
				|| ptr_job->bank > 1)) {
		// Halt until banks sent
		ptr_job->b_stall_requested = true;
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
		return true;
  402dda:	f04f 0001 	mov.w	r0, #1
  402dde:	e001      	b.n	402de4 <udd_ep_set_halt+0x118>
		// Stall endpoint
		udd_enable_stall_handshake(ep_index);
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
	}
	return true;
  402de0:	f04f 0001 	mov.w	r0, #1
}
  402de4:	b003      	add	sp, #12
  402de6:	bc10      	pop	{r4}
  402de8:	4770      	bx	lr
  402dea:	bf00      	nop

00402dec <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
  402dec:	b510      	push	{r4, lr}
  402dee:	b084      	sub	sp, #16
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
  402df0:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  402df4:	2803      	cmp	r0, #3
  402df6:	d873      	bhi.n	402ee0 <udd_ep_clear_halt+0xf4>
		return false;
	ptr_job = &udd_ep_job[ep - 1];
  402df8:	f100 32ff 	add.w	r2, r0, #4294967295
  402dfc:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  402e00:	f641 331c 	movw	r3, #6940	; 0x1b1c
  402e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
  402e08:	eb03 0281 	add.w	r2, r3, r1, lsl #2

	ptr_job->b_stall_requested = false;
  402e0c:	7c51      	ldrb	r1, [r2, #17]
  402e0e:	f36f 1145 	bfc	r1, #5, #1
  402e12:	7451      	strb	r1, [r2, #17]
	if (Is_udd_endpoint_stall_requested(ep)) {
  402e14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  402e18:	f2c4 0303 	movt	r3, #16387	; 0x4003
  402e1c:	f100 010c 	add.w	r1, r0, #12
  402e20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  402e24:	f013 0f20 	tst.w	r3, #32
  402e28:	d05d      	beq.n	402ee6 <udd_ep_clear_halt+0xfa>
		// Remove stall
		udd_disable_stall_handshake(ep);
  402e2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  402e2e:	f2c4 0303 	movt	r3, #16387	; 0x4003
  402e32:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
  402e36:	9400      	str	r4, [sp, #0]
  402e38:	9c00      	ldr	r4, [sp, #0]
  402e3a:	f044 044f 	orr.w	r4, r4, #79	; 0x4f
  402e3e:	9400      	str	r4, [sp, #0]
  402e40:	9c00      	ldr	r4, [sp, #0]
  402e42:	f024 0420 	bic.w	r4, r4, #32
  402e46:	9400      	str	r4, [sp, #0]
  402e48:	9c00      	ldr	r4, [sp, #0]
  402e4a:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
  402e4e:	f04f 0100 	mov.w	r1, #0
  402e52:	9101      	str	r1, [sp, #4]
  402e54:	9b01      	ldr	r3, [sp, #4]
  402e56:	2b13      	cmp	r3, #19
  402e58:	d807      	bhi.n	402e6a <udd_ep_clear_halt+0x7e>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402e5a:	bf00      	nop
  402e5c:	9c01      	ldr	r4, [sp, #4]
  402e5e:	f104 0401 	add.w	r4, r4, #1
  402e62:	9401      	str	r4, [sp, #4]
  402e64:	9901      	ldr	r1, [sp, #4]
  402e66:	2913      	cmp	r1, #19
  402e68:	d9f7      	bls.n	402e5a <udd_ep_clear_halt+0x6e>
		// Reset FIFO and data toggle (after stall cleared)
		udd_reset_endpoint(ep);
  402e6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  402e6e:	f2c4 0303 	movt	r3, #16387	; 0x4003
  402e72:	6a9c      	ldr	r4, [r3, #40]	; 0x28
  402e74:	f04f 0101 	mov.w	r1, #1
  402e78:	fa01 f100 	lsl.w	r1, r1, r0
  402e7c:	430c      	orrs	r4, r1
  402e7e:	629c      	str	r4, [r3, #40]	; 0x28
  402e80:	6a9c      	ldr	r4, [r3, #40]	; 0x28
  402e82:	ea24 0101 	bic.w	r1, r4, r1
  402e86:	6299      	str	r1, [r3, #40]	; 0x28
		// Clear stall status
		udd_ack_stall(ep);
  402e88:	f100 000c 	add.w	r0, r0, #12
  402e8c:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
  402e90:	9102      	str	r1, [sp, #8]
  402e92:	9902      	ldr	r1, [sp, #8]
  402e94:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  402e98:	9102      	str	r1, [sp, #8]
  402e9a:	9902      	ldr	r1, [sp, #8]
  402e9c:	f021 0108 	bic.w	r1, r1, #8
  402ea0:	9102      	str	r1, [sp, #8]
  402ea2:	9902      	ldr	r1, [sp, #8]
  402ea4:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
  402ea8:	f04f 0000 	mov.w	r0, #0
  402eac:	9003      	str	r0, [sp, #12]
  402eae:	9b03      	ldr	r3, [sp, #12]
  402eb0:	2b13      	cmp	r3, #19
  402eb2:	d807      	bhi.n	402ec4 <udd_ep_clear_halt+0xd8>
  402eb4:	bf00      	nop
  402eb6:	9903      	ldr	r1, [sp, #12]
  402eb8:	f101 0101 	add.w	r1, r1, #1
  402ebc:	9103      	str	r1, [sp, #12]
  402ebe:	9803      	ldr	r0, [sp, #12]
  402ec0:	2813      	cmp	r0, #19
  402ec2:	d9f7      	bls.n	402eb4 <udd_ep_clear_halt+0xc8>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
  402ec4:	7c53      	ldrb	r3, [r2, #17]
  402ec6:	f003 0110 	and.w	r1, r3, #16
  402eca:	b2c8      	uxtb	r0, r1
  402ecc:	b170      	cbz	r0, 402eec <udd_ep_clear_halt+0x100>
			ptr_job->busy = false;
  402ece:	7c53      	ldrb	r3, [r2, #17]
  402ed0:	f36f 1304 	bfc	r3, #4, #1
  402ed4:	7453      	strb	r3, [r2, #17]
			ptr_job->call_nohalt();
  402ed6:	6812      	ldr	r2, [r2, #0]
  402ed8:	4790      	blx	r2
		}
	}
	return true;
  402eda:	f04f 0001 	mov.w	r0, #1
  402ede:	e007      	b.n	402ef0 <udd_ep_clear_halt+0x104>
{
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
		return false;
  402ee0:	f04f 0000 	mov.w	r0, #0
  402ee4:	e004      	b.n	402ef0 <udd_ep_clear_halt+0x104>
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
  402ee6:	f04f 0001 	mov.w	r0, #1
  402eea:	e001      	b.n	402ef0 <udd_ep_clear_halt+0x104>
  402eec:	f04f 0001 	mov.w	r0, #1
}
  402ef0:	b004      	add	sp, #16
  402ef2:	bd10      	pop	{r4, pc}

00402ef4 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  402ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	udd_ep_job_t *ptr_job;
	irqflags_t flags;
	bool b_dir_in = ep & USB_EP_DIR_IN;

	ep &= USB_EP_ADDR_MASK;
  402ef8:	f000 040f 	and.w	r4, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
  402efc:	2c03      	cmp	r4, #3
  402efe:	f200 80af 	bhi.w	403060 <udd_ep_run+0x16c>
		return false;
	}
	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
  402f02:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  402f06:	f2c4 0503 	movt	r5, #16387	; 0x4003
  402f0a:	f104 060c 	add.w	r6, r4, #12
  402f0e:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
  402f12:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  402f16:	f000 80a7 	beq.w	403068 <udd_ep_run+0x174>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}
	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
  402f1a:	f104 36ff 	add.w	r6, r4, #4294967295
  402f1e:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  402f22:	f641 351c 	movw	r5, #6940	; 0x1b1c
  402f26:	f2c2 0500 	movt	r5, #8192	; 0x2000
  402f2a:	eb05 0587 	add.w	r5, r5, r7, lsl #2

	if ((!Is_udd_endpoint_enabled(ep))
			|| ptr_job->b_stall_requested
  402f2e:	7c6e      	ldrb	r6, [r5, #17]
  402f30:	f006 0720 	and.w	r7, r6, #32
  402f34:	b2ff      	uxtb	r7, r7
  402f36:	2f00      	cmp	r7, #0
  402f38:	f040 809a 	bne.w	403070 <udd_ep_run+0x17c>
			|| Is_udd_endpoint_stall_requested(ep)) {
  402f3c:	f44f 4780 	mov.w	r7, #16384	; 0x4000
  402f40:	f2c4 0703 	movt	r7, #16387	; 0x4003
  402f44:	f104 0c0c 	add.w	ip, r4, #12
  402f48:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
  402f4c:	f017 0f20 	tst.w	r7, #32
  402f50:	f040 8092 	bne.w	403078 <udd_ep_run+0x184>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402f54:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  402f58:	f1d7 0701 	rsbs	r7, r7, #1
  402f5c:	bf38      	it	cc
  402f5e:	2700      	movcc	r7, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402f60:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402f62:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402f66:	f240 4cac 	movw	ip, #1196	; 0x4ac
  402f6a:	f2c2 0c00 	movt	ip, #8192	; 0x2000
  402f6e:	f04f 0800 	mov.w	r8, #0
  402f72:	f88c 8000 	strb.w	r8, [ip]
		return false; // Endpoint is halted
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
  402f76:	f006 0610 	and.w	r6, r6, #16
  402f7a:	b2f6      	uxtb	r6, r6
  402f7c:	b15e      	cbz	r6, 402f96 <udd_ep_run+0xa2>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402f7e:	2f00      	cmp	r7, #0
  402f80:	d07e      	beq.n	403080 <udd_ep_run+0x18c>
		cpu_irq_enable();
  402f82:	f04f 0301 	mov.w	r3, #1
  402f86:	f88c 3000 	strb.w	r3, [ip]
  402f8a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  402f8e:	b662      	cpsie	i
		cpu_irq_restore(flags);
		return false; // Job already on going
  402f90:	4640      	mov	r0, r8
  402f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	ptr_job->busy = true;
  402f96:	7c6e      	ldrb	r6, [r5, #17]
  402f98:	f046 0610 	orr.w	r6, r6, #16
  402f9c:	746e      	strb	r6, [r5, #17]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402f9e:	b14f      	cbz	r7, 402fb4 <udd_ep_run+0xc0>
		cpu_irq_enable();
  402fa0:	f240 46ac 	movw	r6, #1196	; 0x4ac
  402fa4:	f2c2 0600 	movt	r6, #8192	; 0x2000
  402fa8:	f04f 0701 	mov.w	r7, #1
  402fac:	7037      	strb	r7, [r6, #0]
  402fae:	f3bf 8f5f 	dmb	sy
  402fb2:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
  402fb4:	606a      	str	r2, [r5, #4]
	ptr_job->buf_size = buf_size;
  402fb6:	60ab      	str	r3, [r5, #8]
	ptr_job->buf_cnt = 0;
  402fb8:	f04f 0200 	mov.w	r2, #0
  402fbc:	60ea      	str	r2, [r5, #12]
	ptr_job->call_trans = callback;
  402fbe:	9a06      	ldr	r2, [sp, #24]
  402fc0:	602a      	str	r2, [r5, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  402fc2:	b921      	cbnz	r1, 402fce <udd_ep_run+0xda>
  402fc4:	f1d3 0101 	rsbs	r1, r3, #1
  402fc8:	bf38      	it	cc
  402fca:	2100      	movcc	r1, #0
  402fcc:	e001      	b.n	402fd2 <udd_ep_run+0xde>
  402fce:	f04f 0101 	mov.w	r1, #1
  402fd2:	7c6b      	ldrb	r3, [r5, #17]
  402fd4:	f361 1386 	bfi	r3, r1, #6, #1
	ptr_job->b_buf_end = false;
  402fd8:	f36f 13c7 	bfc	r3, #7, #1
  402fdc:	746b      	strb	r3, [r5, #17]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402fde:	f3ef 8510 	mrs	r5, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402fe2:	b672      	cpsid	i
  402fe4:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  402fe8:	f240 41ac 	movw	r1, #1196	; 0x4ac
  402fec:	f2c2 0100 	movt	r1, #8192	; 0x2000
  402ff0:	f04f 0200 	mov.w	r2, #0
  402ff4:	700a      	strb	r2, [r1, #0]

	flags = cpu_irq_save();
	udd_enable_endpoint_interrupt(ep);
  402ff6:	f04f 0101 	mov.w	r1, #1
  402ffa:	fa01 f104 	lsl.w	r1, r1, r4
  402ffe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  403002:	f2c4 0303 	movt	r3, #16387	; 0x4003
  403006:	6119      	str	r1, [r3, #16]
	// Request first transfer
	if (b_dir_in) {
  403008:	f010 0f80 	tst.w	r0, #128	; 0x80
  40300c:	d01b      	beq.n	403046 <udd_ep_run+0x152>
		if (Is_udd_in_pending(ep)) {
  40300e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  403012:	f2c4 0003 	movt	r0, #16387	; 0x4003
  403016:	f104 020c 	add.w	r2, r4, #12
  40301a:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
  40301e:	f011 0f11 	tst.w	r1, #17
  403022:	d110      	bne.n	403046 <udd_ep_run+0x152>
			// Append more data (handled in interrupt service)
		} else {
			// Start new, try to fill 1~2 banks before handling status
			if (udd_ep_in_sent(ep, true)) {
  403024:	4620      	mov	r0, r4
  403026:	f04f 0101 	mov.w	r1, #1
  40302a:	f641 0379 	movw	r3, #6265	; 0x1879
  40302e:	f2c0 0340 	movt	r3, #64	; 0x40
  403032:	4798      	blx	r3
  403034:	b138      	cbz	r0, 403046 <udd_ep_run+0x152>
				// Over one bank
				udd_ep_in_sent(ep, false);
  403036:	4620      	mov	r0, r4
  403038:	f04f 0100 	mov.w	r1, #0
  40303c:	f641 0279 	movw	r2, #6265	; 0x1879
  403040:	f2c0 0240 	movt	r2, #64	; 0x40
  403044:	4790      	blx	r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  403046:	b9fd      	cbnz	r5, 403088 <udd_ep_run+0x194>
		cpu_irq_enable();
  403048:	f04f 0001 	mov.w	r0, #1
  40304c:	f240 41ac 	movw	r1, #1196	; 0x4ac
  403050:	f2c2 0100 	movt	r1, #8192	; 0x2000
  403054:	7008      	strb	r0, [r1, #0]
  403056:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  40305a:	b662      	cpsie	i
  40305c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	irqflags_t flags;
	bool b_dir_in = ep & USB_EP_DIR_IN;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
  403060:	f04f 0000 	mov.w	r0, #0
  403064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
			|| ptr_job->b_stall_requested
			|| Is_udd_endpoint_stall_requested(ep)) {
		return false; // Endpoint is halted
  403068:	f04f 0000 	mov.w	r0, #0
  40306c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403070:	f04f 0000 	mov.w	r0, #0
  403074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403078:	f04f 0000 	mov.w	r0, #0
  40307c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false; // Job already on going
  403080:	f04f 0000 	mov.w	r0, #0
  403084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else {
		// Waiting for OUT received interrupt
	}
	cpu_irq_restore(flags);

	return true;
  403088:	f04f 0001 	mov.w	r0, #1
}
  40308c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00403090 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
  403090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403094:	b084      	sub	sp, #16
	bool b_dir_in = ep & USB_EP_DIR_IN;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
  403096:	f000 040f 	and.w	r4, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  40309a:	2c03      	cmp	r4, #3
  40309c:	f200 80e1 	bhi.w	403262 <udd_ep_abort+0x1d2>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4030a0:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  4030a4:	b672      	cpsid	i
  4030a6:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4030aa:	f240 43ac 	movw	r3, #1196	; 0x4ac
  4030ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4030b2:	f04f 0100 	mov.w	r1, #0
  4030b6:	7019      	strb	r1, [r3, #0]
		return;

	// Disable interrupts
	flags = cpu_irq_save();
	udd_disable_endpoint_interrupt(ep);
  4030b8:	4625      	mov	r5, r4
  4030ba:	f04f 0601 	mov.w	r6, #1
  4030be:	fa06 f604 	lsl.w	r6, r6, r4
  4030c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  4030c6:	f2c4 0303 	movt	r3, #16387	; 0x4003
  4030ca:	615e      	str	r6, [r3, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4030cc:	b94a      	cbnz	r2, 4030e2 <udd_ep_abort+0x52>
		cpu_irq_enable();
  4030ce:	f240 41ac 	movw	r1, #1196	; 0x4ac
  4030d2:	f2c2 0100 	movt	r1, #8192	; 0x2000
  4030d6:	f04f 0201 	mov.w	r2, #1
  4030da:	700a      	strb	r2, [r1, #0]
  4030dc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  4030e0:	b662      	cpsie	i
	cpu_irq_restore(flags);
	// Clear pending statuses
	if (b_dir_in) {
  4030e2:	f010 0f80 	tst.w	r0, #128	; 0x80
  4030e6:	d10c      	bne.n	403102 <udd_ep_abort+0x72>
		udd_ack_in_sent(ep);
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
  4030e8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4030ec:	f2c4 0003 	movt	r0, #16387	; 0x4003
  4030f0:	f104 030c 	add.w	r3, r4, #12
  4030f4:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
  4030f8:	f011 0f42 	tst.w	r1, #66	; 0x42
  4030fc:	f040 808e 	bne.w	40321c <udd_ep_abort+0x18c>
  403100:	e09d      	b.n	40323e <udd_ep_abort+0x1ae>
	udd_disable_endpoint_interrupt(ep);
	cpu_irq_restore(flags);
	// Clear pending statuses
	if (b_dir_in) {
		// Kill banks
		if (Is_udd_transmit_ready(ep)) {
  403102:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  403106:	f2c4 0303 	movt	r3, #16387	; 0x4003
  40310a:	f104 020c 	add.w	r2, r4, #12
  40310e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  403112:	f011 0f10 	tst.w	r1, #16
  403116:	d050      	beq.n	4031ba <udd_ep_abort+0x12a>
			udd_kill_data_in_fifo(ep,
  403118:	b36c      	cbz	r4, 403176 <udd_ep_abort+0xe6>
  40311a:	2c03      	cmp	r4, #3
  40311c:	d02b      	beq.n	403176 <udd_ep_abort+0xe6>
  40311e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  403122:	f2c4 0003 	movt	r0, #16387	; 0x4003
  403126:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
  40312a:	f023 0110 	bic.w	r1, r3, #16
  40312e:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  403132:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  403136:	f2c4 0203 	movt	r2, #16387	; 0x4003
  40313a:	f105 000c 	add.w	r0, r5, #12
  40313e:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
  403142:	f013 0f10 	tst.w	r3, #16
  403146:	d1f8      	bne.n	40313a <udd_ep_abort+0xaa>
  403148:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  40314c:	f2c4 0003 	movt	r0, #16387	; 0x4003
  403150:	f104 020c 	add.w	r2, r4, #12
  403154:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
  403158:	f041 0310 	orr.w	r3, r1, #16
  40315c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  403160:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  403164:	f2c4 0003 	movt	r0, #16387	; 0x4003
  403168:	f105 020c 	add.w	r2, r5, #12
  40316c:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
  403170:	f011 0f10 	tst.w	r1, #16
  403174:	d0f8      	beq.n	403168 <udd_ep_abort+0xd8>
  403176:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  40317a:	f2c4 0303 	movt	r3, #16387	; 0x4003
  40317e:	f104 000c 	add.w	r0, r4, #12
  403182:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
  403186:	9200      	str	r2, [sp, #0]
  403188:	9900      	ldr	r1, [sp, #0]
  40318a:	f041 024f 	orr.w	r2, r1, #79	; 0x4f
  40318e:	9200      	str	r2, [sp, #0]
  403190:	9900      	ldr	r1, [sp, #0]
  403192:	f021 0210 	bic.w	r2, r1, #16
  403196:	9200      	str	r2, [sp, #0]
  403198:	9900      	ldr	r1, [sp, #0]
  40319a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
  40319e:	f04f 0300 	mov.w	r3, #0
  4031a2:	9301      	str	r3, [sp, #4]
  4031a4:	9801      	ldr	r0, [sp, #4]
  4031a6:	2813      	cmp	r0, #19
  4031a8:	d807      	bhi.n	4031ba <udd_ep_abort+0x12a>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4031aa:	bf00      	nop
  4031ac:	9a01      	ldr	r2, [sp, #4]
  4031ae:	f102 0201 	add.w	r2, r2, #1
  4031b2:	9201      	str	r2, [sp, #4]
  4031b4:	9901      	ldr	r1, [sp, #4]
  4031b6:	2913      	cmp	r1, #19
  4031b8:	d9f7      	bls.n	4031aa <udd_ep_abort+0x11a>
					udd_get_endpoint_bank_max_nbr(ep)>1);
		}
		udd_ack_in_sent(ep);
  4031ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  4031be:	f2c4 0303 	movt	r3, #16387	; 0x4003
  4031c2:	f104 000c 	add.w	r0, r4, #12
  4031c6:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
  4031ca:	9202      	str	r2, [sp, #8]
  4031cc:	9902      	ldr	r1, [sp, #8]
  4031ce:	f041 024f 	orr.w	r2, r1, #79	; 0x4f
  4031d2:	9202      	str	r2, [sp, #8]
  4031d4:	9902      	ldr	r1, [sp, #8]
  4031d6:	f021 0201 	bic.w	r2, r1, #1
  4031da:	9202      	str	r2, [sp, #8]
  4031dc:	9902      	ldr	r1, [sp, #8]
  4031de:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
  4031e2:	f04f 0300 	mov.w	r3, #0
  4031e6:	9303      	str	r3, [sp, #12]
  4031e8:	9803      	ldr	r0, [sp, #12]
  4031ea:	2813      	cmp	r0, #19
  4031ec:	d807      	bhi.n	4031fe <udd_ep_abort+0x16e>
  4031ee:	bf00      	nop
  4031f0:	9a03      	ldr	r2, [sp, #12]
  4031f2:	f102 0201 	add.w	r2, r2, #1
  4031f6:	9203      	str	r2, [sp, #12]
  4031f8:	9903      	ldr	r1, [sp, #12]
  4031fa:	2913      	cmp	r1, #19
  4031fc:	d9f7      	bls.n	4031ee <udd_ep_abort+0x15e>
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
  4031fe:	f104 33ff 	add.w	r3, r4, #4294967295
  403202:	eb03 0083 	add.w	r0, r3, r3, lsl #2
  403206:	f641 321c 	movw	r2, #6940	; 0x1b1c
  40320a:	f2c2 0200 	movt	r2, #8192	; 0x2000
  40320e:	eb02 0180 	add.w	r1, r2, r0, lsl #2
  403212:	7c4b      	ldrb	r3, [r1, #17]
  403214:	f36f 0383 	bfc	r3, #2, #2
  403218:	744b      	strb	r3, [r1, #17]
  40321a:	e010      	b.n	40323e <udd_ep_abort+0x1ae>
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
			udd_ep_ack_out_received(ep);
  40321c:	f241 7875 	movw	r8, #6005	; 0x1775
  403220:	f2c0 0840 	movt	r8, #64	; 0x40
		udd_ack_in_sent(ep);
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
  403224:	f44f 4780 	mov.w	r7, #16384	; 0x4000
  403228:	f2c4 0703 	movt	r7, #16387	; 0x4003
			udd_ep_ack_out_received(ep);
  40322c:	4620      	mov	r0, r4
  40322e:	47c0      	blx	r8
		udd_ack_in_sent(ep);
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
  403230:	f105 020c 	add.w	r2, r5, #12
  403234:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
  403238:	f010 0f42 	tst.w	r0, #66	; 0x42
  40323c:	d1f6      	bne.n	40322c <udd_ep_abort+0x19c>
			udd_ep_ack_out_received(ep);
		}
	}
	// Reset FIFO and data toggle
	udd_reset_endpoint(ep);
  40323e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  403242:	f2c4 0003 	movt	r0, #16387	; 0x4003
  403246:	6a82      	ldr	r2, [r0, #40]	; 0x28
  403248:	ea46 0102 	orr.w	r1, r6, r2
  40324c:	6281      	str	r1, [r0, #40]	; 0x28
  40324e:	6a83      	ldr	r3, [r0, #40]	; 0x28
  403250:	ea23 0606 	bic.w	r6, r3, r6
  403254:	6286      	str	r6, [r0, #40]	; 0x28
	// Abort job
	udd_ep_abort_job(ep);
  403256:	4620      	mov	r0, r4
  403258:	f241 7249 	movw	r2, #5961	; 0x1749
  40325c:	f2c0 0240 	movt	r2, #64	; 0x40
  403260:	4790      	blx	r2
}
  403262:	b004      	add	sp, #16
  403264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00403268 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
  403268:	b570      	push	{r4, r5, r6, lr}
  40326a:	b082      	sub	sp, #8
  40326c:	4606      	mov	r6, r0
	usart_spi_select_device(SSD1306_USART_SPI, &device);
	ssd1306_sel_cmd();
	usart_spi_transmit(SSD1306_USART_SPI, command);
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  40326e:	ac02      	add	r4, sp, #8
  403270:	f04f 0302 	mov.w	r3, #2
  403274:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  403278:	f44f 4500 	mov.w	r5, #32768	; 0x8000
  40327c:	f2c4 0500 	movt	r5, #16384	; 0x4000
  403280:	4628      	mov	r0, r5
  403282:	4621      	mov	r1, r4
  403284:	f643 3265 	movw	r2, #15205	; 0x3b65
  403288:	f2c0 0240 	movt	r2, #64	; 0x40
  40328c:	4790      	blx	r2
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40328e:	f44f 5090 	mov.w	r0, #4608	; 0x1200
  403292:	f2c4 000e 	movt	r0, #16398	; 0x400e
  403296:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  40329a:	6341      	str	r1, [r0, #52]	; 0x34
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40329c:	60ee      	str	r6, [r5, #12]
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
  40329e:	f04f 0056 	mov.w	r0, #86	; 0x56
  4032a2:	f240 0301 	movw	r3, #1
  4032a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4032aa:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  4032ac:	4628      	mov	r0, r5
  4032ae:	4621      	mov	r1, r4
  4032b0:	f643 32a1 	movw	r2, #15265	; 0x3ba1
  4032b4:	f2c0 0240 	movt	r2, #64	; 0x40
  4032b8:	4790      	blx	r2
#endif
}
  4032ba:	b002      	add	sp, #8
  4032bc:	bd70      	pop	{r4, r5, r6, pc}
  4032be:	bf00      	nop

004032c0 <SVC_Handler>:
/*  
 * Copies either the PSP or the MSP address into the stack, then calls
 * SVC_Switch.
 */
void SVC_Handler(void) {
    asm (
  4032c0:	f01e 0f04 	tst.w	lr, #4
  4032c4:	bf0c      	ite	eq
  4032c6:	f3ef 8008 	mrseq	r0, MSP
  4032ca:	f3ef 8009 	mrsne	r0, PSP
  4032ce:	f000 b833 	b.w	403338 <SVC_Switch>
  4032d2:	4770      	bx	lr

004032d4 <RTT_Handler>:
    rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
}

RAMFUNC;

void RTT_Handler(void) {
  4032d4:	b508      	push	{r3, lr}
    uint32_t ul_status;

    //get rtt status
    ul_status = rtt_get_status(RTT);
  4032d6:	f241 4030 	movw	r0, #5168	; 0x1430
  4032da:	f2c4 000e 	movt	r0, #16398	; 0x400e
  4032de:	f241 2395 	movw	r3, #4757	; 0x1295
  4032e2:	f2c0 0340 	movt	r3, #64	; 0x40
  4032e6:	4798      	blx	r3

    //Check whether the Timer has been incremented since the last read
    if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC) {
  4032e8:	f010 0f02 	tst.w	r0, #2
  4032ec:	d005      	beq.n	4032fa <RTT_Handler+0x26>
        //It doesn't mutates any register!!
        //Why do we need this if-statement then? I dont know!!
        //but if we dont have it, the USB communication dies...	
        pTimerCallback();
  4032ee:	f641 4058 	movw	r0, #7256	; 0x1c58
  4032f2:	f2c2 0000 	movt	r0, #8192	; 0x2000
  4032f6:	6801      	ldr	r1, [r0, #0]
  4032f8:	4788      	blx	r1
  4032fa:	bd08      	pop	{r3, pc}

004032fc <MOSLEDSet>:
//////////////////////////////////////////////////////////////////////////

static volatile bool ledState = LED_OFF; //LED starts off

void MOSLEDSet(int ledNum, bool state) {
    return ioport_set_pin_level(ledNum, ledState = state);
  4032fc:	f240 03ac 	movw	r3, #172	; 0xac
  403300:	f2c2 0300 	movt	r3, #8192	; 0x2000
  403304:	7019      	strb	r1, [r3, #0]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  403306:	ea4f 1250 	mov.w	r2, r0, lsr #5
}

__always_inline static Pio *arch_ioport_port_to_base(ioport_port_t port)
{
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40330a:	f502 1300 	add.w	r3, r2, #2097152	; 0x200000
  40330e:	f203 7207 	addw	r2, r3, #1799	; 0x707
  403312:	ea4f 2342 	mov.w	r3, r2, lsl #9
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
  403316:	b139      	cbz	r1, 403328 <MOSLEDSet+0x2c>
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  403318:	f000 001f 	and.w	r0, r0, #31
  40331c:	f04f 0101 	mov.w	r1, #1
  403320:	fa01 f200 	lsl.w	r2, r1, r0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403324:	631a      	str	r2, [r3, #48]	; 0x30
  403326:	4770      	bx	lr
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  403328:	f000 001f 	and.w	r0, r0, #31
  40332c:	f04f 0101 	mov.w	r1, #1
  403330:	fa01 f200 	lsl.w	r2, r1, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  403334:	635a      	str	r2, [r3, #52]	; 0x34
  403336:	4770      	bx	lr

00403338 <SVC_Switch>:

/*  
 * Uses the passed argument (which is actually the R0 register value)
 * to switch on and call the corresponding case.
 */
void SVC_Switch(unsigned int * svc_args) {
  403338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40333c:	b085      	sub	sp, #20
  40333e:	4604      	mov	r4, r0

    /* The value that this switch statement switches on is svc_args, but using only 
     * the value stored in the R0 register.
     */
    switch (((char *) svc_args[6])[-2]) {
  403340:	6983      	ldr	r3, [r0, #24]
  403342:	f813 0c02 	ldrb.w	r0, [r3, #-2]
  403346:	2816      	cmp	r0, #22
  403348:	f200 8141 	bhi.w	4035ce <SVC_Switch+0x296>
  40334c:	e8df f010 	tbh	[pc, r0, lsl #1]
  403350:	00210017 	.word	0x00210017
  403354:	0033002b 	.word	0x0033002b
  403358:	0043003b 	.word	0x0043003b
  40335c:	0053004b 	.word	0x0053004b
  403360:	008d0086 	.word	0x008d0086
  403364:	013f013f 	.word	0x013f013f
  403368:	013f013f 	.word	0x013f013f
  40336c:	013f013f 	.word	0x013f013f
  403370:	013f013f 	.word	0x013f013f
  403374:	006f005b 	.word	0x006f005b
  403378:	00b8009e 	.word	0x00b8009e
  40337c:	00d9      	.short	0x00d9
            //for LED0 on/off
        case SYSCALL_LED0_OFF: MOSLEDSet(LED0, LED_OFF);
  40337e:	f04f 0057 	mov.w	r0, #87	; 0x57
  403382:	f04f 0101 	mov.w	r1, #1
  403386:	f243 23fd 	movw	r3, #13053	; 0x32fd
  40338a:	f2c0 0340 	movt	r3, #64	; 0x40
  40338e:	4798      	blx	r3
            break;
  403390:	e133      	b.n	4035fa <SVC_Switch+0x2c2>
        case SYSCALL_LED0_ON: MOSLEDSet(LED0, LED_ON);
  403392:	f04f 0057 	mov.w	r0, #87	; 0x57
  403396:	f04f 0100 	mov.w	r1, #0
  40339a:	f243 22fd 	movw	r2, #13053	; 0x32fd
  40339e:	f2c0 0240 	movt	r2, #64	; 0x40
  4033a2:	4790      	blx	r2
            break;
  4033a4:	e129      	b.n	4035fa <SVC_Switch+0x2c2>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4033a6:	f44f 5390 	mov.w	r3, #4608	; 0x1200
  4033aa:	f2c4 030e 	movt	r3, #16398	; 0x400e
  4033ae:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  4033b2:	6319      	str	r1, [r3, #48]	; 0x30
  4033b4:	e121      	b.n	4035fa <SVC_Switch+0x2c2>
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4033b6:	f44f 5090 	mov.w	r0, #4608	; 0x1200
  4033ba:	f2c4 000e 	movt	r0, #16398	; 0x400e
  4033be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4033c2:	6342      	str	r2, [r0, #52]	; 0x34
  4033c4:	e119      	b.n	4035fa <SVC_Switch+0x2c2>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4033c6:	f44f 6360 	mov.w	r3, #3584	; 0xe00
  4033ca:	f2c4 030e 	movt	r3, #16398	; 0x400e
  4033ce:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4033d2:	6319      	str	r1, [r3, #48]	; 0x30
  4033d4:	e111      	b.n	4035fa <SVC_Switch+0x2c2>
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4033d6:	f44f 6060 	mov.w	r0, #3584	; 0xe00
  4033da:	f2c4 000e 	movt	r0, #16398	; 0x400e
  4033de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4033e2:	6342      	str	r2, [r0, #52]	; 0x34
  4033e4:	e109      	b.n	4035fa <SVC_Switch+0x2c2>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4033e6:	f44f 5390 	mov.w	r3, #4608	; 0x1200
  4033ea:	f2c4 030e 	movt	r3, #16398	; 0x400e
  4033ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  4033f2:	6319      	str	r1, [r3, #48]	; 0x30
  4033f4:	e101      	b.n	4035fa <SVC_Switch+0x2c2>
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4033f6:	f44f 5090 	mov.w	r0, #4608	; 0x1200
  4033fa:	f2c4 000e 	movt	r0, #16398	; 0x400e
  4033fe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  403402:	6342      	str	r2, [r0, #52]	; 0x34
  403404:	e0f9      	b.n	4035fa <SVC_Switch+0x2c2>
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  403406:	f04f 00b0 	mov.w	r0, #176	; 0xb0
  40340a:	f243 2569 	movw	r5, #12905	; 0x3269
  40340e:	f2c0 0540 	movt	r5, #64	; 0x40
  403412:	47a8      	blx	r5
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  403414:	f04f 0010 	mov.w	r0, #16
  403418:	47a8      	blx	r5
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  40341a:	f04f 0000 	mov.w	r0, #0
  40341e:	47a8      	blx	r5
            break;

        case SYSCALL_WRITECHARTOSCREEN:
            ssd1306_set_page_address(0); //changes line number (0-3)
            ssd1306_set_column_address(0); //change line position (128 pixels wide, you can choose 0-127)
            ssd1306_write_text((char*) svc_args[0]);
  403420:	6820      	ldr	r0, [r4, #0]
  403422:	f243 7171 	movw	r1, #14193	; 0x3771
  403426:	f2c0 0140 	movt	r1, #64	; 0x40
  40342a:	4788      	blx	r1
            break;
  40342c:	e0e5      	b.n	4035fa <SVC_Switch+0x2c2>
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  40342e:	6861      	ldr	r1, [r4, #4]
  403430:	f001 0207 	and.w	r2, r1, #7
  403434:	f042 00b0 	orr.w	r0, r2, #176	; 0xb0
  403438:	f243 2569 	movw	r5, #12905	; 0x3269
  40343c:	f2c0 0540 	movt	r5, #64	; 0x40
  403440:	47a8      	blx	r5
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  403442:	f04f 0010 	mov.w	r0, #16
  403446:	47a8      	blx	r5
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  403448:	f04f 0000 	mov.w	r0, #0
  40344c:	47a8      	blx	r5

        case SYSCALL_WRITESTRINGTOSCREEN:
            ssd1306_set_page_address((int) svc_args[1]); //changes line number (0-3)
            ssd1306_set_column_address(0); //change line position (128 pixels wide, you can choose 0-127)
            ssd1306_write_text((char*) svc_args[0]);
  40344e:	6820      	ldr	r0, [r4, #0]
  403450:	f243 7371 	movw	r3, #14193	; 0x3771
  403454:	f2c0 0340 	movt	r3, #64	; 0x40
  403458:	4798      	blx	r3
            break;
  40345a:	e0ce      	b.n	4035fa <SVC_Switch+0x2c2>

        case SYSCALL_GETTEMP:
            at30tse_read_temperature((double*) svc_args[0]);
  40345c:	6820      	ldr	r0, [r4, #0]
  40345e:	f643 01d5 	movw	r1, #14549	; 0x38d5
  403462:	f2c0 0140 	movt	r1, #64	; 0x40
  403466:	4788      	blx	r1
            break;
  403468:	e0c7      	b.n	4035fa <SVC_Switch+0x2c2>

        case SYSCALL_GETLIGHT:
            adc_value = adc_get_channel_value(ADC, ADC_CHANNEL_4);
  40346a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  40346e:	f2c4 0003 	movt	r0, #16387	; 0x4003
  403472:	f04f 0104 	mov.w	r1, #4
  403476:	f643 524d 	movw	r2, #15693	; 0x3d4d
  40347a:	f2c0 0240 	movt	r2, #64	; 0x40
  40347e:	4790      	blx	r2
  403480:	f641 4354 	movw	r3, #7252	; 0x1c54
  403484:	f2c2 0300 	movt	r3, #8192	; 0x2000
  403488:	6018      	str	r0, [r3, #0]
            break;
  40348a:	e0b6      	b.n	4035fa <SVC_Switch+0x2c2>
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  40348c:	6866      	ldr	r6, [r4, #4]
  40348e:	f006 0507 	and.w	r5, r6, #7
  403492:	f045 00b0 	orr.w	r0, r5, #176	; 0xb0
  403496:	f243 2569 	movw	r5, #12905	; 0x3269
  40349a:	f2c0 0540 	movt	r5, #64	; 0x40
  40349e:	47a8      	blx	r5

        case SYSCALL_WRITESTRINGTOSCREENPOSITION:
            ssd1306_set_page_address((int) svc_args[1]); //changes line number (0-3)
            ssd1306_set_column_address((int) svc_args[2]); //change line position (128 pixels wide, you can choose 0-127)
  4034a0:	68a6      	ldr	r6, [r4, #8]
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  4034a2:	f3c6 1002 	ubfx	r0, r6, #4, #3
  4034a6:	f040 0010 	orr.w	r0, r0, #16
  4034aa:	47a8      	blx	r5
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  4034ac:	f006 000f 	and.w	r0, r6, #15
  4034b0:	47a8      	blx	r5
            ssd1306_write_text((char*) svc_args[0]);
  4034b2:	6820      	ldr	r0, [r4, #0]
  4034b4:	f243 7371 	movw	r3, #14193	; 0x3771
  4034b8:	f2c0 0340 	movt	r3, #64	; 0x40
  4034bc:	4798      	blx	r3
            break;
  4034be:	e09c      	b.n	4035fa <SVC_Switch+0x2c2>

        case SYSCALL_DELAY:
            delay_ms((int) svc_args[0]);
  4034c0:	6824      	ldr	r4, [r4, #0]
  4034c2:	ea4f 70e4 	mov.w	r0, r4, asr #31
  4034c6:	f44f 6160 	mov.w	r1, #3584	; 0xe00
  4034ca:	f2c0 7127 	movt	r1, #1831	; 0x727
  4034ce:	fba4 2301 	umull	r2, r3, r4, r1
  4034d2:	fb01 3300 	mla	r3, r1, r0, r3
  4034d6:	f243 64af 	movw	r4, #13999	; 0x36af
  4034da:	f04f 0100 	mov.w	r1, #0
  4034de:	18a0      	adds	r0, r4, r2
  4034e0:	eb41 0103 	adc.w	r1, r1, r3
  4034e4:	f243 62b0 	movw	r2, #14000	; 0x36b0
  4034e8:	f04f 0300 	mov.w	r3, #0
  4034ec:	f246 14ad 	movw	r4, #25005	; 0x61ad
  4034f0:	f2c0 0440 	movt	r4, #64	; 0x40
  4034f4:	47a0      	blx	r4
  4034f6:	f240 0201 	movw	r2, #1
  4034fa:	f2c2 0200 	movt	r2, #8192	; 0x2000
  4034fe:	4790      	blx	r2
            break;
  403500:	e07b      	b.n	4035fa <SVC_Switch+0x2c2>
void SVC_Switch(unsigned int * svc_args) {

    /* The value that this switch statement switches on is svc_args, but using only 
     * the value stored in the R0 register.
     */
    switch (((char *) svc_args[6])[-2]) {
  403502:	f04f 0100 	mov.w	r1, #0
  403506:	9101      	str	r1, [sp, #4]
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
	spi_select_device(SSD1306_SPI, &device);
  403508:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  40350c:	f2c4 0400 	movt	r4, #16384	; 0x4000
  403510:	f643 3a65 	movw	sl, #15205	; 0x3b65
  403514:	f2c0 0a40 	movt	sl, #64	; 0x40
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403518:	f44f 5990 	mov.w	r9, #4608	; 0x1200
  40351c:	f2c4 090e 	movt	r9, #16398	; 0x400e
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  403520:	9a01      	ldr	r2, [sp, #4]
  403522:	f002 0507 	and.w	r5, r2, #7
  403526:	f045 00b0 	orr.w	r0, r5, #176	; 0xb0
  40352a:	f243 2669 	movw	r6, #12905	; 0x3269
  40352e:	f2c0 0640 	movt	r6, #64	; 0x40
  403532:	47b0      	blx	r6
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  403534:	f04f 0010 	mov.w	r0, #16
  403538:	f243 2769 	movw	r7, #12905	; 0x3269
  40353c:	f2c0 0740 	movt	r7, #64	; 0x40
  403540:	47b8      	blx	r7
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  403542:	f04f 0000 	mov.w	r0, #0
  403546:	f243 2369 	movw	r3, #12905	; 0x3269
  40354a:	f2c0 0340 	movt	r3, #64	; 0x40
  40354e:	4798      	blx	r3
  403550:	f04f 0b80 	mov.w	fp, #128	; 0x80
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  403554:	f04f 0802 	mov.w	r8, #2
	spi_select_device(SSD1306_SPI, &device);
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  403558:	f240 0701 	movw	r7, #1
  40355c:	f2c2 0700 	movt	r7, #8192	; 0x2000
	spi_deselect_device(SSD1306_SPI, &device);
  403560:	f643 36a1 	movw	r6, #15265	; 0x3ba1
  403564:	f2c0 0640 	movt	r6, #64	; 0x40
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  403568:	ad04      	add	r5, sp, #16
  40356a:	f845 8d04 	str.w	r8, [r5, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  40356e:	4620      	mov	r0, r4
  403570:	4629      	mov	r1, r5
  403572:	47d0      	blx	sl
  403574:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  403578:	f8c9 0030 	str.w	r0, [r9, #48]	; 0x30
  40357c:	f04f 0100 	mov.w	r1, #0
  403580:	60e1      	str	r1, [r4, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  403582:	f04f 0056 	mov.w	r0, #86	; 0x56
  403586:	47b8      	blx	r7
	spi_deselect_device(SSD1306_SPI, &device);
  403588:	4620      	mov	r0, r4
  40358a:	4629      	mov	r1, r5
  40358c:	47b0      	blx	r6
  40358e:	f10b 3bff 	add.w	fp, fp, #4294967295
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  403592:	ad04      	add	r5, sp, #16
  403594:	f845 8d04 	str.w	r8, [r5, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  403598:	4620      	mov	r0, r4
  40359a:	4629      	mov	r1, r5
  40359c:	47d0      	blx	sl
  40359e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4035a2:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
  4035a6:	f04f 0300 	mov.w	r3, #0
  4035aa:	60e3      	str	r3, [r4, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  4035ac:	f04f 0056 	mov.w	r0, #86	; 0x56
  4035b0:	47b8      	blx	r7
	spi_deselect_device(SSD1306_SPI, &device);
  4035b2:	4620      	mov	r0, r4
  4035b4:	4629      	mov	r1, r5
  4035b6:	47b0      	blx	r6

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
  4035b8:	f1bb 0b01 	subs.w	fp, fp, #1
  4035bc:	d1d4      	bne.n	403568 <SVC_Switch+0x230>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
  4035be:	9801      	ldr	r0, [sp, #4]
  4035c0:	f100 0001 	add.w	r0, r0, #1
  4035c4:	b2c1      	uxtb	r1, r0
  4035c6:	9101      	str	r1, [sp, #4]
  4035c8:	2904      	cmp	r1, #4
  4035ca:	d1a9      	bne.n	403520 <SVC_Switch+0x1e8>
  4035cc:	e015      	b.n	4035fa <SVC_Switch+0x2c2>
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4035ce:	f04f 00b0 	mov.w	r0, #176	; 0xb0
  4035d2:	f243 2469 	movw	r4, #12905	; 0x3269
  4035d6:	f2c0 0440 	movt	r4, #64	; 0x40
  4035da:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  4035dc:	f04f 0010 	mov.w	r0, #16
  4035e0:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  4035e2:	f04f 0000 	mov.w	r0, #0
  4035e6:	47a0      	blx	r4
            break;

        default: 
            ssd1306_set_page_address(0); //changes line number (0-3)
            ssd1306_set_column_address(0); //change line position (128 pixels wide, you can choose 0-127)
            ssd1306_write_text("Some SVC Error Happened");
  4035e8:	f248 30a4 	movw	r0, #33700	; 0x83a4
  4035ec:	f2c0 0040 	movt	r0, #64	; 0x40
  4035f0:	f243 7171 	movw	r1, #14193	; 0x3771
  4035f4:	f2c0 0140 	movt	r1, #64	; 0x40
  4035f8:	4788      	blx	r1
            break;
    }
}
  4035fa:	b005      	add	sp, #20
  4035fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00403600 <my_callback_cdc_enable>:

//These functions are specific to the USB Stack implementation
//------------------------------------------------------------

bool my_callback_cdc_enable(void) {
    my_flag_autorize_cdc_transfert = true;
  403600:	f04f 0001 	mov.w	r0, #1
  403604:	f641 335e 	movw	r3, #7006	; 0x1b5e
  403608:	f2c2 0300 	movt	r3, #8192	; 0x2000
  40360c:	7018      	strb	r0, [r3, #0]
    return true;
}
  40360e:	4770      	bx	lr

00403610 <my_callback_cdc_disable>:

void my_callback_cdc_disable(void) {
    my_flag_autorize_cdc_transfert = false;
  403610:	f641 335e 	movw	r3, #7006	; 0x1b5e
  403614:	f2c2 0300 	movt	r3, #8192	; 0x2000
  403618:	f04f 0200 	mov.w	r2, #0
  40361c:	701a      	strb	r2, [r3, #0]
  40361e:	4770      	bx	lr

00403620 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
  403620:	b570      	push	{r4, r5, r6, lr}
  403622:	b082      	sub	sp, #8
  403624:	4606      	mov	r6, r0
	usart_spi_select_device(SSD1306_USART_SPI, &device);
	ssd1306_sel_cmd();
	usart_spi_transmit(SSD1306_USART_SPI, command);
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  403626:	ac02      	add	r4, sp, #8
  403628:	f04f 0302 	mov.w	r3, #2
  40362c:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  403630:	f44f 4500 	mov.w	r5, #32768	; 0x8000
  403634:	f2c4 0500 	movt	r5, #16384	; 0x4000
  403638:	4628      	mov	r0, r5
  40363a:	4621      	mov	r1, r4
  40363c:	f643 3265 	movw	r2, #15205	; 0x3b65
  403640:	f2c0 0240 	movt	r2, #64	; 0x40
  403644:	4790      	blx	r2
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  403646:	f44f 5090 	mov.w	r0, #4608	; 0x1200
  40364a:	f2c4 000e 	movt	r0, #16398	; 0x400e
  40364e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  403652:	6341      	str	r1, [r0, #52]	; 0x34
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  403654:	60ee      	str	r6, [r5, #12]
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
  403656:	f04f 0056 	mov.w	r0, #86	; 0x56
  40365a:	f240 0301 	movw	r3, #1
  40365e:	f2c2 0300 	movt	r3, #8192	; 0x2000
  403662:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  403664:	4628      	mov	r0, r5
  403666:	4621      	mov	r1, r4
  403668:	f643 32a1 	movw	r2, #15265	; 0x3ba1
  40366c:	f2c0 0240 	movt	r2, #64	; 0x40
  403670:	4790      	blx	r2
#endif
}
  403672:	b002      	add	sp, #8
  403674:	bd70      	pop	{r4, r5, r6, pc}
  403676:	bf00      	nop

00403678 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
  403678:	b5f0      	push	{r4, r5, r6, r7, lr}
  40367a:	b085      	sub	sp, #20
  40367c:	f44f 5490 	mov.w	r4, #4608	; 0x1200
  403680:	f2c4 040e 	movt	r4, #16398	; 0x400e
  403684:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
  403688:	6366      	str	r6, [r4, #52]	; 0x34
 * function, this command will control the RST pin.
 */
static inline void ssd1306_hard_reset(void)
{
	arch_ioport_set_pin_level(SSD1306_RES_PIN, false);
	delay_us(SSD1306_LATENCY); // At least 3us
  40368a:	f04f 0056 	mov.w	r0, #86	; 0x56
  40368e:	f240 0501 	movw	r5, #1
  403692:	f2c2 0500 	movt	r5, #8192	; 0x2000
  403696:	47a8      	blx	r5
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403698:	6326      	str	r6, [r4, #48]	; 0x30
	arch_ioport_set_pin_level(SSD1306_RES_PIN, true);
	delay_us(SSD1306_LATENCY); // At least 3us
  40369a:	f04f 0056 	mov.w	r0, #86	; 0x56
  40369e:	47a8      	blx	r5
	};
	usart_spi_init(SSD1306_USART_SPI);
	usart_spi_setup_device(SSD1306_USART_SPI, &device, spi_flags,
			SSD1306_CLOCK_SPEED, spi_select_id);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {
  4036a0:	f04f 0702 	mov.w	r7, #2
  4036a4:	ae04      	add	r6, sp, #16
  4036a6:	f846 7d04 	str.w	r7, [r6, #-4]!
		.id = SSD1306_CS_PIN,
	};
	spi_master_init(SSD1306_SPI);
  4036aa:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  4036ae:	f2c4 0400 	movt	r4, #16384	; 0x4000
  4036b2:	4620      	mov	r0, r4
  4036b4:	f643 2375 	movw	r3, #14965	; 0x3a75
  4036b8:	f2c0 0340 	movt	r3, #64	; 0x40
  4036bc:	4798      	blx	r3
	spi_master_setup_device(SSD1306_SPI, &device, spi_flags,
  4036be:	f04f 0500 	mov.w	r5, #0
  4036c2:	9500      	str	r5, [sp, #0]
  4036c4:	4620      	mov	r0, r4
  4036c6:	4631      	mov	r1, r6
  4036c8:	462a      	mov	r2, r5
  4036ca:	f644 3340 	movw	r3, #19264	; 0x4b40
  4036ce:	f2c0 034c 	movt	r3, #76	; 0x4c
  4036d2:	f643 26d5 	movw	r6, #15061	; 0x3ad5
  4036d6:	f2c0 0640 	movt	r6, #64	; 0x40
  4036da:	47b0      	blx	r6
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4036dc:	f04f 0001 	mov.w	r0, #1
  4036e0:	6020      	str	r0, [r4, #0]

	// Initialize the interface
	ssd1306_interface_init();

	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  4036e2:	f04f 00a8 	mov.w	r0, #168	; 0xa8
  4036e6:	f243 6421 	movw	r4, #13857	; 0x3621
  4036ea:	f2c0 0440 	movt	r4, #64	; 0x40
  4036ee:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  4036f0:	f04f 001f 	mov.w	r0, #31
  4036f4:	47a0      	blx	r4

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  4036f6:	f04f 00d3 	mov.w	r0, #211	; 0xd3
  4036fa:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  4036fc:	4628      	mov	r0, r5
  4036fe:	47a0      	blx	r4

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(0x00));
  403700:	f04f 0040 	mov.w	r0, #64	; 0x40
  403704:	47a0      	blx	r4

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  403706:	f04f 00a1 	mov.w	r0, #161	; 0xa1
  40370a:	47a0      	blx	r4

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  40370c:	f04f 00c8 	mov.w	r0, #200	; 0xc8
  403710:	47a0      	blx	r4

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  403712:	f04f 00da 	mov.w	r0, #218	; 0xda
  403716:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  403718:	4638      	mov	r0, r7
  40371a:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  40371c:	f04f 0081 	mov.w	r0, #129	; 0x81
  403720:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  403722:	f04f 008f 	mov.w	r0, #143	; 0x8f
  403726:	47a0      	blx	r4

	ssd1306_set_contrast(0x8F);

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  403728:	f04f 00a4 	mov.w	r0, #164	; 0xa4
  40372c:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  40372e:	f04f 00a6 	mov.w	r0, #166	; 0xa6
  403732:	47a0      	blx	r4

	ssd1306_display_invert_disable();

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  403734:	f04f 00d5 	mov.w	r0, #213	; 0xd5
  403738:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  40373a:	f04f 0080 	mov.w	r0, #128	; 0x80
  40373e:	47a0      	blx	r4

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  403740:	f04f 008d 	mov.w	r0, #141	; 0x8d
  403744:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  403746:	f04f 0014 	mov.w	r0, #20
  40374a:	47a0      	blx	r4

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  40374c:	f04f 00db 	mov.w	r0, #219	; 0xdb
  403750:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  403752:	f04f 0040 	mov.w	r0, #64	; 0x40
  403756:	47a0      	blx	r4

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  403758:	f04f 00d9 	mov.w	r0, #217	; 0xd9
  40375c:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  40375e:	f04f 00f1 	mov.w	r0, #241	; 0xf1
  403762:	47a0      	blx	r4
 *
 * This function will turn on the OLED.
 */
static inline void ssd1306_display_on(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  403764:	f04f 00af 	mov.w	r0, #175	; 0xaf
  403768:	47a0      	blx	r4

	ssd1306_display_on();
}
  40376a:	b005      	add	sp, #20
  40376c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40376e:	bf00      	nop

00403770 <ssd1306_write_text>:
/**
 * \brief Display text on OLED screen.
 * \param string String to display.
 */
void ssd1306_write_text(const char *string)
{
  403770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403774:	b087      	sub	sp, #28
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != 0) {
  403776:	7803      	ldrb	r3, [r0, #0]
  403778:	2b00      	cmp	r3, #0
  40377a:	d067      	beq.n	40384c <ssd1306_write_text+0xdc>
  40377c:	9002      	str	r0, [sp, #8]
		if (*string < 0x7F) {
			char_ptr = font_table[*string - 32];
  40377e:	f240 02d8 	movw	r2, #216	; 0xd8
  403782:	f2c2 0200 	movt	r2, #8192	; 0x2000
  403786:	9203      	str	r2, [sp, #12]
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
	spi_select_device(SSD1306_SPI, &device);
  403788:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  40378c:	f2c4 0600 	movt	r6, #16384	; 0x4000
  403790:	f643 3065 	movw	r0, #15205	; 0x3b65
  403794:	f2c0 0040 	movt	r0, #64	; 0x40
  403798:	9001      	str	r0, [sp, #4]
  40379a:	f44f 5b90 	mov.w	fp, #4608	; 0x1200
  40379e:	f2c4 0b0e 	movt	fp, #16398	; 0x400e
{
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != 0) {
		if (*string < 0x7F) {
  4037a2:	2b7e      	cmp	r3, #126	; 0x7e
  4037a4:	d84c      	bhi.n	403840 <ssd1306_write_text+0xd0>
			char_ptr = font_table[*string - 32];
  4037a6:	f1a3 0320 	sub.w	r3, r3, #32
  4037aa:	9903      	ldr	r1, [sp, #12]
  4037ac:	f851 7023 	ldr.w	r7, [r1, r3, lsl #2]
			for (i = 1; i <= char_ptr[0]; i++) {
  4037b0:	783b      	ldrb	r3, [r7, #0]
  4037b2:	b33b      	cbz	r3, 403804 <ssd1306_write_text+0x94>
  4037b4:	f04f 0501 	mov.w	r5, #1
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  4037b8:	f240 0901 	movw	r9, #1
  4037bc:	f2c2 0900 	movt	r9, #8192	; 0x2000
	spi_deselect_device(SSD1306_SPI, &device);
  4037c0:	f643 34a1 	movw	r4, #15265	; 0x3ba1
  4037c4:	46a2      	mov	sl, r4
  4037c6:	f2c0 0a40 	movt	sl, #64	; 0x40
				ssd1306_write_data(char_ptr[i]);
  4037ca:	f817 8005 	ldrb.w	r8, [r7, r5]
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  4037ce:	ac06      	add	r4, sp, #24
  4037d0:	f04f 0202 	mov.w	r2, #2
  4037d4:	f844 2d04 	str.w	r2, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  4037d8:	4630      	mov	r0, r6
  4037da:	4621      	mov	r1, r4
  4037dc:	9b01      	ldr	r3, [sp, #4]
  4037de:	4798      	blx	r3
  4037e0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  4037e4:	f8cb 0030 	str.w	r0, [fp, #48]	; 0x30
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4037e8:	f8c6 800c 	str.w	r8, [r6, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  4037ec:	f04f 0056 	mov.w	r0, #86	; 0x56
  4037f0:	47c8      	blx	r9
	spi_deselect_device(SSD1306_SPI, &device);
  4037f2:	4630      	mov	r0, r6
  4037f4:	4621      	mov	r1, r4
  4037f6:	47d0      	blx	sl
	uint8_t i;

	while (*string != 0) {
		if (*string < 0x7F) {
			char_ptr = font_table[*string - 32];
			for (i = 1; i <= char_ptr[0]; i++) {
  4037f8:	f105 0501 	add.w	r5, r5, #1
  4037fc:	b2ed      	uxtb	r5, r5
  4037fe:	7839      	ldrb	r1, [r7, #0]
  403800:	42a9      	cmp	r1, r5
  403802:	d2e2      	bcs.n	4037ca <ssd1306_write_text+0x5a>
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  403804:	ac06      	add	r4, sp, #24
  403806:	f04f 0202 	mov.w	r2, #2
  40380a:	f844 2d04 	str.w	r2, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  40380e:	4630      	mov	r0, r6
  403810:	4621      	mov	r1, r4
  403812:	9b01      	ldr	r3, [sp, #4]
  403814:	4798      	blx	r3
  403816:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  40381a:	f8cb 0030 	str.w	r0, [fp, #48]	; 0x30
  40381e:	f04f 0100 	mov.w	r1, #0
  403822:	60f1      	str	r1, [r6, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  403824:	f04f 0056 	mov.w	r0, #86	; 0x56
  403828:	f240 0201 	movw	r2, #1
  40382c:	f2c2 0200 	movt	r2, #8192	; 0x2000
  403830:	4790      	blx	r2
	spi_deselect_device(SSD1306_SPI, &device);
  403832:	4630      	mov	r0, r6
  403834:	4621      	mov	r1, r4
  403836:	f643 33a1 	movw	r3, #15265	; 0x3ba1
  40383a:	f2c0 0340 	movt	r3, #64	; 0x40
  40383e:	4798      	blx	r3
void ssd1306_write_text(const char *string)
{
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != 0) {
  403840:	9802      	ldr	r0, [sp, #8]
  403842:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  403846:	9002      	str	r0, [sp, #8]
  403848:	2b00      	cmp	r3, #0
  40384a:	d1aa      	bne.n	4037a2 <ssd1306_write_text+0x32>
			}
			ssd1306_write_data(0x00);
		}
			string++;
	}
}
  40384c:	b007      	add	sp, #28
  40384e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403852:	bf00      	nop

00403854 <at30tse_init>:

/**
 * \brief Initialize the TWI instance used for AT30TSE75x.
 */
void at30tse_init(void)
{
  403854:	b500      	push	{lr}
  403856:	b085      	sub	sp, #20
	twi_options_t opts = {
  403858:	f04f 0300 	mov.w	r3, #0
  40385c:	9303      	str	r3, [sp, #12]
  40385e:	f44f 6060 	mov.w	r0, #3584	; 0xe00
  403862:	f2c0 7027 	movt	r0, #1831	; 0x727
  403866:	9001      	str	r0, [sp, #4]
  403868:	f242 7110 	movw	r1, #10000	; 0x2710
  40386c:	9102      	str	r1, [sp, #8]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40386e:	f04f 0013 	mov.w	r0, #19
  403872:	f244 3271 	movw	r2, #17265	; 0x4371
  403876:	f2c0 0240 	movt	r2, #64	; 0x40
  40387a:	4790      	blx	r2
		.speed = BOARD_TWI_SPEED,
		.smbus = 0
	};

	sysclk_enable_peripheral_clock(BOARD_AT30TSE_TWI_ID);
	twi_master_init(BOARD_AT30TSE_TWI, &opts);
  40387c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  403880:	f2c4 0001 	movt	r0, #16385	; 0x4001
  403884:	a901      	add	r1, sp, #4
  403886:	f244 7379 	movw	r3, #18297	; 0x4779
  40388a:	f2c0 0340 	movt	r3, #64	; 0x40
  40388e:	4798      	blx	r3
}
  403890:	b005      	add	sp, #20
  403892:	bd00      	pop	{pc}

00403894 <at30tse_read_register>:
 *
 * \return TWI_SUCCESS if success, otherwise false
 */
uint8_t at30tse_read_register(uint8_t reg, uint8_t reg_type,
		uint8_t reg_size, uint8_t* buffer)
{
  403894:	b510      	push	{r4, lr}
  403896:	b086      	sub	sp, #24
	twi_packet_t packet = {
  403898:	f04f 0400 	mov.w	r4, #0
  40389c:	9401      	str	r4, [sp, #4]
  40389e:	9405      	str	r4, [sp, #20]
  4038a0:	4301      	orrs	r1, r0
  4038a2:	f88d 1004 	strb.w	r1, [sp, #4]
  4038a6:	f04f 0101 	mov.w	r1, #1
  4038aa:	9102      	str	r1, [sp, #8]
  4038ac:	9303      	str	r3, [sp, #12]
  4038ae:	9204      	str	r2, [sp, #16]
  4038b0:	f04f 034f 	mov.w	r3, #79	; 0x4f
  4038b4:	f88d 3014 	strb.w	r3, [sp, #20]
		.length = reg_size,
		/* Chip addr */
		.chip = AT30TSE_TEMPERATURE_TWI_ADDR
	};

	return twi_master_read(BOARD_AT30TSE_TWI, &packet);
  4038b8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  4038bc:	f2c4 0001 	movt	r0, #16385	; 0x4001
  4038c0:	a901      	add	r1, sp, #4
  4038c2:	f244 62c9 	movw	r2, #18121	; 0x46c9
  4038c6:	f2c0 0240 	movt	r2, #64	; 0x40
  4038ca:	4790      	blx	r2
}
  4038cc:	b2c0      	uxtb	r0, r0
  4038ce:	b006      	add	sp, #24
  4038d0:	bd10      	pop	{r4, pc}
  4038d2:	bf00      	nop

004038d4 <at30tse_read_temperature>:
 * stored
 *
 * \return TWI_SUCCESS if success, otherwise false
 */
uint8_t at30tse_read_temperature(double *temperature)
{
  4038d4:	b570      	push	{r4, r5, r6, lr}
  4038d6:	b082      	sub	sp, #8
  4038d8:	4605      	mov	r5, r0
	/* Placeholder buffer to put temperature data in. */
	uint8_t buffer[2];
	uint8_t error_code = 0;
	buffer[0] = 0;
  4038da:	f04f 0100 	mov.w	r1, #0
  4038de:	f88d 1004 	strb.w	r1, [sp, #4]
	buffer[1] = 0;
  4038e2:	f88d 1005 	strb.w	r1, [sp, #5]

	/* Read the 16-bit temperature register. */
	error_code = at30tse_read_register(AT30TSE_TEMPERATURE_REG,
  4038e6:	4608      	mov	r0, r1
  4038e8:	f04f 0202 	mov.w	r2, #2
  4038ec:	ab01      	add	r3, sp, #4
  4038ee:	f643 0495 	movw	r4, #14485	; 0x3895
  4038f2:	f2c0 0440 	movt	r4, #64	; 0x40
  4038f6:	47a0      	blx	r4
			AT30TSE_NON_VOLATILE_REG, AT30TSE_TEMPERATURE_REG_SIZE, buffer);

	/* Only convert temperature data if read success. */
	if (error_code == TWI_SUCCESS) {
  4038f8:	4604      	mov	r4, r0
  4038fa:	2800      	cmp	r0, #0
  4038fc:	d17a      	bne.n	4039f4 <at30tse_read_temperature+0x120>
		uint16_t data = (buffer[0] << 8) | buffer[1];
  4038fe:	f89d 2004 	ldrb.w	r2, [sp, #4]
  403902:	f89d 3005 	ldrb.w	r3, [sp, #5]
  403906:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
		int8_t sign = 1;

		/* Check if negative and clear sign bit. */
		if (data & (1 << 15)) {
  40390a:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40390e:	d103      	bne.n	403918 <at30tse_read_temperature+0x44>
	error_code = at30tse_read_register(AT30TSE_TEMPERATURE_REG,
			AT30TSE_NON_VOLATILE_REG, AT30TSE_TEMPERATURE_REG_SIZE, buffer);

	/* Only convert temperature data if read success. */
	if (error_code == TWI_SUCCESS) {
		uint16_t data = (buffer[0] << 8) | buffer[1];
  403910:	b282      	uxth	r2, r0
		int8_t sign = 1;
  403912:	f04f 0101 	mov.w	r1, #1
  403916:	e005      	b.n	403924 <at30tse_read_temperature+0x50>

		/* Check if negative and clear sign bit. */
		if (data & (1 << 15)) {
			sign *= -1;
			data &= ~(1 << 15);
  403918:	ea4f 4140 	mov.w	r1, r0, lsl #17
  40391c:	ea4f 4251 	mov.w	r2, r1, lsr #17
		uint16_t data = (buffer[0] << 8) | buffer[1];
		int8_t sign = 1;

		/* Check if negative and clear sign bit. */
		if (data & (1 << 15)) {
			sign *= -1;
  403920:	f04f 01ff 	mov.w	r1, #255	; 0xff
			data &= ~(1 << 15);
		}

		/* Convert to temperature. */
		switch (resolution) {
  403924:	f641 335f 	movw	r3, #7007	; 0x1b5f
  403928:	f2c2 0300 	movt	r3, #8192	; 0x2000
  40392c:	781b      	ldrb	r3, [r3, #0]
  40392e:	2b03      	cmp	r3, #3
  403930:	d860      	bhi.n	4039f4 <at30tse_read_temperature+0x120>
  403932:	e8df f003 	tbb	[pc, r3]
  403936:	1a02      	.short	0x1a02
  403938:	4832      	.short	0x4832
		case AT30TSE_CONFIG_RES_9_bit:
			data = (data >> 7);
			*(temperature) = data * sign * 0.5;
  40393a:	ea4f 10d2 	mov.w	r0, r2, lsr #7
  40393e:	b249      	sxtb	r1, r1
  403940:	fb01 f000 	mul.w	r0, r1, r0
  403944:	f645 336d 	movw	r3, #23405	; 0x5b6d
  403948:	f2c0 0340 	movt	r3, #64	; 0x40
  40394c:	4798      	blx	r3
  40394e:	f04f 0200 	mov.w	r2, #0
  403952:	f04f 0300 	mov.w	r3, #0
  403956:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
  40395a:	f645 4639 	movw	r6, #23609	; 0x5c39
  40395e:	f2c0 0640 	movt	r6, #64	; 0x40
  403962:	47b0      	blx	r6
  403964:	e9c5 0100 	strd	r0, r1, [r5]
			break;
  403968:	e044      	b.n	4039f4 <at30tse_read_temperature+0x120>

		case AT30TSE_CONFIG_RES_10_bit:
			data = (data >> 6);
			*(temperature) = data * sign * 0.25;
  40396a:	ea4f 1092 	mov.w	r0, r2, lsr #6
  40396e:	b24e      	sxtb	r6, r1
  403970:	fb06 f000 	mul.w	r0, r6, r0
  403974:	f645 326d 	movw	r2, #23405	; 0x5b6d
  403978:	f2c0 0240 	movt	r2, #64	; 0x40
  40397c:	4790      	blx	r2
  40397e:	f04f 0200 	mov.w	r2, #0
  403982:	f04f 0300 	mov.w	r3, #0
  403986:	f6c3 73d0 	movt	r3, #16336	; 0x3fd0
  40398a:	f645 4639 	movw	r6, #23609	; 0x5c39
  40398e:	f2c0 0640 	movt	r6, #64	; 0x40
  403992:	47b0      	blx	r6
  403994:	e9c5 0100 	strd	r0, r1, [r5]
			break;
  403998:	e02c      	b.n	4039f4 <at30tse_read_temperature+0x120>

		case AT30TSE_CONFIG_RES_11_bit:
			data = (data >> 5);
			*(temperature) = data * sign * 0.125;
  40399a:	ea4f 1052 	mov.w	r0, r2, lsr #5
  40399e:	b249      	sxtb	r1, r1
  4039a0:	fb01 f000 	mul.w	r0, r1, r0
  4039a4:	f645 336d 	movw	r3, #23405	; 0x5b6d
  4039a8:	f2c0 0340 	movt	r3, #64	; 0x40
  4039ac:	4798      	blx	r3
  4039ae:	f04f 0200 	mov.w	r2, #0
  4039b2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
  4039b6:	f645 4639 	movw	r6, #23609	; 0x5c39
  4039ba:	f2c0 0640 	movt	r6, #64	; 0x40
  4039be:	47b0      	blx	r6
  4039c0:	e9c5 0100 	strd	r0, r1, [r5]
			break;
  4039c4:	e016      	b.n	4039f4 <at30tse_read_temperature+0x120>

		case AT30TSE_CONFIG_RES_12_bit:
			data = (data >> 4);
			*(temperature) = data * sign * 0.0625;
  4039c6:	ea4f 1012 	mov.w	r0, r2, lsr #4
  4039ca:	b24e      	sxtb	r6, r1
  4039cc:	fb06 f000 	mul.w	r0, r6, r0
  4039d0:	f645 326d 	movw	r2, #23405	; 0x5b6d
  4039d4:	f2c0 0240 	movt	r2, #64	; 0x40
  4039d8:	4790      	blx	r2
  4039da:	f04f 0200 	mov.w	r2, #0
  4039de:	f04f 0300 	mov.w	r3, #0
  4039e2:	f6c3 73b0 	movt	r3, #16304	; 0x3fb0
  4039e6:	f645 4639 	movw	r6, #23609	; 0x5c39
  4039ea:	f2c0 0640 	movt	r6, #64	; 0x40
  4039ee:	47b0      	blx	r6
  4039f0:	e9c5 0100 	strd	r0, r1, [r5]
			break;
		}
	}

	return error_code;
}
  4039f4:	4620      	mov	r0, r4
  4039f6:	b002      	add	sp, #8
  4039f8:	bd70      	pop	{r4, r5, r6, pc}
  4039fa:	bf00      	nop

004039fc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4039fc:	b510      	push	{r4, lr}
	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4039fe:	f44f 6060 	mov.w	r0, #3584	; 0xe00
  403a02:	f2c0 7027 	movt	r0, #1831	; 0x727
  403a06:	f644 3345 	movw	r3, #19269	; 0x4b45
  403a0a:	f2c0 0340 	movt	r3, #64	; 0x40
  403a0e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  403a10:	f04f 0000 	mov.w	r0, #0
  403a14:	f04f 013e 	mov.w	r1, #62	; 0x3e
  403a18:	f244 22d1 	movw	r2, #17105	; 0x42d1
  403a1c:	f2c0 0240 	movt	r2, #64	; 0x40
  403a20:	4790      	blx	r2
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  403a22:	f244 3441 	movw	r4, #17217	; 0x4341
  403a26:	f2c0 0440 	movt	r4, #64	; 0x40
  403a2a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  403a2c:	2800      	cmp	r0, #0
  403a2e:	d0fc      	beq.n	403a2a <sysclk_init+0x2e>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  403a30:	f244 3051 	movw	r0, #17233	; 0x4351
  403a34:	f2c0 0040 	movt	r0, #64	; 0x40
  403a38:	4780      	blx	r0
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  403a3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
  403a3e:	f2c4 010e 	movt	r1, #16398	; 0x400e
  403a42:	f643 7301 	movw	r3, #16129	; 0x3f01
  403a46:	f2c2 0313 	movt	r3, #8211	; 0x2013
  403a4a:	628b      	str	r3, [r1, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  403a4c:	f244 3461 	movw	r4, #17249	; 0x4361
  403a50:	f2c0 0440 	movt	r4, #64	; 0x40
  403a54:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  403a56:	2800      	cmp	r0, #0
  403a58:	d0fc      	beq.n	403a54 <sysclk_init+0x58>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  403a5a:	f04f 0010 	mov.w	r0, #16
  403a5e:	f244 2231 	movw	r2, #16945	; 0x4231
  403a62:	f2c0 0240 	movt	r2, #64	; 0x40
  403a66:	4790      	blx	r2
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  403a68:	f644 108d 	movw	r0, #18829	; 0x498d
  403a6c:	f2c0 0040 	movt	r0, #64	; 0x40
  403a70:	4780      	blx	r0
  403a72:	bd10      	pop	{r4, pc}

00403a74 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  403a74:	b510      	push	{r4, lr}
  403a76:	4604      	mov	r4, r0
	spi_enable_clock(p_spi);
  403a78:	f244 4389 	movw	r3, #17545	; 0x4489
  403a7c:	f2c0 0340 	movt	r3, #64	; 0x40
  403a80:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  403a82:	f04f 0080 	mov.w	r0, #128	; 0x80
  403a86:	6020      	str	r0, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  403a88:	6861      	ldr	r1, [r4, #4]
  403a8a:	f041 0201 	orr.w	r2, r1, #1
  403a8e:	6062      	str	r2, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  403a90:	6863      	ldr	r3, [r4, #4]
  403a92:	f043 0010 	orr.w	r0, r3, #16
  403a96:	6060      	str	r0, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  403a98:	6861      	ldr	r1, [r4, #4]
  403a9a:	f021 0280 	bic.w	r2, r1, #128	; 0x80
  403a9e:	6062      	str	r2, [r4, #4]
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  403aa0:	4620      	mov	r0, r4
  403aa2:	f04f 0100 	mov.w	r1, #0
  403aa6:	f244 439d 	movw	r3, #17565	; 0x449d
  403aaa:	f2c0 0340 	movt	r3, #64	; 0x40
  403aae:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PS);
  403ab0:	6860      	ldr	r0, [r4, #4]
  403ab2:	f020 0102 	bic.w	r1, r0, #2
  403ab6:	6061      	str	r1, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_peripheral_select_decode(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  403ab8:	6862      	ldr	r2, [r4, #4]
  403aba:	f022 0304 	bic.w	r3, r2, #4
  403abe:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  403ac0:	4620      	mov	r0, r4
  403ac2:	f04f 0100 	mov.w	r1, #0
  403ac6:	f244 42b5 	movw	r2, #17589	; 0x44b5
  403aca:	f2c0 0240 	movt	r2, #64	; 0x40
  403ace:	4790      	blx	r2
  403ad0:	bd10      	pop	{r4, pc}
  403ad2:	bf00      	nop

00403ad4 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  403ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403ad6:	4605      	mov	r5, r0
  403ad8:	460c      	mov	r4, r1
  403ada:	4616      	mov	r6, r2
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_cpu_hz());
  403adc:	4618      	mov	r0, r3
  403ade:	f44f 6160 	mov.w	r1, #3584	; 0xe00
  403ae2:	f2c0 7127 	movt	r1, #1831	; 0x727
  403ae6:	f244 538d 	movw	r3, #17805	; 0x458d
  403aea:	f2c0 0340 	movt	r3, #64	; 0x40
  403aee:	4798      	blx	r3
  403af0:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  403af2:	4628      	mov	r0, r5
  403af4:	6821      	ldr	r1, [r4, #0]
  403af6:	f04f 0200 	mov.w	r2, #0
  403afa:	4613      	mov	r3, r2
  403afc:	f244 5cc9 	movw	ip, #17865	; 0x45c9
  403b00:	f2c0 0c40 	movt	ip, #64	; 0x40
  403b04:	47e0      	blx	ip
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  403b06:	4628      	mov	r0, r5
  403b08:	6821      	ldr	r1, [r4, #0]
  403b0a:	f04f 0208 	mov.w	r2, #8
  403b0e:	f244 5371 	movw	r3, #17777	; 0x4571
  403b12:	f2c0 0340 	movt	r3, #64	; 0x40
  403b16:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  403b18:	4628      	mov	r0, r5
  403b1a:	6821      	ldr	r1, [r4, #0]
  403b1c:	b2fa      	uxtb	r2, r7
  403b1e:	f244 53a9 	movw	r3, #17833	; 0x45a9
  403b22:	f2c0 0340 	movt	r3, #64	; 0x40
  403b26:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  403b28:	4628      	mov	r0, r5
  403b2a:	6821      	ldr	r1, [r4, #0]
  403b2c:	f04f 0208 	mov.w	r2, #8
  403b30:	f244 5319 	movw	r3, #17689	; 0x4519
  403b34:	f2c0 0340 	movt	r3, #64	; 0x40
  403b38:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  403b3a:	4628      	mov	r0, r5
  403b3c:	6821      	ldr	r1, [r4, #0]
  403b3e:	ea4f 0256 	mov.w	r2, r6, lsr #1
  403b42:	f244 43c9 	movw	r3, #17609	; 0x44c9
  403b46:	f2c0 0340 	movt	r3, #64	; 0x40
  403b4a:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  403b4c:	f086 0201 	eor.w	r2, r6, #1
  403b50:	4628      	mov	r0, r5
  403b52:	6821      	ldr	r1, [r4, #0]
  403b54:	f002 0201 	and.w	r2, r2, #1
  403b58:	f244 43f1 	movw	r3, #17649	; 0x44f1
  403b5c:	f2c0 0340 	movt	r3, #64	; 0x40
  403b60:	4798      	blx	r3
  403b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00403b64 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  403b64:	b508      	push	{r3, lr}
 *
 * \return 1 for decode mode, 0 for direct mode.
 */
static inline uint32_t spi_get_peripheral_select_decode_setting(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  403b66:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  403b68:	f013 0f04 	tst.w	r3, #4
  403b6c:	d008      	beq.n	403b80 <spi_select_device+0x1c>
		if (device->id < MAX_NUM_WITH_DECODER) {
  403b6e:	6809      	ldr	r1, [r1, #0]
  403b70:	290f      	cmp	r1, #15
  403b72:	d813      	bhi.n	403b9c <spi_select_device+0x38>
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  403b74:	f244 439d 	movw	r3, #17565	; 0x449d
  403b78:	f2c0 0340 	movt	r3, #64	; 0x40
  403b7c:	4798      	blx	r3
  403b7e:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  403b80:	6809      	ldr	r1, [r1, #0]
  403b82:	2903      	cmp	r1, #3
  403b84:	d80a      	bhi.n	403b9c <spi_select_device+0x38>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  403b86:	f04f 0201 	mov.w	r2, #1
  403b8a:	fa02 f301 	lsl.w	r3, r2, r1
  403b8e:	ea6f 0103 	mvn.w	r1, r3
  403b92:	f244 429d 	movw	r2, #17565	; 0x449d
  403b96:	f2c0 0240 	movt	r2, #64	; 0x40
  403b9a:	4790      	blx	r2
  403b9c:	bd08      	pop	{r3, pc}
  403b9e:	bf00      	nop

00403ba0 <spi_deselect_device>:
 * \param device  SPI device.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
void spi_deselect_device(Spi *p_spi, struct spi_device *device)
{
  403ba0:	b510      	push	{r4, lr}
  403ba2:	4604      	mov	r4, r0
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  403ba4:	6923      	ldr	r3, [r4, #16]
	/* avoid Cppcheck Warning */
	UNUSED(device);
	while (!spi_is_tx_empty(p_spi)) {
  403ba6:	f413 7f00 	tst.w	r3, #512	; 0x200
  403baa:	d0fb      	beq.n	403ba4 <spi_deselect_device+0x4>
	}

	// Assert all lines; no peripheral is selected.
	spi_set_peripheral_chip_select_value(p_spi, NONE_CHIP_SELECT_ID);
  403bac:	4620      	mov	r0, r4
  403bae:	f04f 010f 	mov.w	r1, #15
  403bb2:	f244 429d 	movw	r2, #17565	; 0x449d
  403bb6:	f2c0 0240 	movt	r2, #64	; 0x40
  403bba:	4790      	blx	r2
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_lastxfer(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  403bbc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
  403bc0:	6020      	str	r0, [r4, #0]
  403bc2:	bd10      	pop	{r4, pc}

00403bc4 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  403bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  403bc6:	f241 4050 	movw	r0, #5200	; 0x1450
  403bca:	f2c4 000e 	movt	r0, #16398	; 0x400e
  403bce:	f244 73c1 	movw	r3, #18369	; 0x47c1
  403bd2:	f2c0 0340 	movt	r3, #64	; 0x40
  403bd6:	4798      	blx	r3
  403bd8:	f04f 000b 	mov.w	r0, #11
  403bdc:	f244 3471 	movw	r4, #17265	; 0x4371
  403be0:	f2c0 0440 	movt	r4, #64	; 0x40
  403be4:	47a0      	blx	r4
  403be6:	f04f 000c 	mov.w	r0, #12
  403bea:	47a0      	blx	r4
  403bec:	f04f 000d 	mov.w	r0, #13
  403bf0:	47a0      	blx	r4
  403bf2:	f44f 5090 	mov.w	r0, #4608	; 0x1200
  403bf6:	f2c4 000e 	movt	r0, #16398	; 0x400e
  403bfa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  403bfe:	6302      	str	r2, [r0, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  403c00:	6102      	str	r2, [r0, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403c02:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  403c06:	f44f 6460 	mov.w	r4, #3584	; 0xe00
  403c0a:	f2c4 040e 	movt	r4, #16398	; 0x400e
  403c0e:	f04f 0504 	mov.w	r5, #4
  403c12:	6165      	str	r5, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403c14:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  403c18:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  403c1a:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  403c1e:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  403c20:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  403c22:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  403c26:	6f21      	ldr	r1, [r4, #112]	; 0x70
  403c28:	f021 0604 	bic.w	r6, r1, #4
  403c2c:	6726      	str	r6, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  403c2e:	6f67      	ldr	r7, [r4, #116]	; 0x74
  403c30:	f027 0304 	bic.w	r3, r7, #4
  403c34:	6763      	str	r3, [r4, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403c36:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  403c3a:	6302      	str	r2, [r0, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  403c3c:	6102      	str	r2, [r0, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403c3e:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403c42:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  403c46:	6321      	str	r1, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  403c48:	6121      	str	r1, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403c4a:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403c4e:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  403c52:	6306      	str	r6, [r0, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  403c54:	6106      	str	r6, [r0, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403c56:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
	ioport_set_pin_dir(IO1_LED2_PIN, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  403c5a:	f04f 0701 	mov.w	r7, #1
  403c5e:	f6c0 0700 	movt	r7, #2048	; 0x800
  403c62:	f04f 0003 	mov.w	r0, #3
  403c66:	4639      	mov	r1, r7
  403c68:	f643 66f5 	movw	r6, #16117	; 0x3ef5
  403c6c:	f2c0 0640 	movt	r6, #64	; 0x40
  403c70:	47b0      	blx	r6
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  403c72:	4628      	mov	r0, r5
  403c74:	4639      	mov	r1, r7
  403c76:	47b0      	blx	r6
#endif

	/* Configure SPI pins */
#ifdef CONF_BOARD_SPI
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  403c78:	f04f 000c 	mov.w	r0, #12
  403c7c:	4639      	mov	r1, r7
  403c7e:	47b0      	blx	r6
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  403c80:	f04f 000d 	mov.w	r0, #13
  403c84:	4639      	mov	r1, r7
  403c86:	47b0      	blx	r6
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  403c88:	f04f 000e 	mov.w	r0, #14
  403c8c:	4639      	mov	r1, r7
  403c8e:	47b0      	blx	r6

#ifdef CONF_BOARD_SPI_NPCS1
#if defined(CONF_BOARD_SPI_NPCS1_GPIO) && defined(CONF_BOARD_SPI_NPCS1_FLAGS)
	gpio_configure_pin(CONF_BOARD_SPI_NPCS1_GPIO, CONF_BOARD_SPI_NPCS1_FLAGS);
#else
	gpio_configure_pin(SPI_NPCS1_PA9_GPIO, SPI_NPCS1_PA9_FLAGS);
  403c90:	f04f 0009 	mov.w	r0, #9
  403c94:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403c98:	47b0      	blx	r6

#ifdef CONF_BOARD_SPI_NPCS2
#if defined(CONF_BOARD_SPI_NPCS2_GPIO) && defined(CONF_BOARD_SPI_NPCS2_FLAGS)
	gpio_configure_pin(CONF_BOARD_SPI_NPCS2_GPIO, CONF_BOARD_SPI_NPCS2_FLAGS);
#else
	gpio_configure_pin(SPI_NPCS2_PA10_GPIO, SPI_NPCS2_PA10_FLAGS);
  403c9a:	f04f 000a 	mov.w	r0, #10
  403c9e:	f04f 0101 	mov.w	r1, #1
  403ca2:	f2c1 0100 	movt	r1, #4096	; 0x1000
  403ca6:	47b0      	blx	r6
#endif
#endif
#endif /* CONF_BOARD_SPI */

#ifdef CONF_BOARD_OLED_UG_2832HSWEG04
	gpio_configure_pin(UG_2832HSWEG04_DATA_CMD_GPIO, UG_2832HSWEG04_DATA_CMD_FLAGS);
  403ca8:	f04f 0701 	mov.w	r7, #1
  403cac:	f6c3 0700 	movt	r7, #14336	; 0x3800
  403cb0:	f04f 0055 	mov.w	r0, #85	; 0x55
  403cb4:	4639      	mov	r1, r7
  403cb6:	47b0      	blx	r6
	gpio_configure_pin(UG_2832HSWEG04_RESET_GPIO, UG_2832HSWEG04_RESET_FLAGS);
  403cb8:	f04f 005f 	mov.w	r0, #95	; 0x5f
  403cbc:	4639      	mov	r1, r7
  403cbe:	47b0      	blx	r6
#endif

#ifdef CONF_BOARD_SD_MMC_SPI
	gpio_configure_pin(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
  403cc0:	f04f 005b 	mov.w	r0, #91	; 0x5b
  403cc4:	f04f 0101 	mov.w	r1, #1
  403cc8:	f6c2 0100 	movt	r1, #10240	; 0x2800
  403ccc:	47b0      	blx	r6
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  403cce:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  403cd0:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  403cd4:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  403cd6:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  403cd8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  403cdc:	6f20      	ldr	r0, [r4, #112]	; 0x70
  403cde:	f020 0304 	bic.w	r3, r0, #4
  403ce2:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  403ce4:	6f62      	ldr	r2, [r4, #116]	; 0x74
  403ce6:	f022 0104 	bic.w	r1, r2, #4
  403cea:	6761      	str	r1, [r4, #116]	; 0x74
  403cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403cee:	bf00      	nop

00403cf0 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
  403cf0:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
  403cf2:	f04f 0401 	mov.w	r4, #1
  403cf6:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
  403cf8:	f04f 0400 	mov.w	r4, #0
  403cfc:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
  403cfe:	f240 2502 	movw	r5, #514	; 0x202
  403d02:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
  403d06:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
  403d0a:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  403d0e:	6845      	ldr	r5, [r0, #4]
  403d10:	432b      	orrs	r3, r5
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
  403d12:	ea4f 0242 	mov.w	r2, r2, lsl #1
  403d16:	fbb1 f1f2 	udiv	r1, r1, r2
  403d1a:	f101 32ff 	add.w	r2, r1, #4294967295
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  403d1e:	ea4f 6102 	mov.w	r1, r2, lsl #24
  403d22:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
  403d26:	6043      	str	r3, [r0, #4]
	return 0;
}
  403d28:	4620      	mov	r0, r4
  403d2a:	bc30      	pop	{r4, r5}
  403d2c:	4770      	bx	lr
  403d2e:	bf00      	nop

00403d30 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
  403d30:	6843      	ldr	r3, [r0, #4]
  403d32:	4319      	orrs	r1, r3
  403d34:	ea4f 12c2 	mov.w	r2, r2, lsl #7
  403d38:	b2d3      	uxtb	r3, r2
  403d3a:	4319      	orrs	r1, r3
  403d3c:	6041      	str	r1, [r0, #4]
  403d3e:	4770      	bx	lr

00403d40 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
  403d40:	f04f 0301 	mov.w	r3, #1
  403d44:	fa03 f101 	lsl.w	r1, r3, r1
  403d48:	6101      	str	r1, [r0, #16]
  403d4a:	4770      	bx	lr

00403d4c <adc_get_channel_value>:
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;

	if (15 >= adc_ch) {
  403d4c:	290f      	cmp	r1, #15
  403d4e:	d804      	bhi.n	403d5a <adc_get_channel_value+0xe>
		ul_data = *(p_adc->ADC_CDR + adc_ch);
  403d50:	f101 0114 	add.w	r1, r1, #20
  403d54:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  403d58:	4770      	bx	lr
 *
 * \return ADC value of the specified channel.
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;
  403d5a:	f04f 0000 	mov.w	r0, #0
	if (15 >= adc_ch) {
		ul_data = *(p_adc->ADC_CDR + adc_ch);
	}

	return ul_data;
}
  403d5e:	4770      	bx	lr

00403d60 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  403d60:	b10a      	cbz	r2, 403d66 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
  403d62:	6641      	str	r1, [r0, #100]	; 0x64
  403d64:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
  403d66:	6601      	str	r1, [r0, #96]	; 0x60
  403d68:	4770      	bx	lr
  403d6a:	bf00      	nop

00403d6c <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  403d6c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/* 
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock 
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  403d70:	ea4f 0242 	mov.w	r2, r2, lsl #1
  403d74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403d78:	fbb3 f1f2 	udiv	r1, r3, r2
  403d7c:	f101 32ff 	add.w	r2, r1, #4294967295
  403d80:	ea4f 4382 	mov.w	r3, r2, lsl #18
  403d84:	ea4f 4193 	mov.w	r1, r3, lsr #18
  403d88:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
  403d8c:	4770      	bx	lr
  403d8e:	bf00      	nop

00403d90 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  403d90:	b410      	push	{r4}
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  403d92:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N)
	switch (ul_type) {
  403d94:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  403d98:	d030      	beq.n	403dfc <pio_set_peripheral+0x6c>
  403d9a:	d808      	bhi.n	403dae <pio_set_peripheral+0x1e>
  403d9c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  403da0:	d014      	beq.n	403dcc <pio_set_peripheral+0x3c>
  403da2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  403da6:	d01e      	beq.n	403de6 <pio_set_peripheral+0x56>
  403da8:	2900      	cmp	r1, #0
  403daa:	d03b      	beq.n	403e24 <pio_set_peripheral+0x94>
  403dac:	e039      	b.n	403e22 <pio_set_peripheral+0x92>
  403dae:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  403db2:	d037      	beq.n	403e24 <pio_set_peripheral+0x94>
  403db4:	d803      	bhi.n	403dbe <pio_set_peripheral+0x2e>
  403db6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  403dba:	d132      	bne.n	403e22 <pio_set_peripheral+0x92>
  403dbc:	e029      	b.n	403e12 <pio_set_peripheral+0x82>
  403dbe:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  403dc2:	d02f      	beq.n	403e24 <pio_set_peripheral+0x94>
  403dc4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  403dc8:	d12b      	bne.n	403e22 <pio_set_peripheral+0x92>
  403dca:	e02b      	b.n	403e24 <pio_set_peripheral+0x94>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403dcc:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  403dce:	6f04      	ldr	r4, [r0, #112]	; 0x70
  403dd0:	ea6f 0302 	mvn.w	r3, r2
  403dd4:	4021      	ands	r1, r4
  403dd6:	4019      	ands	r1, r3
  403dd8:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403dda:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  403ddc:	6f44      	ldr	r4, [r0, #116]	; 0x74
  403dde:	4021      	ands	r1, r4
  403de0:	400b      	ands	r3, r1
  403de2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  403de4:	e01d      	b.n	403e22 <pio_set_peripheral+0x92>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403de6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  403de8:	ea42 0103 	orr.w	r1, r2, r3
  403dec:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403dee:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  403df0:	6f41      	ldr	r1, [r0, #116]	; 0x74
  403df2:	400b      	ands	r3, r1
  403df4:	ea23 0302 	bic.w	r3, r3, r2
  403df8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  403dfa:	e012      	b.n	403e22 <pio_set_peripheral+0x92>

	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403dfc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  403dfe:	6f01      	ldr	r1, [r0, #112]	; 0x70
  403e00:	400b      	ands	r3, r1
  403e02:	ea23 0302 	bic.w	r3, r3, r2
  403e06:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403e08:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  403e0a:	ea42 0103 	orr.w	r1, r2, r3
  403e0e:	6741      	str	r1, [r0, #116]	; 0x74
		break;
  403e10:	e007      	b.n	403e22 <pio_set_peripheral+0x92>

	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403e12:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  403e14:	ea42 0103 	orr.w	r1, r2, r3
  403e18:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403e1a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  403e1c:	ea42 0103 	orr.w	r1, r2, r3
  403e20:	6741      	str	r1, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  403e22:	6042      	str	r2, [r0, #4]
}
  403e24:	bc10      	pop	{r4}
  403e26:	4770      	bx	lr

00403e28 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  403e28:	f012 0f10 	tst.w	r2, #16
  403e2c:	d010      	beq.n	403e50 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  403e2e:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  403e32:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  403e36:	bf14      	ite	ne
  403e38:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  403e3c:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  403e40:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  403e44:	bf14      	ite	ne
  403e46:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  403e4a:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  403e4e:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  403e50:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  403e54:	4770      	bx	lr
  403e56:	bf00      	nop

00403e58 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
  403e58:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  403e5a:	6401      	str	r1, [r0, #64]	; 0x40
  403e5c:	4770      	bx	lr
  403e5e:	bf00      	nop

00403e60 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  403e60:	6441      	str	r1, [r0, #68]	; 0x44
  403e62:	4770      	bx	lr

00403e64 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  403e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403e66:	4604      	mov	r4, r0
  403e68:	460d      	mov	r5, r1
  403e6a:	4616      	mov	r6, r2
  403e6c:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
  403e6e:	f643 6361 	movw	r3, #15969	; 0x3e61
  403e72:	f2c0 0340 	movt	r3, #64	; 0x40
  403e76:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  403e78:	4620      	mov	r0, r4
  403e7a:	4629      	mov	r1, r5
  403e7c:	9a06      	ldr	r2, [sp, #24]
  403e7e:	f643 5361 	movw	r3, #15713	; 0x3d61
  403e82:	f2c0 0340 	movt	r3, #64	; 0x40
  403e86:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  403e88:	b10f      	cbz	r7, 403e8e <pio_set_output+0x2a>
		p_pio->PIO_MDER = ul_mask;
  403e8a:	6525      	str	r5, [r4, #80]	; 0x50
  403e8c:	e000      	b.n	403e90 <pio_set_output+0x2c>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  403e8e:	6565      	str	r5, [r4, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  403e90:	b10e      	cbz	r6, 403e96 <pio_set_output+0x32>
		p_pio->PIO_SODR = ul_mask;
  403e92:	6325      	str	r5, [r4, #48]	; 0x30
  403e94:	e000      	b.n	403e98 <pio_set_output+0x34>
	} else {
		p_pio->PIO_CODR = ul_mask;
  403e96:	6365      	str	r5, [r4, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  403e98:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
  403e9a:	6025      	str	r5, [r4, #0]
  403e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403e9e:	bf00      	nop

00403ea0 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  403ea0:	b570      	push	{r4, r5, r6, lr}
  403ea2:	4604      	mov	r4, r0
  403ea4:	460d      	mov	r5, r1
  403ea6:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
  403ea8:	f643 6361 	movw	r3, #15969	; 0x3e61
  403eac:	f2c0 0340 	movt	r3, #64	; 0x40
  403eb0:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  403eb2:	4620      	mov	r0, r4
  403eb4:	4629      	mov	r1, r5
  403eb6:	f006 0201 	and.w	r2, r6, #1
  403eba:	f643 5361 	movw	r3, #15713	; 0x3d61
  403ebe:	f2c0 0340 	movt	r3, #64	; 0x40
  403ec2:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  403ec4:	f016 0f0a 	tst.w	r6, #10
		p_pio->PIO_IFER = ul_mask;
  403ec8:	bf14      	ite	ne
  403eca:	6225      	strne	r5, [r4, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  403ecc:	6265      	streq	r5, [r4, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  403ece:	f016 0f02 	tst.w	r6, #2
  403ed2:	d002      	beq.n	403eda <pio_set_input+0x3a>
		p_pio->PIO_IFSCDR = ul_mask;
  403ed4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  403ed8:	e004      	b.n	403ee4 <pio_set_input+0x44>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  403eda:	f016 0f08 	tst.w	r6, #8
			p_pio->PIO_IFSCER = ul_mask;
  403ede:	bf18      	it	ne
  403ee0:	f8c4 5084 	strne.w	r5, [r4, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  403ee4:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
  403ee6:	6025      	str	r5, [r4, #0]
  403ee8:	bd70      	pop	{r4, r5, r6, pc}
  403eea:	bf00      	nop

00403eec <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  403eec:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  403eee:	4770      	bx	lr

00403ef0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  403ef0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  403ef2:	4770      	bx	lr

00403ef4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  403ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
  403ef6:	b083      	sub	sp, #12
  403ef8:	460d      	mov	r5, r1
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  403efa:	ea4f 1650 	mov.w	r6, r0, lsr #5
  403efe:	f506 1100 	add.w	r1, r6, #2097152	; 0x200000
  403f02:	f201 7207 	addw	r2, r1, #1799	; 0x707
  403f06:	ea4f 2642 	mov.w	r6, r2, lsl #9

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  403f0a:	f005 44f0 	and.w	r4, r5, #2013265920	; 0x78000000
  403f0e:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
  403f12:	d064      	beq.n	403fde <pio_configure_pin+0xea>
  403f14:	d80a      	bhi.n	403f2c <pio_configure_pin+0x38>
  403f16:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
  403f1a:	d02c      	beq.n	403f76 <pio_configure_pin+0x82>
  403f1c:	f1b4 5fc0 	cmp.w	r4, #402653184	; 0x18000000
  403f20:	d043      	beq.n	403faa <pio_configure_pin+0xb6>
  403f22:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
  403f26:	f040 809d 	bne.w	404064 <pio_configure_pin+0x170>
  403f2a:	e00a      	b.n	403f42 <pio_configure_pin+0x4e>
  403f2c:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
  403f30:	d07e      	beq.n	404030 <pio_configure_pin+0x13c>
  403f32:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
  403f36:	d07b      	beq.n	404030 <pio_configure_pin+0x13c>
  403f38:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
  403f3c:	f040 8092 	bne.w	404064 <pio_configure_pin+0x170>
  403f40:	e067      	b.n	404012 <pio_configure_pin+0x11e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  403f42:	f000 031f 	and.w	r3, r0, #31
  403f46:	f04f 0401 	mov.w	r4, #1
  403f4a:	fa04 f703 	lsl.w	r7, r4, r3
  403f4e:	4630      	mov	r0, r6
  403f50:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403f54:	463a      	mov	r2, r7
  403f56:	f643 5391 	movw	r3, #15761	; 0x3d91
  403f5a:	f2c0 0340 	movt	r3, #64	; 0x40
  403f5e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  403f60:	4630      	mov	r0, r6
  403f62:	4639      	mov	r1, r7
  403f64:	ea05 0204 	and.w	r2, r5, r4
  403f68:	f643 5361 	movw	r3, #15713	; 0x3d61
  403f6c:	f2c0 0340 	movt	r3, #64	; 0x40
  403f70:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  403f72:	4620      	mov	r0, r4
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
  403f74:	e078      	b.n	404068 <pio_configure_pin+0x174>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  403f76:	f000 071f 	and.w	r7, r0, #31
  403f7a:	f04f 0401 	mov.w	r4, #1
  403f7e:	fa04 f707 	lsl.w	r7, r4, r7
  403f82:	4630      	mov	r0, r6
  403f84:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403f88:	463a      	mov	r2, r7
  403f8a:	f643 5391 	movw	r3, #15761	; 0x3d91
  403f8e:	f2c0 0340 	movt	r3, #64	; 0x40
  403f92:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  403f94:	4630      	mov	r0, r6
  403f96:	4639      	mov	r1, r7
  403f98:	ea05 0204 	and.w	r2, r5, r4
  403f9c:	f643 5361 	movw	r3, #15713	; 0x3d61
  403fa0:	f2c0 0340 	movt	r3, #64	; 0x40
  403fa4:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  403fa6:	4620      	mov	r0, r4
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
  403fa8:	e05e      	b.n	404068 <pio_configure_pin+0x174>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  403faa:	f000 001f 	and.w	r0, r0, #31
  403fae:	f04f 0401 	mov.w	r4, #1
  403fb2:	fa04 f700 	lsl.w	r7, r4, r0
  403fb6:	4630      	mov	r0, r6
  403fb8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403fbc:	463a      	mov	r2, r7
  403fbe:	f643 5391 	movw	r3, #15761	; 0x3d91
  403fc2:	f2c0 0340 	movt	r3, #64	; 0x40
  403fc6:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  403fc8:	4630      	mov	r0, r6
  403fca:	4639      	mov	r1, r7
  403fcc:	ea05 0204 	and.w	r2, r5, r4
  403fd0:	f643 5361 	movw	r3, #15713	; 0x3d61
  403fd4:	f2c0 0340 	movt	r3, #64	; 0x40
  403fd8:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  403fda:	4620      	mov	r0, r4
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
  403fdc:	e044      	b.n	404068 <pio_configure_pin+0x174>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  403fde:	f000 021f 	and.w	r2, r0, #31
  403fe2:	f04f 0401 	mov.w	r4, #1
  403fe6:	fa04 f702 	lsl.w	r7, r4, r2
  403fea:	4630      	mov	r0, r6
  403fec:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  403ff0:	463a      	mov	r2, r7
  403ff2:	f643 5391 	movw	r3, #15761	; 0x3d91
  403ff6:	f2c0 0340 	movt	r3, #64	; 0x40
  403ffa:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  403ffc:	4630      	mov	r0, r6
  403ffe:	4639      	mov	r1, r7
  404000:	ea05 0204 	and.w	r2, r5, r4
  404004:	f643 5361 	movw	r3, #15713	; 0x3d61
  404008:	f2c0 0340 	movt	r3, #64	; 0x40
  40400c:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  40400e:	4620      	mov	r0, r4
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
  404010:	e02a      	b.n	404068 <pio_configure_pin+0x174>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  404012:	f000 011f 	and.w	r1, r0, #31
  404016:	f04f 0401 	mov.w	r4, #1
  40401a:	4630      	mov	r0, r6
  40401c:	fa04 f101 	lsl.w	r1, r4, r1
  404020:	462a      	mov	r2, r5
  404022:	f643 63a1 	movw	r3, #16033	; 0x3ea1
  404026:	f2c0 0340 	movt	r3, #64	; 0x40
  40402a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  40402c:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  40402e:	e01b      	b.n	404068 <pio_configure_pin+0x174>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  404030:	f000 031f 	and.w	r3, r0, #31
  404034:	f04f 0401 	mov.w	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  404038:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40403c:	ea05 0004 	and.w	r0, r5, r4
  404040:	9000      	str	r0, [sp, #0]
  404042:	4630      	mov	r0, r6
  404044:	fa04 f103 	lsl.w	r1, r4, r3
  404048:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  40404c:	bf14      	ite	ne
  40404e:	2200      	movne	r2, #0
  404050:	2201      	moveq	r2, #1
  404052:	f3c5 0380 	ubfx	r3, r5, #2, #1
  404056:	f643 6565 	movw	r5, #15973	; 0x3e65
  40405a:	f2c0 0540 	movt	r5, #64	; 0x40
  40405e:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
  404060:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  404062:	e001      	b.n	404068 <pio_configure_pin+0x174>

	default:
		return 0;
  404064:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
  404068:	b003      	add	sp, #12
  40406a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0040406c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40406c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404070:	4680      	mov	r8, r0
  404072:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  404074:	f643 63ed 	movw	r3, #16109	; 0x3eed
  404078:	f2c0 0340 	movt	r3, #64	; 0x40
  40407c:	4798      	blx	r3
  40407e:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  404080:	4640      	mov	r0, r8
  404082:	f643 61f1 	movw	r1, #16113	; 0x3ef1
  404086:	f2c0 0140 	movt	r1, #64	; 0x40
  40408a:	4788      	blx	r1

	/* Check pending events */
	if (status != 0) {
  40408c:	4005      	ands	r5, r0
  40408e:	d014      	beq.n	4040ba <pio_handler_process+0x4e>
  404090:	4c12      	ldr	r4, [pc, #72]	; (4040dc <pio_handler_process+0x70>)
 * \brief Process an interrupt request on the given PIO controller.
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
  404092:	4627      	mov	r7, r4
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  404094:	f854 0c0c 	ldr.w	r0, [r4, #-12]
  404098:	42b0      	cmp	r0, r6
  40409a:	d10a      	bne.n	4040b2 <pio_handler_process+0x46>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40409c:	f854 1c08 	ldr.w	r1, [r4, #-8]
  4040a0:	4229      	tst	r1, r5
  4040a2:	d006      	beq.n	4040b2 <pio_handler_process+0x46>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4040a4:	6822      	ldr	r2, [r4, #0]
  4040a6:	4630      	mov	r0, r6
  4040a8:	4790      	blx	r2
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4040aa:	f854 3c08 	ldr.w	r3, [r4, #-8]
  4040ae:	ea25 0503 	bic.w	r5, r5, r3
  4040b2:	f104 0410 	add.w	r4, r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4040b6:	2d00      	cmp	r5, #0
  4040b8:	d1eb      	bne.n	404092 <pio_handler_process+0x26>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4040ba:	f641 415c 	movw	r1, #7260	; 0x1c5c
  4040be:	f2c2 0100 	movt	r1, #8192	; 0x2000
  4040c2:	6808      	ldr	r0, [r1, #0]
  4040c4:	b138      	cbz	r0, 4040d6 <pio_handler_process+0x6a>
		if (pio_capture_handler) {
  4040c6:	f641 3264 	movw	r2, #7012	; 0x1b64
  4040ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
  4040ce:	6813      	ldr	r3, [r2, #0]
  4040d0:	b10b      	cbz	r3, 4040d6 <pio_handler_process+0x6a>
			pio_capture_handler(p_pio);
  4040d2:	4640      	mov	r0, r8
  4040d4:	4798      	blx	r3
  4040d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4040da:	bf00      	nop
  4040dc:	20001b74 	.word	0x20001b74

004040e0 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4040e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4040e2:	f641 3460 	movw	r4, #7008	; 0x1b60
  4040e6:	f2c2 0400 	movt	r4, #8192	; 0x2000
  4040ea:	6824      	ldr	r4, [r4, #0]
  4040ec:	2c06      	cmp	r4, #6
  4040ee:	d81c      	bhi.n	40412a <pio_handler_set+0x4a>
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
  4040f0:	f641 3768 	movw	r7, #7016	; 0x1b68
  4040f4:	f2c2 0700 	movt	r7, #8192	; 0x2000
  4040f8:	ea4f 1604 	mov.w	r6, r4, lsl #4
  4040fc:	19bd      	adds	r5, r7, r6
	pSource->id = ul_id;
  4040fe:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
  404100:	606a      	str	r2, [r5, #4]
	pSource->attr = ul_attr;
  404102:	60ab      	str	r3, [r5, #8]
	pSource->handler = p_handler;
  404104:	9906      	ldr	r1, [sp, #24]
  404106:	60e9      	str	r1, [r5, #12]
	gs_ul_nb_sources++;
  404108:	f104 0401 	add.w	r4, r4, #1
  40410c:	f641 3160 	movw	r1, #7008	; 0x1b60
  404110:	f2c2 0100 	movt	r1, #8192	; 0x2000
  404114:	600c      	str	r4, [r1, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  404116:	4611      	mov	r1, r2
  404118:	461a      	mov	r2, r3
  40411a:	f643 6329 	movw	r3, #15913	; 0x3e29
  40411e:	f2c0 0340 	movt	r3, #64	; 0x40
  404122:	4798      	blx	r3

	return 0;
  404124:	f04f 0000 	mov.w	r0, #0
  404128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  40412a:	f04f 0001 	mov.w	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  40412e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00404130 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  404130:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  404132:	f44f 6060 	mov.w	r0, #3584	; 0xe00
  404136:	f2c4 000e 	movt	r0, #16398	; 0x400e
  40413a:	f04f 010b 	mov.w	r1, #11
  40413e:	f244 036d 	movw	r3, #16493	; 0x406d
  404142:	f2c0 0340 	movt	r3, #64	; 0x40
  404146:	4798      	blx	r3
  404148:	bd08      	pop	{r3, pc}
  40414a:	bf00      	nop

0040414c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40414c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40414e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  404152:	f2c4 000e 	movt	r0, #16398	; 0x400e
  404156:	f04f 010c 	mov.w	r1, #12
  40415a:	f244 036d 	movw	r3, #16493	; 0x406d
  40415e:	f2c0 0340 	movt	r3, #64	; 0x40
  404162:	4798      	blx	r3
  404164:	bd08      	pop	{r3, pc}
  404166:	bf00      	nop

00404168 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  404168:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40416a:	f44f 5090 	mov.w	r0, #4608	; 0x1200
  40416e:	f2c4 000e 	movt	r0, #16398	; 0x400e
  404172:	f04f 010d 	mov.w	r1, #13
  404176:	f244 036d 	movw	r3, #16493	; 0x406d
  40417a:	f2c0 0340 	movt	r3, #64	; 0x40
  40417e:	4798      	blx	r3
  404180:	bd08      	pop	{r3, pc}
  404182:	bf00      	nop

00404184 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  404184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404188:	4605      	mov	r5, r0
  40418a:	460c      	mov	r4, r1
  40418c:	4691      	mov	r9, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  40418e:	f643 63f1 	movw	r3, #16113	; 0x3ef1
  404192:	f2c0 0340 	movt	r3, #64	; 0x40
  404196:	4798      	blx	r3
  404198:	4680      	mov	r8, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  40419a:	4628      	mov	r0, r5
  40419c:	f04f 31ff 	mov.w	r1, #4294967295
  4041a0:	f643 6261 	movw	r2, #15969	; 0x3e61
  4041a4:	f2c0 0240 	movt	r2, #64	; 0x40
  4041a8:	4790      	blx	r2
	pio_get_interrupt_status(p_pio);
  4041aa:	4628      	mov	r0, r5
  4041ac:	f643 61ed 	movw	r1, #16109	; 0x3eed
  4041b0:	f2c0 0140 	movt	r1, #64	; 0x40
  4041b4:	4788      	blx	r1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4041b6:	ea4f 1054 	mov.w	r0, r4, lsr #5
  4041ba:	f004 071f 	and.w	r7, r4, #31
  4041be:	f04f 0601 	mov.w	r6, #1
  4041c2:	fa06 f607 	lsl.w	r6, r6, r7
  4041c6:	f44f 4761 	mov.w	r7, #57600	; 0xe100
  4041ca:	f2ce 0700 	movt	r7, #57344	; 0xe000
  4041ce:	f100 0320 	add.w	r3, r0, #32
  4041d2:	f847 6023 	str.w	r6, [r7, r3, lsl #2]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4041d6:	f100 0260 	add.w	r2, r0, #96	; 0x60
  4041da:	f847 6022 	str.w	r6, [r7, r2, lsl #2]
    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  4041de:	2c00      	cmp	r4, #0
  4041e0:	da0d      	bge.n	4041fe <pio_handler_set_priority+0x7a>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4041e2:	f004 040f 	and.w	r4, r4, #15
  4041e6:	ea4f 1e09 	mov.w	lr, r9, lsl #4
  4041ea:	fa5f f98e 	uxtb.w	r9, lr
  4041ee:	f64e 41fc 	movw	r1, #60668	; 0xecfc
  4041f2:	f2ce 0100 	movt	r1, #57344	; 0xe000
  4041f6:	1863      	adds	r3, r4, r1
  4041f8:	f883 9018 	strb.w	r9, [r3, #24]
  4041fc:	e009      	b.n	404212 <pio_handler_set_priority+0x8e>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4041fe:	ea4f 1c09 	mov.w	ip, r9, lsl #4
  404202:	fa5f f98c 	uxtb.w	r9, ip
  404206:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
  40420a:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
  40420e:	f884 9300 	strb.w	r9, [r4, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  404212:	f44f 4261 	mov.w	r2, #57600	; 0xe100
  404216:	f2ce 0200 	movt	r2, #57344	; 0xe000
  40421a:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  40421e:	4628      	mov	r0, r5
  404220:	4641      	mov	r1, r8
  404222:	f643 6359 	movw	r3, #15961	; 0x3e59
  404226:	f2c0 0340 	movt	r3, #64	; 0x40
  40422a:	4798      	blx	r3
  40422c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00404230 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  404230:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404234:	f2c4 030e 	movt	r3, #16398	; 0x400e
  404238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40423a:	f022 0170 	bic.w	r1, r2, #112	; 0x70
  40423e:	4308      	orrs	r0, r1
  404240:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404242:	6e98      	ldr	r0, [r3, #104]	; 0x68
  404244:	f010 0f08 	tst.w	r0, #8
  404248:	d007      	beq.n	40425a <pmc_switch_mck_to_pllack+0x2a>
  40424a:	e010      	b.n	40426e <pmc_switch_mck_to_pllack+0x3e>
  40424c:	f100 33ff 	add.w	r3, r0, #4294967295
  404250:	6e90      	ldr	r0, [r2, #104]	; 0x68
  404252:	f010 0f08 	tst.w	r0, #8
  404256:	d038      	beq.n	4042ca <pmc_switch_mck_to_pllack+0x9a>
  404258:	e009      	b.n	40426e <pmc_switch_mck_to_pllack+0x3e>
  40425a:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40425e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  404262:	f2c4 020e 	movt	r2, #16398	; 0x400e
  404266:	6e91      	ldr	r1, [r2, #104]	; 0x68
  404268:	f011 0f08 	tst.w	r1, #8
  40426c:	d0ee      	beq.n	40424c <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40426e:	f44f 6180 	mov.w	r1, #1024	; 0x400
  404272:	f2c4 010e 	movt	r1, #16398	; 0x400e
  404276:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  404278:	f022 0303 	bic.w	r3, r2, #3
  40427c:	f043 0002 	orr.w	r0, r3, #2
  404280:	6308      	str	r0, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404282:	6e89      	ldr	r1, [r1, #104]	; 0x68
  404284:	f011 0f08 	tst.w	r1, #8
  404288:	d009      	beq.n	40429e <pmc_switch_mck_to_pllack+0x6e>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  40428a:	f04f 0000 	mov.w	r0, #0
  40428e:	4770      	bx	lr
  404290:	f103 33ff 	add.w	r3, r3, #4294967295
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404294:	6e91      	ldr	r1, [r2, #104]	; 0x68
  404296:	f011 0f08 	tst.w	r1, #8
  40429a:	d013      	beq.n	4042c4 <pmc_switch_mck_to_pllack+0x94>
  40429c:	e009      	b.n	4042b2 <pmc_switch_mck_to_pllack+0x82>
  40429e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4042a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4042a6:	f2c4 020e 	movt	r2, #16398	; 0x400e
  4042aa:	6e90      	ldr	r0, [r2, #104]	; 0x68
  4042ac:	f010 0f08 	tst.w	r0, #8
  4042b0:	d0ee      	beq.n	404290 <pmc_switch_mck_to_pllack+0x60>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4042b2:	f04f 0000 	mov.w	r0, #0
  4042b6:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4042b8:	f04f 0001 	mov.w	r0, #1
  4042bc:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4042be:	f04f 0001 	mov.w	r0, #1
		}
	}

	return 0;
}
  4042c2:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4042c4:	3b01      	subs	r3, #1
  4042c6:	d1f0      	bne.n	4042aa <pmc_switch_mck_to_pllack+0x7a>
  4042c8:	e7f9      	b.n	4042be <pmc_switch_mck_to_pllack+0x8e>
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4042ca:	1e58      	subs	r0, r3, #1
  4042cc:	d1cb      	bne.n	404266 <pmc_switch_mck_to_pllack+0x36>
  4042ce:	e7f3      	b.n	4042b8 <pmc_switch_mck_to_pllack+0x88>

004042d0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4042d0:	b188      	cbz	r0, 4042f6 <pmc_switch_mainck_to_xtal+0x26>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4042d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4042d6:	f2c4 010e 	movt	r1, #16398	; 0x400e
  4042da:	6a08      	ldr	r0, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
  4042dc:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  4042e0:	f6cf 62c8 	movt	r2, #65224	; 0xfec8
  4042e4:	4002      	ands	r2, r0
  4042e6:	f04f 0302 	mov.w	r3, #2
  4042ea:	f2c0 1337 	movt	r3, #311	; 0x137
  4042ee:	ea42 0003 	orr.w	r0, r2, r3
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4042f2:	6208      	str	r0, [r1, #32]
  4042f4:	4770      	bx	lr
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4042f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4042fa:	f2c4 030e 	movt	r3, #16398	; 0x400e
  4042fe:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
  404300:	f422 105c 	bic.w	r0, r2, #3604480	; 0x370000
  404304:	f020 0203 	bic.w	r2, r0, #3
  404308:	f442 105c 	orr.w	r0, r2, #3604480	; 0x370000
  40430c:	f040 0201 	orr.w	r2, r0, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  404310:	ea4f 6101 	mov.w	r1, r1, lsl #24
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
  404314:	ea42 4011 	orr.w	r0, r2, r1, lsr #16
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  404318:	6218      	str	r0, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40431a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40431e:	f2c4 020e 	movt	r2, #16398	; 0x400e
  404322:	6e93      	ldr	r3, [r2, #104]	; 0x68
  404324:	f013 0f01 	tst.w	r3, #1
  404328:	d0fb      	beq.n	404322 <pmc_switch_mainck_to_xtal+0x52>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
  40432a:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40432e:	f2c4 010e 	movt	r1, #16398	; 0x400e
  404332:	6a08      	ldr	r0, [r1, #32]
  404334:	f040 729b 	orr.w	r2, r0, #20316160	; 0x1360000
  404338:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
  40433c:	620b      	str	r3, [r1, #32]
  40433e:	4770      	bx	lr

00404340 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  404340:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404344:	f2c4 030e 	movt	r3, #16398	; 0x400e
  404348:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40434a:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40434e:	4770      	bx	lr

00404350 <pmc_disable_pllack>:
/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  404350:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404354:	f2c4 030e 	movt	r3, #16398	; 0x400e
  404358:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40435c:	629a      	str	r2, [r3, #40]	; 0x28
  40435e:	4770      	bx	lr

00404360 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  404360:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404364:	f2c4 030e 	movt	r3, #16398	; 0x400e
  404368:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40436a:	f000 0002 	and.w	r0, r0, #2
  40436e:	4770      	bx	lr

00404370 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  404370:	2822      	cmp	r0, #34	; 0x22
  404372:	d835      	bhi.n	4043e0 <pmc_enable_periph_clk+0x70>
		return 1;
	}

	if (ul_id < 32) {
  404374:	281f      	cmp	r0, #31
  404376:	d817      	bhi.n	4043a8 <pmc_enable_periph_clk+0x38>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  404378:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40437c:	f2c4 010e 	movt	r1, #16398	; 0x400e
  404380:	698a      	ldr	r2, [r1, #24]
  404382:	f04f 0301 	mov.w	r3, #1
  404386:	fa03 f300 	lsl.w	r3, r3, r0
  40438a:	401a      	ands	r2, r3
  40438c:	4293      	cmp	r3, r2
  40438e:	d02a      	beq.n	4043e6 <pmc_enable_periph_clk+0x76>
			PMC->PMC_PCER0 = 1 << ul_id;
  404390:	f04f 0101 	mov.w	r1, #1
  404394:	fa01 f000 	lsl.w	r0, r1, r0
  404398:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40439c:	f2c4 020e 	movt	r2, #16398	; 0x400e
  4043a0:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4043a2:	f04f 0000 	mov.w	r0, #0
  4043a6:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4043a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4043ac:	f2c4 030e 	movt	r3, #16398	; 0x400e
  4043b0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
  4043b4:	f1a0 0020 	sub.w	r0, r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4043b8:	f04f 0101 	mov.w	r1, #1
  4043bc:	fa01 f100 	lsl.w	r1, r1, r0
  4043c0:	400a      	ands	r2, r1
  4043c2:	4291      	cmp	r1, r2
  4043c4:	d012      	beq.n	4043ec <pmc_enable_periph_clk+0x7c>
			PMC->PMC_PCER1 = 1 << ul_id;
  4043c6:	f04f 0301 	mov.w	r3, #1
  4043ca:	fa03 f000 	lsl.w	r0, r3, r0
  4043ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4043d2:	f2c4 020e 	movt	r2, #16398	; 0x400e
  4043d6:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4043da:	f04f 0000 	mov.w	r0, #0
  4043de:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4043e0:	f04f 0001 	mov.w	r0, #1
  4043e4:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4043e6:	f04f 0000 	mov.w	r0, #0
  4043ea:	4770      	bx	lr
  4043ec:	f04f 0000 	mov.w	r0, #0
}
  4043f0:	4770      	bx	lr
  4043f2:	bf00      	nop

004043f4 <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4043f4:	2822      	cmp	r0, #34	; 0x22
  4043f6:	d835      	bhi.n	404464 <pmc_disable_periph_clk+0x70>
		return 1;
	}

	if (ul_id < 32) {
  4043f8:	281f      	cmp	r0, #31
  4043fa:	d817      	bhi.n	40442c <pmc_disable_periph_clk+0x38>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  4043fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
  404400:	f2c4 010e 	movt	r1, #16398	; 0x400e
  404404:	698a      	ldr	r2, [r1, #24]
  404406:	f04f 0301 	mov.w	r3, #1
  40440a:	fa03 f300 	lsl.w	r3, r3, r0
  40440e:	401a      	ands	r2, r3
  404410:	4293      	cmp	r3, r2
  404412:	d12a      	bne.n	40446a <pmc_disable_periph_clk+0x76>
			PMC->PMC_PCDR0 = 1 << ul_id;
  404414:	f04f 0101 	mov.w	r1, #1
  404418:	fa01 f000 	lsl.w	r0, r1, r0
  40441c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  404420:	f2c4 020e 	movt	r2, #16398	; 0x400e
  404424:	6150      	str	r0, [r2, #20]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  404426:	f04f 0000 	mov.w	r0, #0
  40442a:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  40442c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404430:	f2c4 030e 	movt	r3, #16398	; 0x400e
  404434:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
  404438:	f1a0 0020 	sub.w	r0, r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  40443c:	f04f 0101 	mov.w	r1, #1
  404440:	fa01 f100 	lsl.w	r1, r1, r0
  404444:	400a      	ands	r2, r1
  404446:	4291      	cmp	r1, r2
  404448:	d112      	bne.n	404470 <pmc_disable_periph_clk+0x7c>
			PMC->PMC_PCDR1 = 1 << ul_id;
  40444a:	f04f 0301 	mov.w	r3, #1
  40444e:	fa03 f000 	lsl.w	r0, r3, r0
  404452:	f44f 6280 	mov.w	r2, #1024	; 0x400
  404456:	f2c4 020e 	movt	r2, #16398	; 0x400e
  40445a:	f8c2 0104 	str.w	r0, [r2, #260]	; 0x104
		}
#endif
	}
	return 0;
  40445e:	f04f 0000 	mov.w	r0, #0
  404462:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  404464:	f04f 0001 	mov.w	r0, #1
  404468:	4770      	bx	lr
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  40446a:	f04f 0000 	mov.w	r0, #0
  40446e:	4770      	bx	lr
  404470:	f04f 0000 	mov.w	r0, #0
}
  404474:	4770      	bx	lr
  404476:	bf00      	nop

00404478 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_fastrc_used;
  404478:	f641 33d8 	movw	r3, #7128	; 0x1bd8
  40447c:	f2c2 0300 	movt	r3, #8192	; 0x2000
  404480:	7818      	ldrb	r0, [r3, #0]
}
  404482:	f080 0001 	eor.w	r0, r0, #1
  404486:	4770      	bx	lr

00404488 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  404488:	b508      	push	{r3, lr}
  40448a:	f04f 0015 	mov.w	r0, #21
  40448e:	f244 3371 	movw	r3, #17265	; 0x4371
  404492:	f2c0 0340 	movt	r3, #64	; 0x40
  404496:	4798      	blx	r3
  404498:	bd08      	pop	{r3, pc}
  40449a:	bf00      	nop

0040449c <spi_set_peripheral_chip_select_value>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_value Peripheral Chip Select value.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  40449c:	6843      	ldr	r3, [r0, #4]
  40449e:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
  4044a2:	6042      	str	r2, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4044a4:	6843      	ldr	r3, [r0, #4]
  4044a6:	ea4f 4101 	mov.w	r1, r1, lsl #16
  4044aa:	f401 2270 	and.w	r2, r1, #983040	; 0xf0000
  4044ae:	4313      	orrs	r3, r2
  4044b0:	6043      	str	r3, [r0, #4]
  4044b2:	4770      	bx	lr

004044b4 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  4044b4:	6843      	ldr	r3, [r0, #4]
  4044b6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
  4044ba:	6042      	str	r2, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  4044bc:	6843      	ldr	r3, [r0, #4]
  4044be:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  4044c2:	6041      	str	r1, [r0, #4]
  4044c4:	4770      	bx	lr
  4044c6:	bf00      	nop

004044c8 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4044c8:	b142      	cbz	r2, 4044dc <spi_set_clock_polarity+0x14>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4044ca:	f101 010c 	add.w	r1, r1, #12
  4044ce:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  4044d2:	f043 0201 	orr.w	r2, r3, #1
  4044d6:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  4044da:	4770      	bx	lr
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4044dc:	f101 010c 	add.w	r1, r1, #12
  4044e0:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  4044e4:	f023 0201 	bic.w	r2, r3, #1
  4044e8:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  4044ec:	4770      	bx	lr
  4044ee:	bf00      	nop

004044f0 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4044f0:	b142      	cbz	r2, 404504 <spi_set_clock_phase+0x14>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4044f2:	f101 010c 	add.w	r1, r1, #12
  4044f6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  4044fa:	f043 0202 	orr.w	r2, r3, #2
  4044fe:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  404502:	4770      	bx	lr
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  404504:	f101 010c 	add.w	r1, r1, #12
  404508:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  40450c:	f023 0202 	bic.w	r2, r3, #2
  404510:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  404514:	4770      	bx	lr
  404516:	bf00      	nop

00404518 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  404518:	2a04      	cmp	r2, #4
  40451a:	d10e      	bne.n	40453a <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40451c:	f101 010c 	add.w	r1, r1, #12
  404520:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  404524:	f023 0208 	bic.w	r2, r3, #8
  404528:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  40452c:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  404530:	f043 0204 	orr.w	r2, r3, #4
  404534:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  404538:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  40453a:	b972      	cbnz	r2, 40455a <spi_configure_cs_behavior+0x42>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40453c:	f101 010c 	add.w	r1, r1, #12
  404540:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  404544:	f023 0208 	bic.w	r2, r3, #8
  404548:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  40454c:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  404550:	f023 0204 	bic.w	r2, r3, #4
  404554:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  404558:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  40455a:	2a08      	cmp	r2, #8
  40455c:	d107      	bne.n	40456e <spi_configure_cs_behavior+0x56>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  40455e:	f101 010c 	add.w	r1, r1, #12
  404562:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  404566:	f043 0208 	orr.w	r2, r3, #8
  40456a:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  40456e:	4770      	bx	lr

00404570 <spi_set_bits_per_transfer>:
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  404570:	f101 010c 	add.w	r1, r1, #12
  404574:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  404578:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  40457c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  404580:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  404584:	431a      	orrs	r2, r3
  404586:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  40458a:	4770      	bx	lr

0040458c <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  40458c:	f100 33ff 	add.w	r3, r0, #4294967295
  404590:	1859      	adds	r1, r3, r1
  404592:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  404596:	f100 32ff 	add.w	r2, r0, #4294967295
  40459a:	2afe      	cmp	r2, #254	; 0xfe
		return -1;
	}

	return baud_div;
  40459c:	bf94      	ite	ls
  40459e:	b280      	uxthls	r0, r0
{
	int baud_div = div_ceil(mck, baudrate);

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
		return -1;
  4045a0:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}

	return baud_div;
}
  4045a4:	b200      	sxth	r0, r0
  4045a6:	4770      	bx	lr

004045a8 <spi_set_baudrate_div>:
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4045a8:	f101 010c 	add.w	r1, r1, #12
  4045ac:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  4045b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4045b4:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4045b8:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  4045bc:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  4045c0:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  4045c4:	4770      	bx	lr
  4045c6:	bf00      	nop

004045c8 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  4045c8:	b410      	push	{r4}
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  4045ca:	f101 010c 	add.w	r1, r1, #12
  4045ce:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  4045d2:	b2a4      	uxth	r4, r4
  4045d4:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  4045d8:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
			| SPI_CSR_DLYBCT(uc_dlybct);
  4045dc:	ea4f 6303 	mov.w	r3, r3, lsl #24
  4045e0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  4045e4:	4314      	orrs	r4, r2
  4045e6:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  4045ea:	bc10      	pop	{r4}
  4045ec:	4770      	bx	lr
  4045ee:	bf00      	nop

004045f0 <twi_mk_addr>:
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  4045f0:	460a      	mov	r2, r1
  4045f2:	b159      	cbz	r1, 40460c <twi_mk_addr+0x1c>
		return 0;

	val = addr[0];
  4045f4:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
  4045f6:	2901      	cmp	r1, #1
		val <<= 8;
		val |= addr[1];
  4045f8:	bfc4      	itt	gt
  4045fa:	7841      	ldrbgt	r1, [r0, #1]
  4045fc:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	}
	if (len > 2) {
  404600:	2a02      	cmp	r2, #2
  404602:	dd05      	ble.n	404610 <twi_mk_addr+0x20>
		val <<= 8;
		val |= addr[2];
  404604:	7880      	ldrb	r0, [r0, #2]
  404606:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
  40460a:	e001      	b.n	404610 <twi_mk_addr+0x20>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  40460c:	f04f 0300 	mov.w	r3, #0
	if (len > 2) {
		val <<= 8;
		val |= addr[2];
	}
	return val;
}
  404610:	4618      	mov	r0, r3
  404612:	4770      	bx	lr

00404614 <twi_enable_master_mode>:
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  404614:	f04f 0308 	mov.w	r3, #8
  404618:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  40461a:	f04f 0120 	mov.w	r1, #32
  40461e:	6001      	str	r1, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  404620:	f04f 0204 	mov.w	r2, #4
  404624:	6002      	str	r2, [r0, #0]
  404626:	4770      	bx	lr

00404628 <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  404628:	f44f 53d4 	mov.w	r3, #6784	; 0x1a80
  40462c:	f2c0 0306 	movt	r3, #6
  404630:	4299      	cmp	r1, r3
  404632:	d845      	bhi.n	4046c0 <twi_set_speed+0x98>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  404634:	ea4f 0141 	mov.w	r1, r1, lsl #1
  404638:	fbb2 f2f1 	udiv	r2, r2, r1
  40463c:	f1a2 0204 	sub.w	r2, r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  404640:	2aff      	cmp	r2, #255	; 0xff
  404642:	d92e      	bls.n	4046a2 <twi_set_speed+0x7a>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
  404644:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  404648:	2aff      	cmp	r2, #255	; 0xff
  40464a:	d918      	bls.n	40467e <twi_set_speed+0x56>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
  40464c:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  404650:	2aff      	cmp	r2, #255	; 0xff
  404652:	d917      	bls.n	404684 <twi_set_speed+0x5c>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
  404654:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  404658:	2aff      	cmp	r2, #255	; 0xff
  40465a:	d916      	bls.n	40468a <twi_set_speed+0x62>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
  40465c:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  404660:	2aff      	cmp	r2, #255	; 0xff
  404662:	d915      	bls.n	404690 <twi_set_speed+0x68>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
  404664:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  404668:	2aff      	cmp	r2, #255	; 0xff
  40466a:	d914      	bls.n	404696 <twi_set_speed+0x6e>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
  40466c:	ea4f 0252 	mov.w	r2, r2, lsr #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  404670:	2aff      	cmp	r2, #255	; 0xff
  404672:	d913      	bls.n	40469c <twi_set_speed+0x74>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
  404674:	ea4f 0252 	mov.w	r2, r2, lsr #1
	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
		/* Increase clock divider */
		ckdiv++;
  404678:	f04f 0307 	mov.w	r3, #7
  40467c:	e013      	b.n	4046a6 <twi_set_speed+0x7e>
  40467e:	f04f 0301 	mov.w	r3, #1
  404682:	e010      	b.n	4046a6 <twi_set_speed+0x7e>
  404684:	f04f 0302 	mov.w	r3, #2
  404688:	e00d      	b.n	4046a6 <twi_set_speed+0x7e>
  40468a:	f04f 0303 	mov.w	r3, #3
  40468e:	e00a      	b.n	4046a6 <twi_set_speed+0x7e>
  404690:	f04f 0304 	mov.w	r3, #4
  404694:	e007      	b.n	4046a6 <twi_set_speed+0x7e>
  404696:	f04f 0305 	mov.w	r3, #5
  40469a:	e004      	b.n	4046a6 <twi_set_speed+0x7e>
  40469c:	f04f 0306 	mov.w	r3, #6
  4046a0:	e001      	b.n	4046a6 <twi_set_speed+0x7e>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  4046a2:	f04f 0300 	mov.w	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  4046a6:	ea4f 6102 	mov.w	r1, r2, lsl #24
			TWI_CWGR_CKDIV(ckdiv);
  4046aa:	ea4f 4303 	mov.w	r3, r3, lsl #16
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  4046ae:	ea43 4111 	orr.w	r1, r3, r1, lsr #16
  4046b2:	b2d2      	uxtb	r2, r2
  4046b4:	ea41 0302 	orr.w	r3, r1, r2
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
  4046b8:	6103      	str	r3, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
  4046ba:	f04f 0000 	mov.w	r0, #0
  4046be:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  4046c0:	f04f 0001 	mov.w	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
  4046c4:	4770      	bx	lr
  4046c6:	bf00      	nop

004046c8 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  4046c8:	b570      	push	{r4, r5, r6, lr}
  4046ca:	4605      	mov	r5, r0
	uint32_t status, cnt = p_packet->length;
  4046cc:	68cc      	ldr	r4, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
  4046ce:	688e      	ldr	r6, [r1, #8]
	
	/* Check argument */
	if (cnt == 0) {
  4046d0:	2c00      	cmp	r4, #0
  4046d2:	d041      	beq.n	404758 <twi_master_read+0x90>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  4046d4:	f04f 0300 	mov.w	r3, #0
  4046d8:	6043      	str	r3, [r0, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  4046da:	684a      	ldr	r2, [r1, #4]
  4046dc:	ea4f 2002 	mov.w	r0, r2, lsl #8
  4046e0:	f400 7240 	and.w	r2, r0, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  4046e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  4046e8:	7c08      	ldrb	r0, [r1, #16]
  4046ea:	ea4f 4000 	mov.w	r0, r0, lsl #16
  4046ee:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
  4046f2:	4302      	orrs	r2, r0
  4046f4:	606a      	str	r2, [r5, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  4046f6:	60eb      	str	r3, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  4046f8:	4608      	mov	r0, r1
  4046fa:	6849      	ldr	r1, [r1, #4]
  4046fc:	f244 53f1 	movw	r3, #17905	; 0x45f1
  404700:	f2c0 0340 	movt	r3, #64	; 0x40
  404704:	4798      	blx	r3
  404706:	60e8      	str	r0, [r5, #12]

	/* Send a START Condition */
	p_twi->TWI_CR = TWI_CR_START;
  404708:	f04f 0101 	mov.w	r1, #1
  40470c:	6029      	str	r1, [r5, #0]
			return TWI_RECEIVE_NACK;
		}

		/* Last byte ? */
		if (cnt == 1) {
			p_twi->TWI_CR = TWI_CR_STOP;
  40470e:	f04f 0102 	mov.w	r1, #2
  404712:	e012      	b.n	40473a <twi_master_read+0x72>

	/* Send a START Condition */
	p_twi->TWI_CR = TWI_CR_START;

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  404714:	6a28      	ldr	r0, [r5, #32]
		if (status & TWI_SR_NACK) {
  404716:	f410 7f80 	tst.w	r0, #256	; 0x100
  40471a:	d120      	bne.n	40475e <twi_master_read+0x96>
			return TWI_RECEIVE_NACK;
		}

		/* Last byte ? */
		if (cnt == 1) {
  40471c:	2c01      	cmp	r4, #1
  40471e:	d104      	bne.n	40472a <twi_master_read+0x62>
			p_twi->TWI_CR = TWI_CR_STOP;
  404720:	6029      	str	r1, [r5, #0]
		}

		if (!(status & TWI_SR_RXRDY)) {
  404722:	f010 0f02 	tst.w	r0, #2
  404726:	d0f5      	beq.n	404714 <twi_master_read+0x4c>
  404728:	e002      	b.n	404730 <twi_master_read+0x68>
  40472a:	f010 0f02 	tst.w	r0, #2
  40472e:	d009      	beq.n	404744 <twi_master_read+0x7c>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  404730:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  404732:	f806 3b01 	strb.w	r3, [r6], #1
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send a START Condition */
	p_twi->TWI_CR = TWI_CR_START;

	while (cnt > 0) {
  404736:	3c01      	subs	r4, #1
  404738:	d006      	beq.n	404748 <twi_master_read+0x80>
		status = p_twi->TWI_SR;
  40473a:	6a28      	ldr	r0, [r5, #32]
		if (status & TWI_SR_NACK) {
  40473c:	f410 7f80 	tst.w	r0, #256	; 0x100
  404740:	d0ec      	beq.n	40471c <twi_master_read+0x54>
  404742:	e00f      	b.n	404764 <twi_master_read+0x9c>
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send a START Condition */
	p_twi->TWI_CR = TWI_CR_START;

	while (cnt > 0) {
  404744:	2c00      	cmp	r4, #0
  404746:	d1e5      	bne.n	404714 <twi_master_read+0x4c>
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  404748:	6a2a      	ldr	r2, [r5, #32]
  40474a:	f012 0f01 	tst.w	r2, #1
  40474e:	d0fb      	beq.n	404748 <twi_master_read+0x80>
	}

	p_twi->TWI_SR;
  404750:	6a2b      	ldr	r3, [r5, #32]

	return TWI_SUCCESS;
  404752:	f04f 0000 	mov.w	r0, #0
  404756:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t status, cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  404758:	f04f 0001 	mov.w	r0, #1
  40475c:	bd70      	pop	{r4, r5, r6, pc}
	p_twi->TWI_CR = TWI_CR_START;

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  40475e:	f04f 0005 	mov.w	r0, #5
  404762:	bd70      	pop	{r4, r5, r6, pc}
  404764:	f04f 0005 	mov.w	r0, #5
	}

	p_twi->TWI_SR;

	return TWI_SUCCESS;
}
  404768:	bd70      	pop	{r4, r5, r6, pc}
  40476a:	bf00      	nop

0040476c <twi_reset>:
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  40476c:	f04f 0380 	mov.w	r3, #128	; 0x80
  404770:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  404772:	6b03      	ldr	r3, [r0, #48]	; 0x30
  404774:	4770      	bx	lr
  404776:	bf00      	nop

00404778 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  404778:	b538      	push	{r3, r4, r5, lr}
  40477a:	4604      	mov	r4, r0
  40477c:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  40477e:	f04f 33ff 	mov.w	r3, #4294967295
  404782:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  404784:	6a03      	ldr	r3, [r0, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
  404786:	f244 716d 	movw	r1, #18285	; 0x476d
  40478a:	f2c0 0140 	movt	r1, #64	; 0x40
  40478e:	4788      	blx	r1

	twi_enable_master_mode(p_twi);
  404790:	4620      	mov	r0, r4
  404792:	f244 6215 	movw	r2, #17941	; 0x4615
  404796:	f2c0 0240 	movt	r2, #64	; 0x40
  40479a:	4790      	blx	r2

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  40479c:	4620      	mov	r0, r4
  40479e:	6869      	ldr	r1, [r5, #4]
  4047a0:	682a      	ldr	r2, [r5, #0]
  4047a2:	f244 6329 	movw	r3, #17961	; 0x4629
  4047a6:	f2c0 0340 	movt	r3, #64	; 0x40
  4047aa:	4798      	blx	r3
  4047ac:	2801      	cmp	r0, #1
  4047ae:	bf14      	ite	ne
  4047b0:	2000      	movne	r0, #0
  4047b2:	2001      	moveq	r0, #1
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
  4047b4:	7a69      	ldrb	r1, [r5, #9]
  4047b6:	2901      	cmp	r1, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  4047b8:	bf04      	itt	eq
  4047ba:	2140      	moveq	r1, #64	; 0x40
  4047bc:	6021      	streq	r1, [r4, #0]
	}

	return status;
}
  4047be:	bd38      	pop	{r3, r4, r5, pc}

004047c0 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  4047c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4047c4:	6043      	str	r3, [r0, #4]
  4047c6:	4770      	bx	lr

004047c8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4047c8:	e7fe      	b.n	4047c8 <Dummy_Handler>
  4047ca:	bf00      	nop

004047cc <Reset_Handler>:

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void) {
  4047cc:	b538      	push	{r3, r4, r5, lr}
  4047ce:	f647 63b8 	movw	r3, #32440	; 0x7eb8
  4047d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4047d6:	f383 8809 	msr	PSP, r3
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4047da:	f3bf 8f6f 	isb	sy
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
  4047de:	f3ef 8014 	mrs	r0, CONTROL
    __set_PSP(&_estack2); //stack grows downwards,
    __ISB();

    // Sets the CPU to use the process stack
	#define MASK_USE_PSP  0x02
    __set_CONTROL(__get_CONTROL() | MASK_USE_PSP);
  4047e2:	f040 0102 	orr.w	r1, r0, #2

    \param [in]    control  Control Register value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) );
  4047e6:	f381 8814 	msr	CONTROL, r1
  4047ea:	f3bf 8f6f 	isb	sy

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
  4047ee:	f240 0400 	movw	r4, #0
  4047f2:	f2c2 0400 	movt	r4, #8192	; 0x2000
  4047f6:	f248 722c 	movw	r2, #34604	; 0x872c
  4047fa:	f2c0 0240 	movt	r2, #64	; 0x40
  4047fe:	42a2      	cmp	r2, r4
  404800:	d003      	beq.n	40480a <Reset_Handler+0x3e>
        for (; pDest < &_erelocate;) {
  404802:	4d5a      	ldr	r5, [pc, #360]	; (40496c <Reset_Handler+0x1a0>)
  404804:	4b5a      	ldr	r3, [pc, #360]	; (404970 <Reset_Handler+0x1a4>)
  404806:	42ab      	cmp	r3, r5
  404808:	d304      	bcc.n	404814 <Reset_Handler+0x48>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
  40480a:	4b5a      	ldr	r3, [pc, #360]	; (404974 <Reset_Handler+0x1a8>)
  40480c:	4a5a      	ldr	r2, [pc, #360]	; (404978 <Reset_Handler+0x1ac>)
  40480e:	429a      	cmp	r2, r3
  404810:	d326      	bcc.n	404860 <Reset_Handler+0x94>
  404812:	e043      	b.n	40489c <Reset_Handler+0xd0>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void) {
  404814:	4859      	ldr	r0, [pc, #356]	; (40497c <Reset_Handler+0x1b0>)
  404816:	495a      	ldr	r1, [pc, #360]	; (404980 <Reset_Handler+0x1b4>)
  404818:	1a0c      	subs	r4, r1, r0
  40481a:	f024 0503 	bic.w	r5, r4, #3
  40481e:	f04f 0300 	mov.w	r3, #0
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
            *pDest++ = *pSrc++;
  404822:	f240 0200 	movw	r2, #0
  404826:	f2c2 0200 	movt	r2, #8192	; 0x2000
  40482a:	f248 712c 	movw	r1, #34604	; 0x872c
  40482e:	f2c0 0140 	movt	r1, #64	; 0x40
  404832:	f105 0004 	add.w	r0, r5, #4
  404836:	f3c5 0480 	ubfx	r4, r5, #2, #1
  40483a:	585d      	ldr	r5, [r3, r1]
  40483c:	509d      	str	r5, [r3, r2]
  40483e:	f103 0304 	add.w	r3, r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
  404842:	4283      	cmp	r3, r0
  404844:	f040 8086 	bne.w	404954 <Reset_Handler+0x188>
  404848:	e7df      	b.n	40480a <Reset_Handler+0x3e>
            *pDest++ = *pSrc++;
  40484a:	585d      	ldr	r5, [r3, r1]
  40484c:	509d      	str	r5, [r3, r2]
  40484e:	f103 0304 	add.w	r3, r3, #4
  404852:	585c      	ldr	r4, [r3, r1]
  404854:	509c      	str	r4, [r3, r2]
  404856:	f103 0304 	add.w	r3, r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
  40485a:	4283      	cmp	r3, r0
  40485c:	d1f5      	bne.n	40484a <Reset_Handler+0x7e>
  40485e:	e7d4      	b.n	40480a <Reset_Handler+0x3e>
  404860:	4d48      	ldr	r5, [pc, #288]	; (404984 <Reset_Handler+0x1b8>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void) {
  404862:	4949      	ldr	r1, [pc, #292]	; (404988 <Reset_Handler+0x1bc>)
  404864:	1b48      	subs	r0, r1, r5
  404866:	f020 0403 	bic.w	r4, r0, #3
  40486a:	f640 5300 	movw	r3, #3328	; 0xd00
  40486e:	f2c2 0300 	movt	r3, #8192	; 0x2000
  404872:	18e2      	adds	r2, r4, r3
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
        *pDest++ = 0;
  404874:	f04f 0100 	mov.w	r1, #0
  404878:	1b50      	subs	r0, r2, r5
  40487a:	f1a0 0004 	sub.w	r0, r0, #4
  40487e:	f3c0 0480 	ubfx	r4, r0, #2, #1
  404882:	f845 1f04 	str.w	r1, [r5, #4]!
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
  404886:	4295      	cmp	r5, r2
  404888:	d15d      	bne.n	404946 <Reset_Handler+0x17a>
  40488a:	e007      	b.n	40489c <Reset_Handler+0xd0>
  40488c:	f105 0304 	add.w	r3, r5, #4
        *pDest++ = 0;
  404890:	6069      	str	r1, [r5, #4]
  404892:	f105 0508 	add.w	r5, r5, #8
  404896:	6059      	str	r1, [r3, #4]
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
  404898:	4295      	cmp	r5, r2
  40489a:	d1f7      	bne.n	40488c <Reset_Handler+0xc0>
        *pDest++ = 0;
    }

    /* Set the vector table base address */
    pSrc = (uint32_t *) & _sfixed;
    SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40489c:	f240 0500 	movw	r5, #0
  4048a0:	f2c0 0540 	movt	r5, #64	; 0x40
  4048a4:	f025 017f 	bic.w	r1, r5, #127	; 0x7f
  4048a8:	f44f 426d 	mov.w	r2, #60672	; 0xed00
  4048ac:	f2ce 0200 	movt	r2, #57344	; 0xe000
  4048b0:	6091      	str	r1, [r2, #8]

    if (((uint32_t) pSrc >= IRAM_ADDR) && ((uint32_t) pSrc < IRAM_ADDR + IRAM_SIZE)) {
  4048b2:	f105 4060 	add.w	r0, r5, #3758096384	; 0xe0000000
  4048b6:	f5b0 3f20 	cmp.w	r0, #163840	; 0x28000
  4048ba:	d207      	bcs.n	4048cc <Reset_Handler+0x100>
        SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
  4048bc:	f44f 446d 	mov.w	r4, #60672	; 0xed00
  4048c0:	f2ce 0400 	movt	r4, #57344	; 0xe000
  4048c4:	68a3      	ldr	r3, [r4, #8]
  4048c6:	f043 5500 	orr.w	r5, r3, #536870912	; 0x20000000
  4048ca:	60a5      	str	r5, [r4, #8]
    }

    /* Initialize the C library */
    __libc_init_array();
  4048cc:	f646 0141 	movw	r1, #26689	; 0x6841
  4048d0:	f2c0 0140 	movt	r1, #64	; 0x40
  4048d4:	4788      	blx	r1

    //Initializes the hardware for OS use.
    Initialize();
  4048d6:	f245 5231 	movw	r2, #21809	; 0x5531
  4048da:	f2c0 0240 	movt	r2, #64	; 0x40
  4048de:	4790      	blx	r2

    //Creates threads
    createThread(&main, "main ", 128);
  4048e0:	f245 100d 	movw	r0, #20749	; 0x510d
  4048e4:	f2c0 0040 	movt	r0, #64	; 0x40
  4048e8:	f248 31bc 	movw	r1, #33724	; 0x83bc
  4048ec:	f2c0 0140 	movt	r1, #64	; 0x40
  4048f0:	f04f 0280 	mov.w	r2, #128	; 0x80
  4048f4:	f240 3409 	movw	r4, #777	; 0x309
  4048f8:	f2c0 0440 	movt	r4, #64	; 0x40
  4048fc:	47a0      	blx	r4
    createThread(&thread_temp, "thread_temp ", 128);
  4048fe:	f644 5015 	movw	r0, #19733	; 0x4d15
  404902:	f2c0 0040 	movt	r0, #64	; 0x40
  404906:	f248 31c4 	movw	r1, #33732	; 0x83c4
  40490a:	f2c0 0140 	movt	r1, #64	; 0x40
  40490e:	f04f 0280 	mov.w	r2, #128	; 0x80
  404912:	47a0      	blx	r4
    createThread(&thread_light, "thread_light ", 128);
  404914:	f245 70b1 	movw	r0, #22449	; 0x57b1
  404918:	f2c0 0040 	movt	r0, #64	; 0x40
  40491c:	f248 31d4 	movw	r1, #33748	; 0x83d4
  404920:	f2c0 0140 	movt	r1, #64	; 0x40
  404924:	f04f 0280 	mov.w	r2, #128	; 0x80
  404928:	47a0      	blx	r4

    //Starts scheduler
    startScheduler();
  40492a:	f240 2025 	movw	r0, #549	; 0x225
  40492e:	f2c0 0040 	movt	r0, #64	; 0x40
  404932:	4780      	blx	r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
  404934:	f3ef 8314 	mrs	r3, CONTROL

    //Sets thread mode to execute in unprivileged mode
	#define MASK_UNPRIVILEGED_MODE  0x01
    __set_CONTROL(__get_CONTROL() | MASK_UNPRIVILEGED_MODE);
  404938:	f043 0501 	orr.w	r5, r3, #1

    \param [in]    control  Control Register value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) );
  40493c:	f385 8814 	msr	CONTROL, r5
  404940:	f3bf 8f6f 	isb	sy
  404944:	e7fe      	b.n	404944 <Reset_Handler+0x178>
  404946:	2c00      	cmp	r4, #0
  404948:	d0a0      	beq.n	40488c <Reset_Handler+0xc0>
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
        *pDest++ = 0;
  40494a:	f845 1f04 	str.w	r1, [r5, #4]!
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
  40494e:	4295      	cmp	r5, r2
  404950:	d19c      	bne.n	40488c <Reset_Handler+0xc0>
  404952:	e7a3      	b.n	40489c <Reset_Handler+0xd0>
  404954:	2c00      	cmp	r4, #0
  404956:	f43f af78 	beq.w	40484a <Reset_Handler+0x7e>
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
            *pDest++ = *pSrc++;
  40495a:	585c      	ldr	r4, [r3, r1]
  40495c:	509c      	str	r4, [r3, r2]
  40495e:	f103 0304 	add.w	r3, r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
  404962:	4283      	cmp	r3, r0
  404964:	f47f af71 	bne.w	40484a <Reset_Handler+0x7e>
  404968:	e74f      	b.n	40480a <Reset_Handler+0x3e>
  40496a:	bf00      	nop
  40496c:	20000d00 	.word	0x20000d00
  404970:	20000000 	.word	0x20000000
  404974:	20001eb4 	.word	0x20001eb4
  404978:	20000d00 	.word	0x20000d00
  40497c:	20000004 	.word	0x20000004
  404980:	20000d03 	.word	0x20000d03
  404984:	20000cfc 	.word	0x20000cfc
  404988:	20001eaf 	.word	0x20001eaf

0040498c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  40498c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404990:	f2c4 030e 	movt	r3, #16398	; 0x400e
  404994:	6b18      	ldr	r0, [r3, #48]	; 0x30
  404996:	f000 0303 	and.w	r3, r0, #3
  40499a:	2b03      	cmp	r3, #3
  40499c:	f200 80a9 	bhi.w	404af2 <SystemCoreClockUpdate+0x166>
  4049a0:	e8df f003 	tbb	[pc, r3]
  4049a4:	4f4f1402 	.word	0x4f4f1402
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  4049a8:	f241 4010 	movw	r0, #5136	; 0x1410
  4049ac:	f2c4 000e 	movt	r0, #16398	; 0x400e
  4049b0:	6941      	ldr	r1, [r0, #20]
  4049b2:	f011 0f80 	tst.w	r1, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4049b6:	f240 43b0 	movw	r3, #1200	; 0x4b0
  4049ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4049be:	bf14      	ite	ne
  4049c0:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4049c4:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4049c8:	601a      	str	r2, [r3, #0]
  4049ca:	e092      	b.n	404af2 <SystemCoreClockUpdate+0x166>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  4049cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4049d0:	f2c4 030e 	movt	r3, #16398	; 0x400e
  4049d4:	6a18      	ldr	r0, [r3, #32]
  4049d6:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
  4049da:	d009      	beq.n	4049f0 <SystemCoreClockUpdate+0x64>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4049dc:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
  4049e0:	f2c0 03b7 	movt	r3, #183	; 0xb7
  4049e4:	f240 42b0 	movw	r2, #1200	; 0x4b0
  4049e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
  4049ec:	6013      	str	r3, [r2, #0]
  4049ee:	e080      	b.n	404af2 <SystemCoreClockUpdate+0x166>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4049f0:	f44f 6110 	mov.w	r1, #2304	; 0x900
  4049f4:	f2c0 013d 	movt	r1, #61	; 0x3d
  4049f8:	f240 42b0 	movw	r2, #1200	; 0x4b0
  4049fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
  404a00:	6011      	str	r1, [r2, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  404a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404a06:	f2c4 030e 	movt	r3, #16398	; 0x400e
  404a0a:	6a18      	ldr	r0, [r3, #32]
  404a0c:	f000 0170 	and.w	r1, r0, #112	; 0x70
  404a10:	2910      	cmp	r1, #16
  404a12:	d002      	beq.n	404a1a <SystemCoreClockUpdate+0x8e>
  404a14:	2920      	cmp	r1, #32
  404a16:	d16c      	bne.n	404af2 <SystemCoreClockUpdate+0x166>
  404a18:	e009      	b.n	404a2e <SystemCoreClockUpdate+0xa2>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  404a1a:	f44f 5090 	mov.w	r0, #4608	; 0x1200
  404a1e:	f2c0 007a 	movt	r0, #122	; 0x7a
  404a22:	f240 41b0 	movw	r1, #1200	; 0x4b0
  404a26:	f2c2 0100 	movt	r1, #8192	; 0x2000
  404a2a:	6008      	str	r0, [r1, #0]
				break;
  404a2c:	e061      	b.n	404af2 <SystemCoreClockUpdate+0x166>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  404a2e:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
  404a32:	f2c0 03b7 	movt	r3, #183	; 0xb7
  404a36:	f240 42b0 	movw	r2, #1200	; 0x4b0
  404a3a:	f2c2 0200 	movt	r2, #8192	; 0x2000
  404a3e:	6013      	str	r3, [r2, #0]
				break;
  404a40:	e057      	b.n	404af2 <SystemCoreClockUpdate+0x166>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  404a42:	f44f 6280 	mov.w	r2, #1024	; 0x400
  404a46:	f2c4 020e 	movt	r2, #16398	; 0x400e
  404a4a:	6a13      	ldr	r3, [r2, #32]
  404a4c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  404a50:	d009      	beq.n	404a66 <SystemCoreClockUpdate+0xda>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  404a52:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
  404a56:	f2c0 03b7 	movt	r3, #183	; 0xb7
  404a5a:	f240 42b0 	movw	r2, #1200	; 0x4b0
  404a5e:	f2c2 0200 	movt	r2, #8192	; 0x2000
  404a62:	6013      	str	r3, [r2, #0]
  404a64:	e027      	b.n	404ab6 <SystemCoreClockUpdate+0x12a>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  404a66:	f44f 6310 	mov.w	r3, #2304	; 0x900
  404a6a:	f2c0 033d 	movt	r3, #61	; 0x3d
  404a6e:	f240 42b0 	movw	r2, #1200	; 0x4b0
  404a72:	f2c2 0200 	movt	r2, #8192	; 0x2000
  404a76:	6013      	str	r3, [r2, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  404a78:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404a7c:	f2c4 030e 	movt	r3, #16398	; 0x400e
  404a80:	6a1a      	ldr	r2, [r3, #32]
  404a82:	f002 0370 	and.w	r3, r2, #112	; 0x70
  404a86:	2b10      	cmp	r3, #16
  404a88:	d002      	beq.n	404a90 <SystemCoreClockUpdate+0x104>
  404a8a:	2b20      	cmp	r3, #32
  404a8c:	d113      	bne.n	404ab6 <SystemCoreClockUpdate+0x12a>
  404a8e:	e009      	b.n	404aa4 <SystemCoreClockUpdate+0x118>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  404a90:	f44f 5390 	mov.w	r3, #4608	; 0x1200
  404a94:	f2c0 037a 	movt	r3, #122	; 0x7a
  404a98:	f240 42b0 	movw	r2, #1200	; 0x4b0
  404a9c:	f2c2 0200 	movt	r2, #8192	; 0x2000
  404aa0:	6013      	str	r3, [r2, #0]
				break;
  404aa2:	e008      	b.n	404ab6 <SystemCoreClockUpdate+0x12a>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  404aa4:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
  404aa8:	f2c0 03b7 	movt	r3, #183	; 0xb7
  404aac:	f240 42b0 	movw	r2, #1200	; 0x4b0
  404ab0:	f2c2 0200 	movt	r2, #8192	; 0x2000
  404ab4:	6013      	str	r3, [r2, #0]
				break;
			default:
				break;
			}
		}
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
  404ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404aba:	f2c4 030e 	movt	r3, #16398	; 0x400e
  404abe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  404ac0:	f002 0303 	and.w	r3, r2, #3
  404ac4:	2b02      	cmp	r3, #2
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  404ac6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  404aca:	f2c4 020e 	movt	r2, #16398	; 0x400e
  404ace:	bf07      	ittee	eq
  404ad0:	6a90      	ldreq	r0, [r2, #40]	; 0x28
					CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
  404ad2:	6a91      	ldreq	r1, [r2, #40]	; 0x28
					CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk) >> 
  404ad4:	6ad0      	ldrne	r0, [r2, #44]	; 0x2c
					CKGR_PLLBR_MULB_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk) >> 
  404ad6:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
  404ad8:	f240 43b0 	movw	r3, #1200	; 0x4b0
  404adc:	f2c2 0300 	movt	r3, #8192	; 0x2000
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
					CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
					CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk) >> 
  404ae0:	f3c0 400a 	ubfx	r0, r0, #16, #11
  404ae4:	681a      	ldr	r2, [r3, #0]
  404ae6:	fb00 2002 	mla	r0, r0, r2, r2
					CKGR_PLLBR_MULB_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk) >> 
  404aea:	b2c9      	uxtb	r1, r1
  404aec:	fbb0 f2f1 	udiv	r2, r0, r1
  404af0:	601a      	str	r2, [r3, #0]
		break;
	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  404af2:	f44f 6280 	mov.w	r2, #1024	; 0x400
  404af6:	f2c4 020e 	movt	r2, #16398	; 0x400e
  404afa:	6b10      	ldr	r0, [r2, #48]	; 0x30
  404afc:	f000 0170 	and.w	r1, r0, #112	; 0x70
  404b00:	2970      	cmp	r1, #112	; 0x70
  404b02:	d10e      	bne.n	404b22 <SystemCoreClockUpdate+0x196>
		SystemCoreClock /= 3U;
  404b04:	f240 43b0 	movw	r3, #1200	; 0x4b0
  404b08:	f2c2 0300 	movt	r3, #8192	; 0x2000
  404b0c:	6818      	ldr	r0, [r3, #0]
  404b0e:	f64a 22ab 	movw	r2, #43691	; 0xaaab
  404b12:	f6ca 22aa 	movt	r2, #43690	; 0xaaaa
  404b16:	fba2 0100 	umull	r0, r1, r2, r0
  404b1a:	ea4f 0051 	mov.w	r0, r1, lsr #1
  404b1e:	6018      	str	r0, [r3, #0]
  404b20:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  404b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404b26:	f2c4 030e 	movt	r3, #16398	; 0x400e
  404b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  404b2c:	f240 40b0 	movw	r0, #1200	; 0x4b0
  404b30:	f2c2 0000 	movt	r0, #8192	; 0x2000
  404b34:	f3c2 1102 	ubfx	r1, r2, #4, #3
  404b38:	6803      	ldr	r3, [r0, #0]
  404b3a:	fa23 f301 	lsr.w	r3, r3, r1
  404b3e:	6003      	str	r3, [r0, #0]
  404b40:	4770      	bx	lr
  404b42:	bf00      	nop

00404b44 <system_init_flash>:
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
	}
#else
	if (ul_clk < CHIP_FREQ_FWS_0) {
  404b44:	f642 43ff 	movw	r3, #11519	; 0x2cff
  404b48:	f2c0 1331 	movt	r3, #305	; 0x131
  404b4c:	4298      	cmp	r0, r3
  404b4e:	d80c      	bhi.n	404b6a <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
  404b50:	f44f 6320 	mov.w	r3, #2560	; 0xa00
  404b54:	f2c4 030e 	movt	r3, #16398	; 0x400e
  404b58:	f04f 0000 	mov.w	r0, #0
  404b5c:	6018      	str	r0, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
  404b5e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
  404b62:	f2c4 010e 	movt	r1, #16398	; 0x400e
  404b66:	6008      	str	r0, [r1, #0]
  404b68:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
  404b6a:	f645 11ff 	movw	r1, #23039	; 0x59ff
  404b6e:	f2c0 2162 	movt	r1, #610	; 0x262
  404b72:	4288      	cmp	r0, r1
  404b74:	d80c      	bhi.n	404b90 <system_init_flash+0x4c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
  404b76:	f44f 6020 	mov.w	r0, #2560	; 0xa00
  404b7a:	f2c4 000e 	movt	r0, #16398	; 0x400e
  404b7e:	f44f 7180 	mov.w	r1, #256	; 0x100
  404b82:	6001      	str	r1, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
  404b84:	f44f 6240 	mov.w	r2, #3072	; 0xc00
  404b88:	f2c4 020e 	movt	r2, #16398	; 0x400e
  404b8c:	6011      	str	r1, [r2, #0]
  404b8e:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
  404b90:	f248 63ff 	movw	r3, #34559	; 0x86ff
  404b94:	f2c0 3393 	movt	r3, #915	; 0x393
  404b98:	4298      	cmp	r0, r3
  404b9a:	d80c      	bhi.n	404bb6 <system_init_flash+0x72>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
  404b9c:	f44f 6120 	mov.w	r1, #2560	; 0xa00
  404ba0:	f2c4 010e 	movt	r1, #16398	; 0x400e
  404ba4:	f44f 7200 	mov.w	r2, #512	; 0x200
  404ba8:	600a      	str	r2, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
  404baa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  404bae:	f2c4 030e 	movt	r3, #16398	; 0x400e
  404bb2:	601a      	str	r2, [r3, #0]
  404bb4:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
  404bb6:	f24b 31ff 	movw	r1, #46079	; 0xb3ff
  404bba:	f2c0 41c4 	movt	r1, #1220	; 0x4c4
  404bbe:	4288      	cmp	r0, r1
  404bc0:	d80c      	bhi.n	404bdc <system_init_flash+0x98>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
  404bc2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
  404bc6:	f2c4 030e 	movt	r3, #16398	; 0x400e
  404bca:	f44f 7240 	mov.w	r2, #768	; 0x300
  404bce:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
  404bd0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
  404bd4:	f2c4 000e 	movt	r0, #16398	; 0x400e
  404bd8:	6002      	str	r2, [r0, #0]
  404bda:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
  404bdc:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
  404be0:	f2c0 53f5 	movt	r3, #1525	; 0x5f5
  404be4:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
  404be6:	f44f 6020 	mov.w	r0, #2560	; 0xa00
  404bea:	f2c4 000e 	movt	r0, #16398	; 0x400e
  404bee:	bf94      	ite	ls
  404bf0:	f44f 6280 	movls.w	r2, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
  404bf4:	f44f 62a0 	movhi.w	r2, #1280	; 0x500
  404bf8:	6002      	str	r2, [r0, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
  404bfa:	f44f 6140 	mov.w	r1, #3072	; 0xc00
  404bfe:	f2c4 010e 	movt	r1, #16398	; 0x400e
  404c02:	600a      	str	r2, [r1, #0]
  404c04:	4770      	bx	lr
  404c06:	bf00      	nop

00404c08 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
  404c08:	f641 33dc 	movw	r3, #7132	; 0x1bdc
  404c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
  404c10:	6819      	ldr	r1, [r3, #0]
  404c12:	b941      	cbnz	r1, 404c26 <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
  404c14:	f641 33dc 	movw	r3, #7132	; 0x1bdc
  404c18:	f2c2 0300 	movt	r3, #8192	; 0x2000
  404c1c:	f647 62b8 	movw	r2, #32440	; 0x7eb8
  404c20:	f2c2 0200 	movt	r2, #8192	; 0x2000
  404c24:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  404c26:	f641 31dc 	movw	r1, #7132	; 0x1bdc
  404c2a:	f2c2 0100 	movt	r1, #8192	; 0x2000
  404c2e:	680b      	ldr	r3, [r1, #0]

	heap += incr;
  404c30:	1818      	adds	r0, r3, r0
  404c32:	6008      	str	r0, [r1, #0]

	return (caddr_t) prev_heap;
}
  404c34:	4618      	mov	r0, r3
  404c36:	4770      	bx	lr

00404c38 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
  404c38:	b570      	push	{r4, r5, r6, lr}
  404c3a:	b082      	sub	sp, #8
  404c3c:	4606      	mov	r6, r0
	usart_spi_select_device(SSD1306_USART_SPI, &device);
	ssd1306_sel_cmd();
	usart_spi_transmit(SSD1306_USART_SPI, command);
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  404c3e:	ac02      	add	r4, sp, #8
  404c40:	f04f 0302 	mov.w	r3, #2
  404c44:	f844 3d04 	str.w	r3, [r4, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  404c48:	f44f 4500 	mov.w	r5, #32768	; 0x8000
  404c4c:	f2c4 0500 	movt	r5, #16384	; 0x4000
  404c50:	4628      	mov	r0, r5
  404c52:	4621      	mov	r1, r4
  404c54:	f643 3265 	movw	r2, #15205	; 0x3b65
  404c58:	f2c0 0240 	movt	r2, #64	; 0x40
  404c5c:	4790      	blx	r2
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  404c5e:	f44f 5090 	mov.w	r0, #4608	; 0x1200
  404c62:	f2c4 000e 	movt	r0, #16398	; 0x400e
  404c66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  404c6a:	6341      	str	r1, [r0, #52]	; 0x34
  404c6c:	60ee      	str	r6, [r5, #12]
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
  404c6e:	f04f 0056 	mov.w	r0, #86	; 0x56
  404c72:	f240 0301 	movw	r3, #1
  404c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
  404c7a:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  404c7c:	4628      	mov	r0, r5
  404c7e:	4621      	mov	r1, r4
  404c80:	f643 32a1 	movw	r2, #15265	; 0x3ba1
  404c84:	f2c0 0240 	movt	r2, #64	; 0x40
  404c88:	4790      	blx	r2
#endif
}
  404c8a:	b002      	add	sp, #8
  404c8c:	bd70      	pop	{r4, r5, r6, pc}
  404c8e:	bf00      	nop

00404c90 <controlLights>:
/*
 * Controls all lights
 */
void controlLights(bool a, bool b, bool c) {
    //LED1 off
    if (a)
  404c90:	b108      	cbz	r0, 404c96 <controlLights+0x6>
        svc(3);
  404c92:	df03      	svc	3
  404c94:	e000      	b.n	404c98 <controlLights+0x8>
        //LED1 on
    else
        svc(2);
  404c96:	df02      	svc	2

    //LED2 off
    if (b)
  404c98:	b109      	cbz	r1, 404c9e <controlLights+0xe>
        svc(5);
  404c9a:	df05      	svc	5
  404c9c:	e000      	b.n	404ca0 <controlLights+0x10>
        //LED2 on
    else
        svc(4);
  404c9e:	df04      	svc	4

    //LED3 off
    if (c)
  404ca0:	b10a      	cbz	r2, 404ca6 <controlLights+0x16>
        svc(7);
  404ca2:	df07      	svc	7
  404ca4:	4770      	bx	lr
        //LED3 on
    else
        svc(6);
  404ca6:	df06      	svc	6
  404ca8:	4770      	bx	lr
  404caa:	bf00      	nop

00404cac <printString>:

/*
 * Prints string to screen.
 */
__attribute__((noinline)) void printString(char* c, int l) {
    svc(SYSCALL_WRITESTRINGTOSCREEN);
  404cac:	df13      	svc	19
  404cae:	4770      	bx	lr

00404cb0 <printStringPosition>:

/*
 * Prints string to screen, allows position to be set.
 */
__attribute__((noinline)) void printStringPosition(char* c, int l, int x) {
    svc(SYSCALL_WRITESTRINGTOSCREENPOSITION);
  404cb0:	df14      	svc	20
  404cb2:	4770      	bx	lr

00404cb4 <print4screen>:
}

/*
 * Print 4 lines of text to screen.
 */
void print4screen(char* a, char* b, char* c, char* d) {
  404cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404cb6:	460f      	mov	r7, r1
  404cb8:	4616      	mov	r6, r2
  404cba:	461d      	mov	r5, r3
    printString(a, 0);
  404cbc:	f04f 0100 	mov.w	r1, #0
  404cc0:	f644 44ad 	movw	r4, #19629	; 0x4cad
  404cc4:	f2c0 0440 	movt	r4, #64	; 0x40
  404cc8:	47a0      	blx	r4
    printString(b, 1);
  404cca:	4638      	mov	r0, r7
  404ccc:	f04f 0101 	mov.w	r1, #1
  404cd0:	47a0      	blx	r4
    printString(c, 2);
  404cd2:	4630      	mov	r0, r6
  404cd4:	f04f 0102 	mov.w	r1, #2
  404cd8:	47a0      	blx	r4
    printString(d, 3);
  404cda:	4628      	mov	r0, r5
  404cdc:	f04f 0103 	mov.w	r1, #3
  404ce0:	47a0      	blx	r4
  404ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00404ce4 <cleanScreen>:

/*
 * Cleans the screen.
 */
void cleanScreen() {
    svc(SYSCALL_CLEARSCREEN);
  404ce4:	df16      	svc	22
  404ce6:	4770      	bx	lr

00404ce8 <getTemp>:

/*
 * Gets temperature from sensor.
 */
void getTemp(double* t) {
    svc(SYSCALL_GETTEMP);
  404ce8:	df08      	svc	8
  404cea:	4770      	bx	lr

00404cec <getLight>:

/*
 * Gets light info from light sensor.
 */
void getLight() {
    svc(SYSCALL_GETLIGHT);
  404cec:	df09      	svc	9
    light = 100 - (adc_value * 100 / 4096);
  404cee:	f641 4354 	movw	r3, #7252	; 0x1c54
  404cf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
  404cf6:	6818      	ldr	r0, [r3, #0]
  404cf8:	f04f 0264 	mov.w	r2, #100	; 0x64
  404cfc:	fb02 f100 	mul.w	r1, r2, r0
  404d00:	ea4f 3311 	mov.w	r3, r1, lsr #12
  404d04:	f1c3 0064 	rsb	r0, r3, #100	; 0x64
  404d08:	f641 4250 	movw	r2, #7248	; 0x1c50
  404d0c:	f2c2 0200 	movt	r2, #8192	; 0x2000
  404d10:	6010      	str	r0, [r2, #0]
  404d12:	4770      	bx	lr

00404d14 <thread_temp>:
}

/*
 * Thread, prints the temperature sensor to the screen.
 */
void thread_temp() {
  404d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    delay_ms(133);
  404d18:	f246 5020 	movw	r0, #25888	; 0x6520
  404d1c:	f2c0 0011 	movt	r0, #17
  404d20:	f240 0301 	movw	r3, #1
  404d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
  404d28:	4798      	blx	r3
    int itt = 1;
    temp_mode = DISABLED;
  404d2a:	f641 30e8 	movw	r0, #7144	; 0x1be8
  404d2e:	f2c2 0000 	movt	r0, #8192	; 0x2000
  404d32:	f04f 0200 	mov.w	r2, #0
  404d36:	7002      	strb	r2, [r0, #0]
/*
 * Thread, prints the temperature sensor to the screen.
 */
void thread_temp() {
    delay_ms(133);
    int itt = 1;
  404d38:	f04f 0701 	mov.w	r7, #1
    temp_mode = DISABLED;
    while (1) {
        if (temp_mode == ENABLED) {
  404d3c:	4606      	mov	r6, r0
                sprintf(temp_disp, "%d", (uint8_t) temp);
                printStringPosition(temp_disp, 1, 106);
                printStringPosition("c", 1, 119);
            }
            itt++;
            delay_ms(65);
  404d3e:	f248 0957 	movw	r9, #32855	; 0x8057
  404d42:	f2c0 0908 	movt	r9, #8
  404d46:	f240 0a01 	movw	sl, #1
  404d4a:	f2c2 0a00 	movt	sl, #8192	; 0x2000

            if (temp > 22) {
  404d4e:	f04f 0400 	mov.w	r4, #0
  404d52:	f04f 0500 	mov.w	r5, #0
  404d56:	f2c4 0536 	movt	r5, #16438	; 0x4036
void thread_temp() {
    delay_ms(133);
    int itt = 1;
    temp_mode = DISABLED;
    while (1) {
        if (temp_mode == ENABLED) {
  404d5a:	7831      	ldrb	r1, [r6, #0]
  404d5c:	2900      	cmp	r1, #0
  404d5e:	f000 8088 	beq.w	404e72 <thread_temp+0x15e>
            if (itt % 2) {
  404d62:	f017 0f01 	tst.w	r7, #1
  404d66:	d009      	beq.n	404d7c <thread_temp+0x68>
                getTemp(&temp);
  404d68:	f641 4048 	movw	r0, #7240	; 0x1c48
  404d6c:	f2c2 0000 	movt	r0, #8192	; 0x2000
  404d70:	f644 41e9 	movw	r1, #19689	; 0x4ce9
  404d74:	f2c0 0140 	movt	r1, #64	; 0x40
  404d78:	4788      	blx	r1
  404d7a:	e02c      	b.n	404dd6 <thread_temp+0xc2>
            } else {
                sprintf(temp_disp, "%d", (uint8_t) temp);
  404d7c:	f641 68a0 	movw	r8, #7840	; 0x1ea0
  404d80:	f2c2 0800 	movt	r8, #8192	; 0x2000
  404d84:	f641 4048 	movw	r0, #7240	; 0x1c48
  404d88:	f2c2 0000 	movt	r0, #8192	; 0x2000
  404d8c:	e9d0 0100 	ldrd	r0, r1, [r0]
  404d90:	f246 126d 	movw	r2, #24941	; 0x616d
  404d94:	f2c0 0240 	movt	r2, #64	; 0x40
  404d98:	4790      	blx	r2
  404d9a:	b2c2      	uxtb	r2, r0
  404d9c:	4640      	mov	r0, r8
  404d9e:	f248 417c 	movw	r1, #33916	; 0x847c
  404da2:	f2c0 0140 	movt	r1, #64	; 0x40
  404da6:	f646 03e1 	movw	r3, #26849	; 0x68e1
  404daa:	f2c0 0340 	movt	r3, #64	; 0x40
  404dae:	4798      	blx	r3
                printStringPosition(temp_disp, 1, 106);
  404db0:	4640      	mov	r0, r8
  404db2:	f04f 0101 	mov.w	r1, #1
  404db6:	f04f 026a 	mov.w	r2, #106	; 0x6a
  404dba:	f644 48b1 	movw	r8, #19633	; 0x4cb1
  404dbe:	f2c0 0840 	movt	r8, #64	; 0x40
  404dc2:	47c0      	blx	r8
                printStringPosition("c", 1, 119);
  404dc4:	f248 4080 	movw	r0, #33920	; 0x8480
  404dc8:	f2c0 0040 	movt	r0, #64	; 0x40
  404dcc:	f04f 0101 	mov.w	r1, #1
  404dd0:	f04f 0277 	mov.w	r2, #119	; 0x77
  404dd4:	47c0      	blx	r8
            }
            itt++;
  404dd6:	f107 0701 	add.w	r7, r7, #1
            delay_ms(65);
  404dda:	4648      	mov	r0, r9
  404ddc:	47d0      	blx	sl

            if (temp > 22) {
  404dde:	f641 4048 	movw	r0, #7240	; 0x1c48
  404de2:	f2c2 0000 	movt	r0, #8192	; 0x2000
  404de6:	e9d0 0100 	ldrd	r0, r1, [r0]
  404dea:	4622      	mov	r2, r4
  404dec:	462b      	mov	r3, r5
  404dee:	f246 1c59 	movw	ip, #24921	; 0x6159
  404df2:	f2c0 0c40 	movt	ip, #64	; 0x40
  404df6:	47e0      	blx	ip
  404df8:	b168      	cbz	r0, 404e16 <thread_temp+0x102>
                printStringPosition("VERY HOT", 2, 87);
  404dfa:	f248 4084 	movw	r0, #33924	; 0x8484
  404dfe:	f2c0 0040 	movt	r0, #64	; 0x40
  404e02:	f04f 0102 	mov.w	r1, #2
  404e06:	f04f 0257 	mov.w	r2, #87	; 0x57
  404e0a:	f644 43b1 	movw	r3, #19633	; 0x4cb1
  404e0e:	f2c0 0340 	movt	r3, #64	; 0x40
  404e12:	4798      	blx	r3
  404e14:	e7a1      	b.n	404d5a <thread_temp+0x46>
            } else if (temp < 21) {
  404e16:	f641 4248 	movw	r2, #7240	; 0x1c48
  404e1a:	f2c2 0200 	movt	r2, #8192	; 0x2000
  404e1e:	e9d2 0100 	ldrd	r0, r1, [r2]
  404e22:	f04f 0200 	mov.w	r2, #0
  404e26:	f04f 0300 	mov.w	r3, #0
  404e2a:	f2c4 0335 	movt	r3, #16437	; 0x4035
  404e2e:	f246 181d 	movw	r8, #24861	; 0x611d
  404e32:	f2c0 0840 	movt	r8, #64	; 0x40
  404e36:	47c0      	blx	r8
  404e38:	b168      	cbz	r0, 404e56 <thread_temp+0x142>
                printStringPosition("TOO COLD", 2, 87);
  404e3a:	f248 4090 	movw	r0, #33936	; 0x8490
  404e3e:	f2c0 0040 	movt	r0, #64	; 0x40
  404e42:	f04f 0102 	mov.w	r1, #2
  404e46:	f04f 0257 	mov.w	r2, #87	; 0x57
  404e4a:	f644 43b1 	movw	r3, #19633	; 0x4cb1
  404e4e:	f2c0 0340 	movt	r3, #64	; 0x40
  404e52:	4798      	blx	r3
  404e54:	e781      	b.n	404d5a <thread_temp+0x46>
            } else {
                printStringPosition("__________", 2, 87);
  404e56:	f248 409c 	movw	r0, #33948	; 0x849c
  404e5a:	f2c0 0040 	movt	r0, #64	; 0x40
  404e5e:	f04f 0102 	mov.w	r1, #2
  404e62:	f04f 0257 	mov.w	r2, #87	; 0x57
  404e66:	f644 43b1 	movw	r3, #19633	; 0x4cb1
  404e6a:	f2c0 0340 	movt	r3, #64	; 0x40
  404e6e:	4798      	blx	r3
  404e70:	e773      	b.n	404d5a <thread_temp+0x46>
            }

        } else if (temp_mode == DISABLED) {
  404e72:	7833      	ldrb	r3, [r6, #0]
  404e74:	2b00      	cmp	r3, #0
  404e76:	f47f af70 	bne.w	404d5a <thread_temp+0x46>
            printStringPosition("       ", 1, 106);
  404e7a:	f248 4074 	movw	r0, #33908	; 0x8474
  404e7e:	f2c0 0040 	movt	r0, #64	; 0x40
  404e82:	f04f 0101 	mov.w	r1, #1
  404e86:	f04f 026a 	mov.w	r2, #106	; 0x6a
  404e8a:	f644 48b1 	movw	r8, #19633	; 0x4cb1
  404e8e:	f2c0 0840 	movt	r8, #64	; 0x40
  404e92:	47c0      	blx	r8
            printStringPosition("__________", 2, 87);
  404e94:	f248 409c 	movw	r0, #33948	; 0x849c
  404e98:	f2c0 0040 	movt	r0, #64	; 0x40
  404e9c:	f04f 0102 	mov.w	r1, #2
  404ea0:	f04f 0257 	mov.w	r2, #87	; 0x57
  404ea4:	47c0      	blx	r8
  404ea6:	e758      	b.n	404d5a <thread_temp+0x46>

00404ea8 <launchApp>:

/*
 * App Launcher. Allows different apps to be launched depending on the screen.
 */
void launchApp() {
    switch (menu_screen) {
  404ea8:	f240 43b4 	movw	r3, #1204	; 0x4b4
  404eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
  404eb0:	6818      	ldr	r0, [r3, #0]
  404eb2:	2803      	cmp	r0, #3
  404eb4:	d002      	beq.n	404ebc <launchApp+0x14>
  404eb6:	2804      	cmp	r0, #4
  404eb8:	d132      	bne.n	404f20 <launchApp+0x78>
  404eba:	e01b      	b.n	404ef4 <launchApp+0x4c>
            //createThread( &app_light1, "app_light1 ", 128 );
            //createThread( &app_light2, "app_light2 ", 128 );
            //createThread( &app_light3, "app_light3 ", 128 );
            break;
        case 3:
            if (temp_mode == ENABLED) {
  404ebc:	f641 33e8 	movw	r3, #7144	; 0x1be8
  404ec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
  404ec4:	7818      	ldrb	r0, [r3, #0]
  404ec6:	b138      	cbz	r0, 404ed8 <launchApp+0x30>
                temp_mode = DISABLED;
  404ec8:	f641 31e8 	movw	r1, #7144	; 0x1be8
  404ecc:	f2c2 0100 	movt	r1, #8192	; 0x2000
  404ed0:	f04f 0200 	mov.w	r2, #0
  404ed4:	700a      	strb	r2, [r1, #0]
  404ed6:	4770      	bx	lr
            } else if (temp_mode == DISABLED) {
  404ed8:	f641 31e8 	movw	r1, #7144	; 0x1be8
  404edc:	f2c2 0100 	movt	r1, #8192	; 0x2000
  404ee0:	780a      	ldrb	r2, [r1, #0]
  404ee2:	b9ea      	cbnz	r2, 404f20 <launchApp+0x78>
                temp_mode = ENABLED;
  404ee4:	f641 33e8 	movw	r3, #7144	; 0x1be8
  404ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
  404eec:	f04f 0001 	mov.w	r0, #1
  404ef0:	7018      	strb	r0, [r3, #0]
  404ef2:	4770      	bx	lr
            }
            break;
        case 4:
            if (light_mode == ENABLED) {
  404ef4:	f641 31ec 	movw	r1, #7148	; 0x1bec
  404ef8:	f2c2 0100 	movt	r1, #8192	; 0x2000
  404efc:	680a      	ldr	r2, [r1, #0]
  404efe:	2a01      	cmp	r2, #1
  404f00:	d107      	bne.n	404f12 <launchApp+0x6a>
                light_mode = DISABLED;
  404f02:	f641 31ec 	movw	r1, #7148	; 0x1bec
  404f06:	f2c2 0100 	movt	r1, #8192	; 0x2000
  404f0a:	f04f 0200 	mov.w	r2, #0
  404f0e:	600a      	str	r2, [r1, #0]
  404f10:	4770      	bx	lr
            } else {
                light_mode = ENABLED;
  404f12:	f641 33ec 	movw	r3, #7148	; 0x1bec
  404f16:	f2c2 0300 	movt	r3, #8192	; 0x2000
  404f1a:	f04f 0001 	mov.w	r0, #1
  404f1e:	6018      	str	r0, [r3, #0]
  404f20:	4770      	bx	lr
  404f22:	bf00      	nop

00404f24 <ProcessButtonEvt>:
}

/*
 * Process Buttons Events.
 */
static void ProcessButtonEvt(uint8_t uc_button) {
  404f24:	b510      	push	{r4, lr}
  404f26:	4604      	mov	r4, r0

    delay_ms(200);
  404f28:	f642 006e 	movw	r0, #10350	; 0x286e
  404f2c:	f2c0 001a 	movt	r0, #26
  404f30:	f240 0301 	movw	r3, #1
  404f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
  404f38:	4798      	blx	r3

    //All Menu clicks
    if (menu_mode == MENU_MAIN && !app_mode) {
  404f3a:	f240 40bc 	movw	r0, #1212	; 0x4bc
  404f3e:	f2c2 0000 	movt	r0, #8192	; 0x2000
  404f42:	6801      	ldr	r1, [r0, #0]
  404f44:	2904      	cmp	r1, #4
  404f46:	d146      	bne.n	404fd6 <ProcessButtonEvt+0xb2>
  404f48:	f641 30e0 	movw	r0, #7136	; 0x1be0
  404f4c:	f2c2 0000 	movt	r0, #8192	; 0x2000
  404f50:	7802      	ldrb	r2, [r0, #0]
  404f52:	2a00      	cmp	r2, #0
  404f54:	f040 80a7 	bne.w	4050a6 <ProcessButtonEvt+0x182>
        if (uc_button == 1) {
  404f58:	2c01      	cmp	r4, #1
  404f5a:	d107      	bne.n	404f6c <ProcessButtonEvt+0x48>
            menu_screen_switch = -1;
  404f5c:	f240 41b8 	movw	r1, #1208	; 0x4b8
  404f60:	f2c2 0100 	movt	r1, #8192	; 0x2000
  404f64:	f04f 32ff 	mov.w	r2, #4294967295
  404f68:	600a      	str	r2, [r1, #0]
  404f6a:	bd10      	pop	{r4, pc}
        } else if (uc_button == 2 && menu_screen == 0) {
  404f6c:	2c02      	cmp	r4, #2
  404f6e:	d128      	bne.n	404fc2 <ProcessButtonEvt+0x9e>
  404f70:	f240 41b4 	movw	r1, #1204	; 0x4b4
  404f74:	f2c2 0100 	movt	r1, #8192	; 0x2000
  404f78:	680b      	ldr	r3, [r1, #0]
  404f7a:	b9e3      	cbnz	r3, 404fb6 <ProcessButtonEvt+0x92>
            menu_mode = MENU_APP;
  404f7c:	f240 41bc 	movw	r1, #1212	; 0x4bc
  404f80:	f2c2 0100 	movt	r1, #8192	; 0x2000
  404f84:	f04f 0206 	mov.w	r2, #6
  404f88:	600a      	str	r2, [r1, #0]
            screen_extension = 3;
  404f8a:	f641 33e4 	movw	r3, #7140	; 0x1be4
  404f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
  404f92:	f04f 0003 	mov.w	r0, #3
  404f96:	6018      	str	r0, [r3, #0]
            menu_screen_switch = 1;
  404f98:	f240 41b8 	movw	r1, #1208	; 0x4b8
  404f9c:	f2c2 0100 	movt	r1, #8192	; 0x2000
  404fa0:	f04f 0201 	mov.w	r2, #1
  404fa4:	600a      	str	r2, [r1, #0]
            menu_screen = 2;
  404fa6:	f240 43b4 	movw	r3, #1204	; 0x4b4
  404faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
  404fae:	f04f 0002 	mov.w	r0, #2
  404fb2:	6018      	str	r0, [r3, #0]
  404fb4:	bd10      	pop	{r4, pc}
        } else if (uc_button == 2 && menu_screen == 2) {
  404fb6:	f240 40b4 	movw	r0, #1204	; 0x4b4
  404fba:	f2c2 0000 	movt	r0, #8192	; 0x2000
  404fbe:	6803      	ldr	r3, [r0, #0]
  404fc0:	bd10      	pop	{r4, pc}
            //launchApp();
        } else if (uc_button == 3) {
  404fc2:	2c03      	cmp	r4, #3
  404fc4:	d176      	bne.n	4050b4 <ProcessButtonEvt+0x190>
            menu_screen_switch = 1;
  404fc6:	f240 40b8 	movw	r0, #1208	; 0x4b8
  404fca:	f2c2 0000 	movt	r0, #8192	; 0x2000
  404fce:	f04f 0201 	mov.w	r2, #1
  404fd2:	6002      	str	r2, [r0, #0]
  404fd4:	bd10      	pop	{r4, pc}
        }

    }
	//app menu clicks
    else if (menu_mode == MENU_APP && !app_mode) {
  404fd6:	2906      	cmp	r1, #6
  404fd8:	d137      	bne.n	40504a <ProcessButtonEvt+0x126>
  404fda:	f641 33e0 	movw	r3, #7136	; 0x1be0
  404fde:	f2c2 0300 	movt	r3, #8192	; 0x2000
  404fe2:	781a      	ldrb	r2, [r3, #0]
  404fe4:	2a00      	cmp	r2, #0
  404fe6:	d15e      	bne.n	4050a6 <ProcessButtonEvt+0x182>
        if (uc_button == 1) {
  404fe8:	2c01      	cmp	r4, #1
  404fea:	d11c      	bne.n	405026 <ProcessButtonEvt+0x102>
            menu_mode = MENU_MAIN;
  404fec:	f240 40bc 	movw	r0, #1212	; 0x4bc
  404ff0:	f2c2 0000 	movt	r0, #8192	; 0x2000
  404ff4:	f04f 0204 	mov.w	r2, #4
  404ff8:	6002      	str	r2, [r0, #0]
            screen_extension = 0;
  404ffa:	f641 31e4 	movw	r1, #7140	; 0x1be4
  404ffe:	f2c2 0100 	movt	r1, #8192	; 0x2000
  405002:	f04f 0300 	mov.w	r3, #0
  405006:	600b      	str	r3, [r1, #0]
            menu_screen = 2;
  405008:	f240 40b4 	movw	r0, #1204	; 0x4b4
  40500c:	f2c2 0000 	movt	r0, #8192	; 0x2000
  405010:	f04f 0202 	mov.w	r2, #2
  405014:	6002      	str	r2, [r0, #0]
            menu_screen_switch = 1;
  405016:	f240 41b8 	movw	r1, #1208	; 0x4b8
  40501a:	f2c2 0100 	movt	r1, #8192	; 0x2000
  40501e:	f04f 0301 	mov.w	r3, #1
  405022:	600b      	str	r3, [r1, #0]
  405024:	bd10      	pop	{r4, pc}
        } else if (uc_button == 2) {
  405026:	2c02      	cmp	r4, #2
  405028:	d105      	bne.n	405036 <ProcessButtonEvt+0x112>
            launchApp();
  40502a:	f644 63a9 	movw	r3, #20137	; 0x4ea9
  40502e:	f2c0 0340 	movt	r3, #64	; 0x40
  405032:	4798      	blx	r3
  405034:	bd10      	pop	{r4, pc}
        } else if (uc_button == 3) {
  405036:	2c03      	cmp	r4, #3
  405038:	d13c      	bne.n	4050b4 <ProcessButtonEvt+0x190>
            menu_screen_switch = 1;
  40503a:	f240 40b8 	movw	r0, #1208	; 0x4b8
  40503e:	f2c2 0000 	movt	r0, #8192	; 0x2000
  405042:	f04f 0101 	mov.w	r1, #1
  405046:	6001      	str	r1, [r0, #0]
  405048:	bd10      	pop	{r4, pc}
        }

    }        
	//All App clicks
    else if (app_mode && menu_mode == MENU_NO_MENU) {
  40504a:	f641 32e0 	movw	r2, #7136	; 0x1be0
  40504e:	f2c2 0200 	movt	r2, #8192	; 0x2000
  405052:	7813      	ldrb	r3, [r2, #0]
  405054:	b33b      	cbz	r3, 4050a6 <ProcessButtonEvt+0x182>
  405056:	2902      	cmp	r1, #2
  405058:	d125      	bne.n	4050a6 <ProcessButtonEvt+0x182>
        if (uc_button == 1) {
  40505a:	2c01      	cmp	r4, #1
  40505c:	d12a      	bne.n	4050b4 <ProcessButtonEvt+0x190>

            menu_mode = MENU_APP;
  40505e:	f240 40bc 	movw	r0, #1212	; 0x4bc
  405062:	f2c2 0000 	movt	r0, #8192	; 0x2000
  405066:	f04f 0106 	mov.w	r1, #6
  40506a:	6001      	str	r1, [r0, #0]
            app_mode = DISABLED;
  40506c:	f641 33e0 	movw	r3, #7136	; 0x1be0
  405070:	f2c2 0300 	movt	r3, #8192	; 0x2000
  405074:	f04f 0200 	mov.w	r2, #0
  405078:	701a      	strb	r2, [r3, #0]
            screen_extension = 3;
  40507a:	f641 30e4 	movw	r0, #7140	; 0x1be4
  40507e:	f2c2 0000 	movt	r0, #8192	; 0x2000
  405082:	f04f 0103 	mov.w	r1, #3
  405086:	6001      	str	r1, [r0, #0]
            menu_screen = 2;
  405088:	f240 43b4 	movw	r3, #1204	; 0x4b4
  40508c:	f2c2 0300 	movt	r3, #8192	; 0x2000
  405090:	f04f 0202 	mov.w	r2, #2
  405094:	601a      	str	r2, [r3, #0]
            menu_screen_switch = 1;
  405096:	f240 40b8 	movw	r0, #1208	; 0x4b8
  40509a:	f2c2 0000 	movt	r0, #8192	; 0x2000
  40509e:	f04f 0101 	mov.w	r1, #1
  4050a2:	6001      	str	r1, [r0, #0]
  4050a4:	bd10      	pop	{r4, pc}
        }

    }
	//Welcome screen clicks
    else {
        menu_screen_switch = 1;
  4050a6:	f240 41b8 	movw	r1, #1208	; 0x4b8
  4050aa:	f2c2 0100 	movt	r1, #8192	; 0x2000
  4050ae:	f04f 0301 	mov.w	r3, #1
  4050b2:	600b      	str	r3, [r1, #0]
  4050b4:	bd10      	pop	{r4, pc}
  4050b6:	bf00      	nop

004050b8 <Button3_Handler>:
}

/**
 * brief Handler for Button 3 rising edge interrupt.
 */
static void Button3_Handler(uint32_t id, uint32_t mask) {
  4050b8:	b508      	push	{r3, lr}
    if ((PIN_PUSHBUTTON_3_ID == id) && (PIN_PUSHBUTTON_3_MASK == mask))
  4050ba:	280d      	cmp	r0, #13
  4050bc:	d109      	bne.n	4050d2 <Button3_Handler+0x1a>
  4050be:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  4050c2:	d106      	bne.n	4050d2 <Button3_Handler+0x1a>
        ProcessButtonEvt(3);
  4050c4:	f04f 0003 	mov.w	r0, #3
  4050c8:	f644 7325 	movw	r3, #20261	; 0x4f25
  4050cc:	f2c0 0340 	movt	r3, #64	; 0x40
  4050d0:	4798      	blx	r3
  4050d2:	bd08      	pop	{r3, pc}

004050d4 <Button2_Handler>:
}

/**
 * brief Handler for Button 2 rising edge interrupt.
 */
static void Button2_Handler(uint32_t id, uint32_t mask) {
  4050d4:	b508      	push	{r3, lr}
    if ((PIN_PUSHBUTTON_2_ID == id) && (PIN_PUSHBUTTON_2_MASK == mask))
  4050d6:	280d      	cmp	r0, #13
  4050d8:	d109      	bne.n	4050ee <Button2_Handler+0x1a>
  4050da:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4050de:	d106      	bne.n	4050ee <Button2_Handler+0x1a>
        ProcessButtonEvt(2);
  4050e0:	f04f 0002 	mov.w	r0, #2
  4050e4:	f644 7325 	movw	r3, #20261	; 0x4f25
  4050e8:	f2c0 0340 	movt	r3, #64	; 0x40
  4050ec:	4798      	blx	r3
  4050ee:	bd08      	pop	{r3, pc}

004050f0 <Button1_Handler>:
}

/**
 * Handler for Button 1 rising edge interrupt.
 */
static void Button1_Handler(uint32_t id, uint32_t mask) {
  4050f0:	b508      	push	{r3, lr}
    if ((PIN_PUSHBUTTON_1_ID == id) && (PIN_PUSHBUTTON_1_MASK == mask))
  4050f2:	280b      	cmp	r0, #11
  4050f4:	d108      	bne.n	405108 <Button1_Handler+0x18>
  4050f6:	2901      	cmp	r1, #1
  4050f8:	d106      	bne.n	405108 <Button1_Handler+0x18>
        ProcessButtonEvt(1);
  4050fa:	f04f 0001 	mov.w	r0, #1
  4050fe:	f644 7325 	movw	r3, #20261	; 0x4f25
  405102:	f2c0 0340 	movt	r3, #64	; 0x40
  405106:	4798      	blx	r3
  405108:	bd08      	pop	{r3, pc}
  40510a:	bf00      	nop

0040510c <main>:
}

/**
 * Main. Is the GUI of the entire OS.
 */
int main(void) {
  40510c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405110:	b087      	sub	sp, #28

    while (true) {

        if (!app_mode && menu_mode == MENU_NO_MENU) {
  405112:	f240 43bc 	movw	r3, #1212	; 0x4bc
  405116:	f2c2 0300 	movt	r3, #8192	; 0x2000
  40511a:	9302      	str	r3, [sp, #8]
                continue;
            }
            menu_screen_switch = 1;
            menu_mode = MENU_MAIN;
        } else if (!app_mode && (menu_mode == MENU_MAIN || menu_mode == MENU_APP)) {
            if (menu_screen_switch != 0) {
  40511c:	f240 40b8 	movw	r0, #1208	; 0x4b8
  405120:	f2c2 0000 	movt	r0, #8192	; 0x2000
  405124:	9003      	str	r0, [sp, #12]
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  405126:	f44f 5a90 	mov.w	sl, #4608	; 0x1200
  40512a:	f2c4 0a0e 	movt	sl, #16398	; 0x400e
 */
int main(void) {

    while (true) {

        if (!app_mode && menu_mode == MENU_NO_MENU) {
  40512e:	f641 32e0 	movw	r2, #7136	; 0x1be0
  405132:	f2c2 0200 	movt	r2, #8192	; 0x2000
  405136:	7811      	ldrb	r1, [r2, #0]
  405138:	2900      	cmp	r1, #0
  40513a:	f040 81ee 	bne.w	40551a <main+0x40e>
  40513e:	9c02      	ldr	r4, [sp, #8]
  405140:	6825      	ldr	r5, [r4, #0]
  405142:	2d02      	cmp	r5, #2
  405144:	f040 8090 	bne.w	405268 <main+0x15c>
            //Welcome Screen
            controlLights(LIGHT_ON, LIGHT_ON, LIGHT_ON);
  405148:	f04f 0001 	mov.w	r0, #1
  40514c:	4601      	mov	r1, r0
  40514e:	4602      	mov	r2, r0
  405150:	f644 4491 	movw	r4, #19601	; 0x4c91
  405154:	f2c0 0440 	movt	r4, #64	; 0x40
  405158:	47a0      	blx	r4
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
  40515a:	f04f 0200 	mov.w	r2, #0
  40515e:	9201      	str	r2, [sp, #4]
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
	spi_select_device(SSD1306_SPI, &device);
  405160:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  405164:	f2c4 0400 	movt	r4, #16384	; 0x4000
  405168:	f643 3965 	movw	r9, #15205	; 0x3b65
  40516c:	f2c0 0940 	movt	r9, #64	; 0x40
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  405170:	9e01      	ldr	r6, [sp, #4]
  405172:	f006 0707 	and.w	r7, r6, #7
  405176:	f047 00b0 	orr.w	r0, r7, #176	; 0xb0
  40517a:	f644 4339 	movw	r3, #19513	; 0x4c39
  40517e:	f2c0 0340 	movt	r3, #64	; 0x40
  405182:	4798      	blx	r3
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  405184:	f04f 0010 	mov.w	r0, #16
  405188:	f644 4539 	movw	r5, #19513	; 0x4c39
  40518c:	f2c0 0540 	movt	r5, #64	; 0x40
  405190:	47a8      	blx	r5
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  405192:	f04f 0000 	mov.w	r0, #0
  405196:	f644 4139 	movw	r1, #19513	; 0x4c39
  40519a:	f2c0 0140 	movt	r1, #64	; 0x40
  40519e:	4788      	blx	r1
  4051a0:	f04f 0b80 	mov.w	fp, #128	; 0x80
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  4051a4:	f04f 0802 	mov.w	r8, #2
	spi_select_device(SSD1306_SPI, &device);
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  4051a8:	f240 0701 	movw	r7, #1
  4051ac:	f2c2 0700 	movt	r7, #8192	; 0x2000
	spi_deselect_device(SSD1306_SPI, &device);
  4051b0:	f643 36a1 	movw	r6, #15265	; 0x3ba1
  4051b4:	f2c0 0640 	movt	r6, #64	; 0x40
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  4051b8:	ad06      	add	r5, sp, #24
  4051ba:	f845 8d04 	str.w	r8, [r5, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  4051be:	4620      	mov	r0, r4
  4051c0:	4629      	mov	r1, r5
  4051c2:	47c8      	blx	r9
  4051c4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  4051c8:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
  4051cc:	f04f 0200 	mov.w	r2, #0
  4051d0:	60e2      	str	r2, [r4, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  4051d2:	f04f 0056 	mov.w	r0, #86	; 0x56
  4051d6:	47b8      	blx	r7
	spi_deselect_device(SSD1306_SPI, &device);
  4051d8:	4620      	mov	r0, r4
  4051da:	4629      	mov	r1, r5
  4051dc:	47b0      	blx	r6
  4051de:	f10b 3bff 	add.w	fp, fp, #4294967295
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  4051e2:	ad06      	add	r5, sp, #24
  4051e4:	f845 8d04 	str.w	r8, [r5, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  4051e8:	4620      	mov	r0, r4
  4051ea:	4629      	mov	r1, r5
  4051ec:	47c8      	blx	r9
  4051ee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  4051f2:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
  4051f6:	f04f 0100 	mov.w	r1, #0
  4051fa:	60e1      	str	r1, [r4, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  4051fc:	f04f 0056 	mov.w	r0, #86	; 0x56
  405200:	47b8      	blx	r7
	spi_deselect_device(SSD1306_SPI, &device);
  405202:	4620      	mov	r0, r4
  405204:	4629      	mov	r1, r5
  405206:	47b0      	blx	r6

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
  405208:	f1bb 0b01 	subs.w	fp, fp, #1
  40520c:	d1d4      	bne.n	4051b8 <main+0xac>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
  40520e:	9f01      	ldr	r7, [sp, #4]
  405210:	f107 0701 	add.w	r7, r7, #1
  405214:	b2fe      	uxtb	r6, r7
  405216:	9601      	str	r6, [sp, #4]
  405218:	2e04      	cmp	r6, #4
  40521a:	d1a9      	bne.n	405170 <main+0x64>
            ssd1306_clear(); // Clear screen.
            print4screen("              Welcome to", "              deJovi SOS", "________________________________", " click any button to continue");
  40521c:	f248 40c8 	movw	r0, #33992	; 0x84c8
  405220:	f2c0 0040 	movt	r0, #64	; 0x40
  405224:	f248 41e4 	movw	r1, #34020	; 0x84e4
  405228:	f2c0 0140 	movt	r1, #64	; 0x40
  40522c:	f248 5200 	movw	r2, #34048	; 0x8500
  405230:	f2c0 0240 	movt	r2, #64	; 0x40
  405234:	f248 5324 	movw	r3, #34084	; 0x8524
  405238:	f2c0 0340 	movt	r3, #64	; 0x40
  40523c:	f644 44b5 	movw	r4, #19637	; 0x4cb5
  405240:	f2c0 0440 	movt	r4, #64	; 0x40
  405244:	47a0      	blx	r4

            menu_screen_switch = 0;
  405246:	f04f 0000 	mov.w	r0, #0
  40524a:	9a03      	ldr	r2, [sp, #12]
  40524c:	6010      	str	r0, [r2, #0]
  40524e:	4615      	mov	r5, r2

            while (menu_screen_switch == 0) {
  405250:	682b      	ldr	r3, [r5, #0]
  405252:	2b00      	cmp	r3, #0
  405254:	d0fc      	beq.n	405250 <main+0x144>
                continue;
            }
            menu_screen_switch = 1;
  405256:	f04f 0101 	mov.w	r1, #1
  40525a:	9f03      	ldr	r7, [sp, #12]
  40525c:	6039      	str	r1, [r7, #0]
            menu_mode = MENU_MAIN;
  40525e:	f04f 0604 	mov.w	r6, #4
  405262:	9c02      	ldr	r4, [sp, #8]
  405264:	6026      	str	r6, [r4, #0]
  405266:	e158      	b.n	40551a <main+0x40e>
        } else if (!app_mode && (menu_mode == MENU_MAIN || menu_mode == MENU_APP)) {
  405268:	2d04      	cmp	r5, #4
  40526a:	d002      	beq.n	405272 <main+0x166>
  40526c:	2d06      	cmp	r5, #6
  40526e:	f040 8154 	bne.w	40551a <main+0x40e>
            if (menu_screen_switch != 0) {
  405272:	9e03      	ldr	r6, [sp, #12]
  405274:	6837      	ldr	r7, [r6, #0]
  405276:	2f00      	cmp	r7, #0
  405278:	f000 814f 	beq.w	40551a <main+0x40e>

                delay_ms(50); //delay needed to stop skipping
  40527c:	f648 201c 	movw	r0, #35356	; 0x8a1c
  405280:	f2c0 0006 	movt	r0, #6
  405284:	f240 0301 	movw	r3, #1
  405288:	f2c2 0300 	movt	r3, #8192	; 0x2000
  40528c:	4798      	blx	r3

                /* Refresh page title only if necessary. */
                if (menu_screen_switch == 1) {
  40528e:	6830      	ldr	r0, [r6, #0]
  405290:	2801      	cmp	r0, #1
  405292:	d119      	bne.n	4052c8 <main+0x1bc>
                    menu_screen = ((menu_screen + 1) % 3) + screen_extension;
  405294:	f240 45b4 	movw	r5, #1204	; 0x4b4
  405298:	f2c2 0500 	movt	r5, #8192	; 0x2000
  40529c:	682f      	ldr	r7, [r5, #0]
  40529e:	f641 31e4 	movw	r1, #7140	; 0x1be4
  4052a2:	f2c2 0100 	movt	r1, #8192	; 0x2000
  4052a6:	680b      	ldr	r3, [r1, #0]
  4052a8:	f107 0701 	add.w	r7, r7, #1
  4052ac:	f64a 24ab 	movw	r4, #43691	; 0xaaab
  4052b0:	f6ca 24aa 	movt	r4, #43690	; 0xaaaa
  4052b4:	fba4 4007 	umull	r4, r0, r4, r7
  4052b8:	ea4f 0650 	mov.w	r6, r0, lsr #1
  4052bc:	eb06 0246 	add.w	r2, r6, r6, lsl #1
  4052c0:	1abf      	subs	r7, r7, r2
  4052c2:	18f9      	adds	r1, r7, r3
  4052c4:	6029      	str	r1, [r5, #0]
  4052c6:	e02b      	b.n	405320 <main+0x214>
                } else if (menu_screen_switch == -1) {
  4052c8:	9a03      	ldr	r2, [sp, #12]
  4052ca:	6811      	ldr	r1, [r2, #0]
  4052cc:	f1b1 3fff 	cmp.w	r1, #4294967295
  4052d0:	d126      	bne.n	405320 <main+0x214>
                    if (menu_screen == 0) {
  4052d2:	f240 44b4 	movw	r4, #1204	; 0x4b4
  4052d6:	f2c2 0400 	movt	r4, #8192	; 0x2000
  4052da:	6825      	ldr	r5, [r4, #0]
  4052dc:	b93d      	cbnz	r5, 4052ee <main+0x1e2>
                        menu_screen = 2;
  4052de:	f240 46b4 	movw	r6, #1204	; 0x4b4
  4052e2:	f2c2 0600 	movt	r6, #8192	; 0x2000
  4052e6:	f04f 0202 	mov.w	r2, #2
  4052ea:	6032      	str	r2, [r6, #0]
  4052ec:	e018      	b.n	405320 <main+0x214>
                    } else {
                        menu_screen = ((menu_screen - 1) % 3) + screen_extension;
  4052ee:	f240 46b4 	movw	r6, #1204	; 0x4b4
  4052f2:	f2c2 0600 	movt	r6, #8192	; 0x2000
  4052f6:	6837      	ldr	r7, [r6, #0]
  4052f8:	f641 33e4 	movw	r3, #7140	; 0x1be4
  4052fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
  405300:	6818      	ldr	r0, [r3, #0]
  405302:	f107 32ff 	add.w	r2, r7, #4294967295
  405306:	f64a 21ab 	movw	r1, #43691	; 0xaaab
  40530a:	f6ca 21aa 	movt	r1, #43690	; 0xaaaa
  40530e:	fba1 4502 	umull	r4, r5, r1, r2
  405312:	ea4f 0455 	mov.w	r4, r5, lsr #1
  405316:	eb04 0744 	add.w	r7, r4, r4, lsl #1
  40531a:	1bd3      	subs	r3, r2, r7
  40531c:	1818      	adds	r0, r3, r0
  40531e:	6030      	str	r0, [r6, #0]
                    }
                }

                // Clear screen.
                cleanScreen();
  405320:	f644 45e5 	movw	r5, #19685	; 0x4ce5
  405324:	f2c0 0540 	movt	r5, #64	; 0x40
  405328:	47a8      	blx	r5
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  40532a:	f04f 00b0 	mov.w	r0, #176	; 0xb0
  40532e:	f644 4439 	movw	r4, #19513	; 0x4c39
  405332:	f2c0 0440 	movt	r4, #64	; 0x40
  405336:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  405338:	f04f 0010 	mov.w	r0, #16
  40533c:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  40533e:	f04f 0000 	mov.w	r0, #0
  405342:	47a0      	blx	r4
                ssd1306_set_page_address(0);
                ssd1306_set_column_address(0);

                /* Built in app Mode. */
                if (menu_screen == 0) {
  405344:	f240 43b4 	movw	r3, #1204	; 0x4b4
  405348:	f2c2 0300 	movt	r3, #8192	; 0x2000
  40534c:	6818      	ldr	r0, [r3, #0]
  40534e:	b9f8      	cbnz	r0, 405390 <main+0x284>
                    controlLights(LIGHT_ON, LIGHT_OFF, LIGHT_OFF);
  405350:	f04f 0001 	mov.w	r0, #1
  405354:	f04f 0100 	mov.w	r1, #0
  405358:	460a      	mov	r2, r1
  40535a:	f644 4391 	movw	r3, #19601	; 0x4c91
  40535e:	f2c0 0340 	movt	r3, #64	; 0x40
  405362:	4798      	blx	r3
                    print4screen("Built in Apps", "Choose a built in app", "________________________________", " <-             Launch             ->");
  405364:	f248 5044 	movw	r0, #34116	; 0x8544
  405368:	f2c0 0040 	movt	r0, #64	; 0x40
  40536c:	f248 5154 	movw	r1, #34132	; 0x8554
  405370:	f2c0 0140 	movt	r1, #64	; 0x40
  405374:	f248 5200 	movw	r2, #34048	; 0x8500
  405378:	f2c0 0240 	movt	r2, #64	; 0x40
  40537c:	f248 536c 	movw	r3, #34156	; 0x856c
  405380:	f2c0 0340 	movt	r3, #64	; 0x40
  405384:	f644 45b5 	movw	r5, #19637	; 0x4cb5
  405388:	f2c0 0540 	movt	r5, #64	; 0x40
  40538c:	47a8      	blx	r5
  40538e:	e0c0      	b.n	405512 <main+0x406>
                    //browseApps();
                }
				/* Load app mode. */
                else if (menu_screen == 1) {
  405390:	f240 46b4 	movw	r6, #1204	; 0x4b4
  405394:	f2c2 0600 	movt	r6, #8192	; 0x2000
  405398:	6832      	ldr	r2, [r6, #0]
  40539a:	2a01      	cmp	r2, #1
  40539c:	d11f      	bne.n	4053de <main+0x2d2>
                    controlLights(LIGHT_OFF, LIGHT_ON, LIGHT_OFF);
  40539e:	f04f 0000 	mov.w	r0, #0
  4053a2:	f04f 0101 	mov.w	r1, #1
  4053a6:	4602      	mov	r2, r0
  4053a8:	f644 4691 	movw	r6, #19601	; 0x4c91
  4053ac:	f2c0 0640 	movt	r6, #64	; 0x40
  4053b0:	47b0      	blx	r6
                    print4screen("Load Apps from SD Card", "It's a cheap app store", "________________________________", " <-             Launch             ->");
  4053b2:	f248 5094 	movw	r0, #34196	; 0x8594
  4053b6:	f2c0 0040 	movt	r0, #64	; 0x40
  4053ba:	f248 51ac 	movw	r1, #34220	; 0x85ac
  4053be:	f2c0 0140 	movt	r1, #64	; 0x40
  4053c2:	f248 5200 	movw	r2, #34048	; 0x8500
  4053c6:	f2c0 0240 	movt	r2, #64	; 0x40
  4053ca:	f248 536c 	movw	r3, #34156	; 0x856c
  4053ce:	f2c0 0340 	movt	r3, #64	; 0x40
  4053d2:	f644 47b5 	movw	r7, #19637	; 0x4cb5
  4053d6:	f2c0 0740 	movt	r7, #64	; 0x40
  4053da:	47b8      	blx	r7
  4053dc:	e099      	b.n	405512 <main+0x406>

                }
				/* Thread Demo Mode. */
                else if (menu_screen == 2) {
  4053de:	f240 47b4 	movw	r7, #1204	; 0x4b4
  4053e2:	f2c2 0700 	movt	r7, #8192	; 0x2000
  4053e6:	6839      	ldr	r1, [r7, #0]
  4053e8:	2902      	cmp	r1, #2
  4053ea:	d11f      	bne.n	40542c <main+0x320>
                    controlLights(LIGHT_OFF, LIGHT_OFF, LIGHT_ON);
  4053ec:	f04f 0000 	mov.w	r0, #0
  4053f0:	4601      	mov	r1, r0
  4053f2:	f04f 0201 	mov.w	r2, #1
  4053f6:	f644 4591 	movw	r5, #19601	; 0x4c91
  4053fa:	f2c0 0540 	movt	r5, #64	; 0x40
  4053fe:	47a8      	blx	r5
                    print4screen("Thread Demo Mode", "See those threads run", "________________________________", " <-             Launch             ->");
  405400:	f248 50c4 	movw	r0, #34244	; 0x85c4
  405404:	f2c0 0040 	movt	r0, #64	; 0x40
  405408:	f248 51d8 	movw	r1, #34264	; 0x85d8
  40540c:	f2c0 0140 	movt	r1, #64	; 0x40
  405410:	f248 5200 	movw	r2, #34048	; 0x8500
  405414:	f2c0 0240 	movt	r2, #64	; 0x40
  405418:	f248 536c 	movw	r3, #34156	; 0x856c
  40541c:	f2c0 0340 	movt	r3, #64	; 0x40
  405420:	f644 44b5 	movw	r4, #19637	; 0x4cb5
  405424:	f2c0 0440 	movt	r4, #64	; 0x40
  405428:	47a0      	blx	r4
  40542a:	e072      	b.n	405512 <main+0x406>


                }
				/* Temp Mode. */
                else if (menu_screen == 3) {
  40542c:	f240 45b4 	movw	r5, #1204	; 0x4b4
  405430:	f2c2 0500 	movt	r5, #8192	; 0x2000
  405434:	682c      	ldr	r4, [r5, #0]
  405436:	2c03      	cmp	r4, #3
  405438:	d11f      	bne.n	40547a <main+0x36e>
                    controlLights(LIGHT_ON, LIGHT_OFF, LIGHT_OFF);
  40543a:	f04f 0001 	mov.w	r0, #1
  40543e:	f04f 0100 	mov.w	r1, #0
  405442:	460a      	mov	r2, r1
  405444:	f644 4391 	movw	r3, #19601	; 0x4c91
  405448:	f2c0 0340 	movt	r3, #64	; 0x40
  40544c:	4798      	blx	r3
                    print4screen("Temperature Mode", "How cold is it?", "________________________________", " Back          Launch            ->");
  40544e:	f248 50f0 	movw	r0, #34288	; 0x85f0
  405452:	f2c0 0040 	movt	r0, #64	; 0x40
  405456:	f248 6104 	movw	r1, #34308	; 0x8604
  40545a:	f2c0 0140 	movt	r1, #64	; 0x40
  40545e:	f248 5200 	movw	r2, #34048	; 0x8500
  405462:	f2c0 0240 	movt	r2, #64	; 0x40
  405466:	f248 6314 	movw	r3, #34324	; 0x8614
  40546a:	f2c0 0340 	movt	r3, #64	; 0x40
  40546e:	f644 47b5 	movw	r7, #19637	; 0x4cb5
  405472:	f2c0 0740 	movt	r7, #64	; 0x40
  405476:	47b8      	blx	r7
  405478:	e04b      	b.n	405512 <main+0x406>

                }
				/* Light Mode. */
                else if (menu_screen == 4) {
  40547a:	f240 43b4 	movw	r3, #1204	; 0x4b4
  40547e:	f2c2 0300 	movt	r3, #8192	; 0x2000
  405482:	6818      	ldr	r0, [r3, #0]
  405484:	2804      	cmp	r0, #4
  405486:	d11f      	bne.n	4054c8 <main+0x3bc>
                    controlLights(LIGHT_ON, LIGHT_ON, LIGHT_OFF);
  405488:	f04f 0001 	mov.w	r0, #1
  40548c:	4601      	mov	r1, r0
  40548e:	f04f 0200 	mov.w	r2, #0
  405492:	f644 4491 	movw	r4, #19601	; 0x4c91
  405496:	f2c0 0440 	movt	r4, #64	; 0x40
  40549a:	47a0      	blx	r4
                    print4screen("Light Mode", "Turn those lights off", "________________________________", " Back          Launch            ->");
  40549c:	f248 6038 	movw	r0, #34360	; 0x8638
  4054a0:	f2c0 0040 	movt	r0, #64	; 0x40
  4054a4:	f248 6144 	movw	r1, #34372	; 0x8644
  4054a8:	f2c0 0140 	movt	r1, #64	; 0x40
  4054ac:	f248 5200 	movw	r2, #34048	; 0x8500
  4054b0:	f2c0 0240 	movt	r2, #64	; 0x40
  4054b4:	f248 6314 	movw	r3, #34324	; 0x8614
  4054b8:	f2c0 0340 	movt	r3, #64	; 0x40
  4054bc:	f644 46b5 	movw	r6, #19637	; 0x4cb5
  4054c0:	f2c0 0640 	movt	r6, #64	; 0x40
  4054c4:	47b0      	blx	r6
  4054c6:	e024      	b.n	405512 <main+0x406>

                }
				/* Thread Mode. */
                else if (menu_screen == 5) {
  4054c8:	f240 46b4 	movw	r6, #1204	; 0x4b4
  4054cc:	f2c2 0600 	movt	r6, #8192	; 0x2000
  4054d0:	6832      	ldr	r2, [r6, #0]
  4054d2:	2a05      	cmp	r2, #5
  4054d4:	d11d      	bne.n	405512 <main+0x406>
                    controlLights(LIGHT_ON, LIGHT_ON, LIGHT_ON);
  4054d6:	f04f 0001 	mov.w	r0, #1
  4054da:	4601      	mov	r1, r0
  4054dc:	4602      	mov	r2, r0
  4054de:	f644 4791 	movw	r7, #19601	; 0x4c91
  4054e2:	f2c0 0740 	movt	r7, #64	; 0x40
  4054e6:	47b8      	blx	r7
                    print4screen("Thread Demo Mode", "Demo of threads", "________________________________", " Back          Launch            ->");
  4054e8:	f248 50c4 	movw	r0, #34244	; 0x85c4
  4054ec:	f2c0 0040 	movt	r0, #64	; 0x40
  4054f0:	f248 615c 	movw	r1, #34396	; 0x865c
  4054f4:	f2c0 0140 	movt	r1, #64	; 0x40
  4054f8:	f248 5200 	movw	r2, #34048	; 0x8500
  4054fc:	f2c0 0240 	movt	r2, #64	; 0x40
  405500:	f248 6314 	movw	r3, #34324	; 0x8614
  405504:	f2c0 0340 	movt	r3, #64	; 0x40
  405508:	f644 45b5 	movw	r5, #19637	; 0x4cb5
  40550c:	f2c0 0540 	movt	r5, #64	; 0x40
  405510:	47a8      	blx	r5

                }
                menu_screen_switch = 0;
  405512:	f04f 0100 	mov.w	r1, #0
  405516:	9803      	ldr	r0, [sp, #12]
  405518:	6001      	str	r1, [r0, #0]
            }
        }

        /* Wait and stop screen flickers. */
        delay_ms(100);
  40551a:	f241 4037 	movw	r0, #5175	; 0x1437
  40551e:	f2c0 000d 	movt	r0, #13
  405522:	f240 0201 	movw	r2, #1
  405526:	f2c2 0200 	movt	r2, #8192	; 0x2000
  40552a:	4790      	blx	r2
    }
  40552c:	e5ff      	b.n	40512e <main+0x22>
  40552e:	bf00      	nop

00405530 <Initialize>:
}

/*
 * Initializes everything.
 */
void Initialize(void) {
  405530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405534:	b087      	sub	sp, #28

    // Initialize clocks.
    sysclk_init();
  405536:	f643 13fd 	movw	r3, #14845	; 0x39fd
  40553a:	f2c0 0340 	movt	r3, #64	; 0x40
  40553e:	4798      	blx	r3

    irq_initialize_vectors();
    cpu_irq_enable();
  405540:	f04f 0401 	mov.w	r4, #1
  405544:	f240 40ac 	movw	r0, #1196	; 0x4ac
  405548:	f2c2 0000 	movt	r0, #8192	; 0x2000
  40554c:	7004      	strb	r4, [r0, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40554e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  405552:	b662      	cpsie	i

    // Initialize GPIO states.
    board_init();
  405554:	f643 31c5 	movw	r1, #15301	; 0x3bc5
  405558:	f2c0 0140 	movt	r1, #64	; 0x40
  40555c:	4788      	blx	r1
/**
 * Configure the ADC for the light sensor.
 */
static void configure_adc(void) {
    /* Configure ADC pin for light sensor. */
    gpio_configure_pin(LIGHT_SENSOR_GPIO, LIGHT_SENSOR_FLAGS);
  40555e:	f04f 0020 	mov.w	r0, #32
  405562:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  405566:	f643 62f5 	movw	r2, #16117	; 0x3ef5
  40556a:	f2c0 0240 	movt	r2, #64	; 0x40
  40556e:	4790      	blx	r2

    /* Enable ADC clock. */
    pmc_enable_periph_clk(ID_ADC);
  405570:	f04f 001d 	mov.w	r0, #29
  405574:	f244 3771 	movw	r7, #17265	; 0x4371
  405578:	f2c0 0740 	movt	r7, #64	; 0x40
  40557c:	47b8      	blx	r7

    /* Configure ADC. */
    adc_init(ADC, sysclk_get_cpu_hz(), 1000000, ADC_MR_STARTUP_SUT0);
  40557e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
  405582:	f2c4 0503 	movt	r5, #16387	; 0x4003
  405586:	4628      	mov	r0, r5
  405588:	f44f 6160 	mov.w	r1, #3584	; 0xe00
  40558c:	f2c0 7127 	movt	r1, #1831	; 0x727
  405590:	f244 2240 	movw	r2, #16960	; 0x4240
  405594:	f2c0 020f 	movt	r2, #15
  405598:	f04f 0300 	mov.w	r3, #0
  40559c:	f643 46f1 	movw	r6, #15601	; 0x3cf1
  4055a0:	f2c0 0640 	movt	r6, #64	; 0x40
  4055a4:	47b0      	blx	r6
    adc_enable_channel(ADC, ADC_CHANNEL_4);
  4055a6:	4628      	mov	r0, r5
  4055a8:	f04f 0104 	mov.w	r1, #4
  4055ac:	f643 5341 	movw	r3, #15681	; 0x3d41
  4055b0:	f2c0 0340 	movt	r3, #64	; 0x40
  4055b4:	4798      	blx	r3
    adc_configure_trigger(ADC, ADC_TRIG_SW, 1);
  4055b6:	4628      	mov	r0, r5
  4055b8:	f04f 0100 	mov.w	r1, #0
  4055bc:	4622      	mov	r2, r4
  4055be:	f643 5531 	movw	r5, #15665	; 0x3d31
  4055c2:	f2c0 0540 	movt	r5, #64	; 0x40
  4055c6:	47a8      	blx	r5

    // Configure ADC for light sensor.
    configure_adc();

    // Initialize temp sensor, at30tse.
    at30tse_init();
  4055c8:	f643 0055 	movw	r0, #14421	; 0x3855
  4055cc:	f2c0 0040 	movt	r0, #64	; 0x40
  4055d0:	4780      	blx	r0
 * pressed or released.
 */
static void configure_buttons(void) {

    /* Configure Pushbutton 1. */
    pmc_enable_periph_clk(PIN_PUSHBUTTON_1_ID);
  4055d2:	f04f 000b 	mov.w	r0, #11
  4055d6:	47b8      	blx	r7
    pio_set_debounce_filter(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK, 10);
  4055d8:	f44f 6560 	mov.w	r5, #3584	; 0xe00
  4055dc:	f2c4 050e 	movt	r5, #16398	; 0x400e
  4055e0:	4628      	mov	r0, r5
  4055e2:	4621      	mov	r1, r4
  4055e4:	f04f 020a 	mov.w	r2, #10
  4055e8:	f643 5a6d 	movw	sl, #15725	; 0x3d6d
  4055ec:	f2c0 0a40 	movt	sl, #64	; 0x40
  4055f0:	47d0      	blx	sl
    pio_handler_set(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_ID,
  4055f2:	f245 01f1 	movw	r1, #20721	; 0x50f1
  4055f6:	f2c0 0140 	movt	r1, #64	; 0x40
  4055fa:	9100      	str	r1, [sp, #0]
  4055fc:	4628      	mov	r0, r5
  4055fe:	f04f 010b 	mov.w	r1, #11
  405602:	4622      	mov	r2, r4
  405604:	f04f 0379 	mov.w	r3, #121	; 0x79
  405608:	f244 09e1 	movw	r9, #16609	; 0x40e1
  40560c:	f2c0 0940 	movt	r9, #64	; 0x40
  405610:	47c8      	blx	r9
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  405612:	f44f 4661 	mov.w	r6, #57600	; 0xe100
  405616:	f2ce 0600 	movt	r6, #57344	; 0xe000
  40561a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40561e:	6032      	str	r2, [r6, #0]
            PIN_PUSHBUTTON_1_MASK, PIN_PUSHBUTTON_1_ATTR, Button1_Handler);
    NVIC_EnableIRQ((IRQn_Type) PIN_PUSHBUTTON_1_ID);
    pio_handler_set_priority(PIN_PUSHBUTTON_1_PIO, (IRQn_Type) PIN_PUSHBUTTON_1_ID, IRQ_PRIOR_PIO);
  405620:	4628      	mov	r0, r5
  405622:	f04f 010b 	mov.w	r1, #11
  405626:	f04f 0200 	mov.w	r2, #0
  40562a:	f244 1885 	movw	r8, #16773	; 0x4185
  40562e:	f2c0 0840 	movt	r8, #64	; 0x40
  405632:	47c0      	blx	r8
    pio_enable_interrupt(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK);
  405634:	4628      	mov	r0, r5
  405636:	4621      	mov	r1, r4
  405638:	f643 6559 	movw	r5, #15961	; 0x3e59
  40563c:	f2c0 0540 	movt	r5, #64	; 0x40
  405640:	47a8      	blx	r5

    /* Configure Pushbutton 2. */
    pmc_enable_periph_clk(PIN_PUSHBUTTON_2_ID);
  405642:	f04f 000d 	mov.w	r0, #13
  405646:	47b8      	blx	r7
    pio_set_debounce_filter(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK, 10);
  405648:	f44f 5490 	mov.w	r4, #4608	; 0x1200
  40564c:	f2c4 040e 	movt	r4, #16398	; 0x400e
  405650:	4620      	mov	r0, r4
  405652:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  405656:	f04f 020a 	mov.w	r2, #10
  40565a:	47d0      	blx	sl
    pio_handler_set(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_ID,
  40565c:	f245 03d5 	movw	r3, #20693	; 0x50d5
  405660:	f2c0 0340 	movt	r3, #64	; 0x40
  405664:	9300      	str	r3, [sp, #0]
  405666:	4620      	mov	r0, r4
  405668:	f04f 010d 	mov.w	r1, #13
  40566c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  405670:	f04f 0379 	mov.w	r3, #121	; 0x79
  405674:	47c8      	blx	r9
  405676:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
  40567a:	f8c6 b000 	str.w	fp, [r6]
            PIN_PUSHBUTTON_2_MASK, PIN_PUSHBUTTON_2_ATTR, Button2_Handler);
    NVIC_EnableIRQ((IRQn_Type) PIN_PUSHBUTTON_2_ID);
    pio_handler_set_priority(PIN_PUSHBUTTON_2_PIO, (IRQn_Type) PIN_PUSHBUTTON_2_ID, IRQ_PRIOR_PIO);
  40567e:	4620      	mov	r0, r4
  405680:	f04f 010d 	mov.w	r1, #13
  405684:	f04f 0200 	mov.w	r2, #0
  405688:	47c0      	blx	r8
    pio_enable_interrupt(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK);
  40568a:	4620      	mov	r0, r4
  40568c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  405690:	47a8      	blx	r5

    /* Configure Pushbutton 3. */
    pmc_enable_periph_clk(PIN_PUSHBUTTON_3_ID);
  405692:	f04f 000d 	mov.w	r0, #13
  405696:	47b8      	blx	r7
    pio_set_debounce_filter(PIN_PUSHBUTTON_3_PIO, PIN_PUSHBUTTON_3_MASK, 10);
  405698:	4620      	mov	r0, r4
  40569a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40569e:	f04f 020a 	mov.w	r2, #10
  4056a2:	47d0      	blx	sl
    pio_handler_set(PIN_PUSHBUTTON_3_PIO, PIN_PUSHBUTTON_3_ID,
  4056a4:	f245 07b9 	movw	r7, #20665	; 0x50b9
  4056a8:	f2c0 0740 	movt	r7, #64	; 0x40
  4056ac:	9700      	str	r7, [sp, #0]
  4056ae:	4620      	mov	r0, r4
  4056b0:	f04f 010d 	mov.w	r1, #13
  4056b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4056b8:	f04f 0379 	mov.w	r3, #121	; 0x79
  4056bc:	47c8      	blx	r9
  4056be:	f8c6 b000 	str.w	fp, [r6]
            PIN_PUSHBUTTON_3_MASK, PIN_PUSHBUTTON_3_ATTR, Button3_Handler);
    NVIC_EnableIRQ((IRQn_Type) PIN_PUSHBUTTON_3_ID);
    pio_handler_set_priority(PIN_PUSHBUTTON_3_PIO, (IRQn_Type) PIN_PUSHBUTTON_3_ID, IRQ_PRIOR_PIO);
  4056c2:	4620      	mov	r0, r4
  4056c4:	f04f 010d 	mov.w	r1, #13
  4056c8:	f04f 0200 	mov.w	r2, #0
  4056cc:	47c0      	blx	r8
    pio_enable_interrupt(PIN_PUSHBUTTON_3_PIO, PIN_PUSHBUTTON_3_MASK);
  4056ce:	4620      	mov	r0, r4
  4056d0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4056d4:	47a8      	blx	r5

    // Configure IO1 buttons.
    configure_buttons();

    // Initialize Serial Peripheral Interface (SPI) and Screen (SSD1306) controller.
    ssd1306_init();
  4056d6:	f243 6079 	movw	r0, #13945	; 0x3679
  4056da:	f2c0 0040 	movt	r0, #64	; 0x40
  4056de:	4780      	blx	r0
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
  4056e0:	f04f 0100 	mov.w	r1, #0
  4056e4:	9103      	str	r1, [sp, #12]
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
	spi_select_device(SSD1306_SPI, &device);
  4056e6:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  4056ea:	f2c4 0400 	movt	r4, #16384	; 0x4000
  4056ee:	f643 3a65 	movw	sl, #15205	; 0x3b65
  4056f2:	f2c0 0a40 	movt	sl, #64	; 0x40
  4056f6:	f44f 5990 	mov.w	r9, #4608	; 0x1200
  4056fa:	f2c4 090e 	movt	r9, #16398	; 0x400e
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4056fe:	9e03      	ldr	r6, [sp, #12]
  405700:	f006 0207 	and.w	r2, r6, #7
  405704:	f042 00b0 	orr.w	r0, r2, #176	; 0xb0
  405708:	f644 4539 	movw	r5, #19513	; 0x4c39
  40570c:	f2c0 0540 	movt	r5, #64	; 0x40
  405710:	47a8      	blx	r5
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  405712:	f04f 0010 	mov.w	r0, #16
  405716:	f644 4339 	movw	r3, #19513	; 0x4c39
  40571a:	f2c0 0340 	movt	r3, #64	; 0x40
  40571e:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  405720:	f04f 0000 	mov.w	r0, #0
  405724:	f644 4739 	movw	r7, #19513	; 0x4c39
  405728:	f2c0 0740 	movt	r7, #64	; 0x40
  40572c:	47b8      	blx	r7
  40572e:	f04f 0b80 	mov.w	fp, #128	; 0x80
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  405732:	f04f 0802 	mov.w	r8, #2
	spi_select_device(SSD1306_SPI, &device);
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  405736:	f240 0701 	movw	r7, #1
  40573a:	f2c2 0700 	movt	r7, #8192	; 0x2000
	spi_deselect_device(SSD1306_SPI, &device);
  40573e:	f643 36a1 	movw	r6, #15265	; 0x3ba1
  405742:	f2c0 0640 	movt	r6, #64	; 0x40
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  405746:	ad06      	add	r5, sp, #24
  405748:	f845 8d04 	str.w	r8, [r5, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  40574c:	4620      	mov	r0, r4
  40574e:	4629      	mov	r1, r5
  405750:	47d0      	blx	sl
  405752:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  405756:	f8c9 0030 	str.w	r0, [r9, #48]	; 0x30
  40575a:	f04f 0100 	mov.w	r1, #0
  40575e:	60e1      	str	r1, [r4, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  405760:	f04f 0056 	mov.w	r0, #86	; 0x56
  405764:	47b8      	blx	r7
	spi_deselect_device(SSD1306_SPI, &device);
  405766:	4620      	mov	r0, r4
  405768:	4629      	mov	r1, r5
  40576a:	47b0      	blx	r6
  40576c:	f10b 3bff 	add.w	fp, fp, #4294967295
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  405770:	ad06      	add	r5, sp, #24
  405772:	f845 8d04 	str.w	r8, [r5, #-4]!
	spi_select_device(SSD1306_SPI, &device);
  405776:	4620      	mov	r0, r4
  405778:	4629      	mov	r1, r5
  40577a:	47d0      	blx	sl
  40577c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  405780:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
  405784:	f04f 0300 	mov.w	r3, #0
  405788:	60e3      	str	r3, [r4, #12]
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
  40578a:	f04f 0056 	mov.w	r0, #86	; 0x56
  40578e:	47b8      	blx	r7
	spi_deselect_device(SSD1306_SPI, &device);
  405790:	4620      	mov	r0, r4
  405792:	4629      	mov	r1, r5
  405794:	47b0      	blx	r6

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
  405796:	f1bb 0b01 	subs.w	fp, fp, #1
  40579a:	d1d4      	bne.n	405746 <Initialize+0x216>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
  40579c:	9803      	ldr	r0, [sp, #12]
  40579e:	f100 0001 	add.w	r0, r0, #1
  4057a2:	b2c1      	uxtb	r1, r0
  4057a4:	9103      	str	r1, [sp, #12]
  4057a6:	2904      	cmp	r1, #4
  4057a8:	d1a9      	bne.n	4056fe <Initialize+0x1ce>
    ssd1306_clear();
}
  4057aa:	b007      	add	sp, #28
  4057ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004057b0 <thread_light>:
/**
 * Thread, displays the light percentage on the screen.
 */
void thread_light() {
  4057b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    delay_ms(100);
  4057b4:	f241 4037 	movw	r0, #5175	; 0x1437
  4057b8:	f2c0 000d 	movt	r0, #13
  4057bc:	f240 0301 	movw	r3, #1
  4057c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4057c4:	4798      	blx	r3
    int itt = 1;
  4057c6:	f04f 0401 	mov.w	r4, #1
    while (1) {
        if (light_mode != DISABLED) {
  4057ca:	f641 37ec 	movw	r7, #7148	; 0x1bec
  4057ce:	f2c2 0700 	movt	r7, #8192	; 0x2000
                sprintf(light_disp, "%d", light);
                printStringPosition(light_disp, 0, 106);
                printStringPosition("%", 0, 119);
            }
            itt++;
            delay_ms(65);
  4057d2:	f248 0857 	movw	r8, #32855	; 0x8057
  4057d6:	f2c0 0808 	movt	r8, #8
  4057da:	f240 0901 	movw	r9, #1
  4057de:	f2c2 0900 	movt	r9, #8192	; 0x2000

            if (light < 20) {
  4057e2:	f641 4650 	movw	r6, #7248	; 0x1c50
  4057e6:	f2c2 0600 	movt	r6, #8192	; 0x2000
 */
void thread_light() {
    delay_ms(100);
    int itt = 1;
    while (1) {
        if (light_mode != DISABLED) {
  4057ea:	6838      	ldr	r0, [r7, #0]
  4057ec:	2800      	cmp	r0, #0
  4057ee:	d054      	beq.n	40589a <thread_light+0xea>
            if (itt % 2) {
  4057f0:	f014 0f01 	tst.w	r4, #1
  4057f4:	d005      	beq.n	405802 <thread_light+0x52>
                getLight();
  4057f6:	f644 41ed 	movw	r1, #19693	; 0x4ced
  4057fa:	f2c0 0140 	movt	r1, #64	; 0x40
  4057fe:	4788      	blx	r1
  405800:	e021      	b.n	405846 <thread_light+0x96>
            } else {
                sprintf(light_disp, "%d", light);
  405802:	6832      	ldr	r2, [r6, #0]
  405804:	f641 65a8 	movw	r5, #7848	; 0x1ea8
  405808:	f2c2 0500 	movt	r5, #8192	; 0x2000
  40580c:	4628      	mov	r0, r5
  40580e:	f248 417c 	movw	r1, #33916	; 0x847c
  405812:	f2c0 0140 	movt	r1, #64	; 0x40
  405816:	f646 03e1 	movw	r3, #26849	; 0x68e1
  40581a:	f2c0 0340 	movt	r3, #64	; 0x40
  40581e:	4798      	blx	r3
                printStringPosition(light_disp, 0, 106);
  405820:	4628      	mov	r0, r5
  405822:	f04f 0100 	mov.w	r1, #0
  405826:	f04f 026a 	mov.w	r2, #106	; 0x6a
  40582a:	f644 45b1 	movw	r5, #19633	; 0x4cb1
  40582e:	f2c0 0540 	movt	r5, #64	; 0x40
  405832:	47a8      	blx	r5
                printStringPosition("%", 0, 119);
  405834:	f248 606c 	movw	r0, #34412	; 0x866c
  405838:	f2c0 0040 	movt	r0, #64	; 0x40
  40583c:	f04f 0100 	mov.w	r1, #0
  405840:	f04f 0277 	mov.w	r2, #119	; 0x77
  405844:	47a8      	blx	r5
            }
            itt++;
  405846:	f104 0401 	add.w	r4, r4, #1
            delay_ms(65);
  40584a:	4640      	mov	r0, r8
  40584c:	47c8      	blx	r9

            if (light < 20) {
  40584e:	6832      	ldr	r2, [r6, #0]
  405850:	2a13      	cmp	r2, #19
  405852:	d80d      	bhi.n	405870 <thread_light+0xc0>
                printStringPosition("VERY DARK", 2, 0);
  405854:	f248 6070 	movw	r0, #34416	; 0x8670
  405858:	f2c0 0040 	movt	r0, #64	; 0x40
  40585c:	f04f 0102 	mov.w	r1, #2
  405860:	f04f 0200 	mov.w	r2, #0
  405864:	f644 43b1 	movw	r3, #19633	; 0x4cb1
  405868:	f2c0 0340 	movt	r3, #64	; 0x40
  40586c:	4798      	blx	r3
  40586e:	e7bc      	b.n	4057ea <thread_light+0x3a>
            } else if (light > 80) {
  405870:	6833      	ldr	r3, [r6, #0]
  405872:	2b50      	cmp	r3, #80	; 0x50
                printStringPosition("TOO BRIGHT", 2, 0);
  405874:	bf87      	ittee	hi
  405876:	f248 607c 	movwhi	r0, #34428	; 0x867c
  40587a:	f2c0 0040 	movthi	r0, #64	; 0x40
            } else {
                printStringPosition("_____________", 2, 0);
  40587e:	f248 6088 	movwls	r0, #34440	; 0x8688
  405882:	f2c0 0040 	movtls	r0, #64	; 0x40
  405886:	f04f 0102 	mov.w	r1, #2
  40588a:	f04f 0200 	mov.w	r2, #0
  40588e:	f644 45b1 	movw	r5, #19633	; 0x4cb1
  405892:	f2c0 0540 	movt	r5, #64	; 0x40
  405896:	47a8      	blx	r5
  405898:	e7a7      	b.n	4057ea <thread_light+0x3a>
            }
        } else {
            printStringPosition("      ", 0, 106);
  40589a:	f248 4044 	movw	r0, #33860	; 0x8444
  40589e:	f2c0 0040 	movt	r0, #64	; 0x40
  4058a2:	f04f 0100 	mov.w	r1, #0
  4058a6:	f04f 026a 	mov.w	r2, #106	; 0x6a
  4058aa:	f644 45b1 	movw	r5, #19633	; 0x4cb1
  4058ae:	f2c0 0540 	movt	r5, #64	; 0x40
  4058b2:	47a8      	blx	r5
            printStringPosition("_____________", 2, 0);
  4058b4:	f248 6088 	movw	r0, #34440	; 0x8688
  4058b8:	f2c0 0040 	movt	r0, #64	; 0x40
  4058bc:	f04f 0102 	mov.w	r1, #2
  4058c0:	f04f 0200 	mov.w	r2, #0
  4058c4:	47a8      	blx	r5
  4058c6:	e790      	b.n	4057ea <thread_light+0x3a>

004058c8 <__aeabi_drsub>:
  4058c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4058cc:	e002      	b.n	4058d4 <__adddf3>
  4058ce:	bf00      	nop

004058d0 <__aeabi_dsub>:
  4058d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004058d4 <__adddf3>:
  4058d4:	b530      	push	{r4, r5, lr}
  4058d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4058da:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4058de:	ea94 0f05 	teq	r4, r5
  4058e2:	bf08      	it	eq
  4058e4:	ea90 0f02 	teqeq	r0, r2
  4058e8:	bf1f      	itttt	ne
  4058ea:	ea54 0c00 	orrsne.w	ip, r4, r0
  4058ee:	ea55 0c02 	orrsne.w	ip, r5, r2
  4058f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4058f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4058fa:	f000 80e2 	beq.w	405ac2 <__adddf3+0x1ee>
  4058fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
  405902:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  405906:	bfb8      	it	lt
  405908:	426d      	neglt	r5, r5
  40590a:	dd0c      	ble.n	405926 <__adddf3+0x52>
  40590c:	442c      	add	r4, r5
  40590e:	ea80 0202 	eor.w	r2, r0, r2
  405912:	ea81 0303 	eor.w	r3, r1, r3
  405916:	ea82 0000 	eor.w	r0, r2, r0
  40591a:	ea83 0101 	eor.w	r1, r3, r1
  40591e:	ea80 0202 	eor.w	r2, r0, r2
  405922:	ea81 0303 	eor.w	r3, r1, r3
  405926:	2d36      	cmp	r5, #54	; 0x36
  405928:	bf88      	it	hi
  40592a:	bd30      	pophi	{r4, r5, pc}
  40592c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405930:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405934:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  405938:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40593c:	d002      	beq.n	405944 <__adddf3+0x70>
  40593e:	4240      	negs	r0, r0
  405940:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405944:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  405948:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40594c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  405950:	d002      	beq.n	405958 <__adddf3+0x84>
  405952:	4252      	negs	r2, r2
  405954:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  405958:	ea94 0f05 	teq	r4, r5
  40595c:	f000 80a7 	beq.w	405aae <__adddf3+0x1da>
  405960:	f1a4 0401 	sub.w	r4, r4, #1
  405964:	f1d5 0e20 	rsbs	lr, r5, #32
  405968:	db0d      	blt.n	405986 <__adddf3+0xb2>
  40596a:	fa02 fc0e 	lsl.w	ip, r2, lr
  40596e:	fa22 f205 	lsr.w	r2, r2, r5
  405972:	1880      	adds	r0, r0, r2
  405974:	f141 0100 	adc.w	r1, r1, #0
  405978:	fa03 f20e 	lsl.w	r2, r3, lr
  40597c:	1880      	adds	r0, r0, r2
  40597e:	fa43 f305 	asr.w	r3, r3, r5
  405982:	4159      	adcs	r1, r3
  405984:	e00e      	b.n	4059a4 <__adddf3+0xd0>
  405986:	f1a5 0520 	sub.w	r5, r5, #32
  40598a:	f10e 0e20 	add.w	lr, lr, #32
  40598e:	2a01      	cmp	r2, #1
  405990:	fa03 fc0e 	lsl.w	ip, r3, lr
  405994:	bf28      	it	cs
  405996:	f04c 0c02 	orrcs.w	ip, ip, #2
  40599a:	fa43 f305 	asr.w	r3, r3, r5
  40599e:	18c0      	adds	r0, r0, r3
  4059a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4059a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4059a8:	d507      	bpl.n	4059ba <__adddf3+0xe6>
  4059aa:	f04f 0e00 	mov.w	lr, #0
  4059ae:	f1dc 0c00 	rsbs	ip, ip, #0
  4059b2:	eb7e 0000 	sbcs.w	r0, lr, r0
  4059b6:	eb6e 0101 	sbc.w	r1, lr, r1
  4059ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4059be:	d31b      	bcc.n	4059f8 <__adddf3+0x124>
  4059c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4059c4:	d30c      	bcc.n	4059e0 <__adddf3+0x10c>
  4059c6:	0849      	lsrs	r1, r1, #1
  4059c8:	ea5f 0030 	movs.w	r0, r0, rrx
  4059cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4059d0:	f104 0401 	add.w	r4, r4, #1
  4059d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4059d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4059dc:	f080 809a 	bcs.w	405b14 <__adddf3+0x240>
  4059e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4059e4:	bf08      	it	eq
  4059e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4059ea:	f150 0000 	adcs.w	r0, r0, #0
  4059ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4059f2:	ea41 0105 	orr.w	r1, r1, r5
  4059f6:	bd30      	pop	{r4, r5, pc}
  4059f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4059fc:	4140      	adcs	r0, r0
  4059fe:	eb41 0101 	adc.w	r1, r1, r1
  405a02:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405a06:	f1a4 0401 	sub.w	r4, r4, #1
  405a0a:	d1e9      	bne.n	4059e0 <__adddf3+0x10c>
  405a0c:	f091 0f00 	teq	r1, #0
  405a10:	bf04      	itt	eq
  405a12:	4601      	moveq	r1, r0
  405a14:	2000      	moveq	r0, #0
  405a16:	fab1 f381 	clz	r3, r1
  405a1a:	bf08      	it	eq
  405a1c:	3320      	addeq	r3, #32
  405a1e:	f1a3 030b 	sub.w	r3, r3, #11
  405a22:	f1b3 0220 	subs.w	r2, r3, #32
  405a26:	da0c      	bge.n	405a42 <__adddf3+0x16e>
  405a28:	320c      	adds	r2, #12
  405a2a:	dd08      	ble.n	405a3e <__adddf3+0x16a>
  405a2c:	f102 0c14 	add.w	ip, r2, #20
  405a30:	f1c2 020c 	rsb	r2, r2, #12
  405a34:	fa01 f00c 	lsl.w	r0, r1, ip
  405a38:	fa21 f102 	lsr.w	r1, r1, r2
  405a3c:	e00c      	b.n	405a58 <__adddf3+0x184>
  405a3e:	f102 0214 	add.w	r2, r2, #20
  405a42:	bfd8      	it	le
  405a44:	f1c2 0c20 	rsble	ip, r2, #32
  405a48:	fa01 f102 	lsl.w	r1, r1, r2
  405a4c:	fa20 fc0c 	lsr.w	ip, r0, ip
  405a50:	bfdc      	itt	le
  405a52:	ea41 010c 	orrle.w	r1, r1, ip
  405a56:	4090      	lslle	r0, r2
  405a58:	1ae4      	subs	r4, r4, r3
  405a5a:	bfa2      	ittt	ge
  405a5c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  405a60:	4329      	orrge	r1, r5
  405a62:	bd30      	popge	{r4, r5, pc}
  405a64:	ea6f 0404 	mvn.w	r4, r4
  405a68:	3c1f      	subs	r4, #31
  405a6a:	da1c      	bge.n	405aa6 <__adddf3+0x1d2>
  405a6c:	340c      	adds	r4, #12
  405a6e:	dc0e      	bgt.n	405a8e <__adddf3+0x1ba>
  405a70:	f104 0414 	add.w	r4, r4, #20
  405a74:	f1c4 0220 	rsb	r2, r4, #32
  405a78:	fa20 f004 	lsr.w	r0, r0, r4
  405a7c:	fa01 f302 	lsl.w	r3, r1, r2
  405a80:	ea40 0003 	orr.w	r0, r0, r3
  405a84:	fa21 f304 	lsr.w	r3, r1, r4
  405a88:	ea45 0103 	orr.w	r1, r5, r3
  405a8c:	bd30      	pop	{r4, r5, pc}
  405a8e:	f1c4 040c 	rsb	r4, r4, #12
  405a92:	f1c4 0220 	rsb	r2, r4, #32
  405a96:	fa20 f002 	lsr.w	r0, r0, r2
  405a9a:	fa01 f304 	lsl.w	r3, r1, r4
  405a9e:	ea40 0003 	orr.w	r0, r0, r3
  405aa2:	4629      	mov	r1, r5
  405aa4:	bd30      	pop	{r4, r5, pc}
  405aa6:	fa21 f004 	lsr.w	r0, r1, r4
  405aaa:	4629      	mov	r1, r5
  405aac:	bd30      	pop	{r4, r5, pc}
  405aae:	f094 0f00 	teq	r4, #0
  405ab2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  405ab6:	bf06      	itte	eq
  405ab8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  405abc:	3401      	addeq	r4, #1
  405abe:	3d01      	subne	r5, #1
  405ac0:	e74e      	b.n	405960 <__adddf3+0x8c>
  405ac2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405ac6:	bf18      	it	ne
  405ac8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405acc:	d029      	beq.n	405b22 <__adddf3+0x24e>
  405ace:	ea94 0f05 	teq	r4, r5
  405ad2:	bf08      	it	eq
  405ad4:	ea90 0f02 	teqeq	r0, r2
  405ad8:	d005      	beq.n	405ae6 <__adddf3+0x212>
  405ada:	ea54 0c00 	orrs.w	ip, r4, r0
  405ade:	bf04      	itt	eq
  405ae0:	4619      	moveq	r1, r3
  405ae2:	4610      	moveq	r0, r2
  405ae4:	bd30      	pop	{r4, r5, pc}
  405ae6:	ea91 0f03 	teq	r1, r3
  405aea:	bf1e      	ittt	ne
  405aec:	2100      	movne	r1, #0
  405aee:	2000      	movne	r0, #0
  405af0:	bd30      	popne	{r4, r5, pc}
  405af2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  405af6:	d105      	bne.n	405b04 <__adddf3+0x230>
  405af8:	0040      	lsls	r0, r0, #1
  405afa:	4149      	adcs	r1, r1
  405afc:	bf28      	it	cs
  405afe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  405b02:	bd30      	pop	{r4, r5, pc}
  405b04:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  405b08:	bf3c      	itt	cc
  405b0a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  405b0e:	bd30      	popcc	{r4, r5, pc}
  405b10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405b14:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  405b18:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405b1c:	f04f 0000 	mov.w	r0, #0
  405b20:	bd30      	pop	{r4, r5, pc}
  405b22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405b26:	bf1a      	itte	ne
  405b28:	4619      	movne	r1, r3
  405b2a:	4610      	movne	r0, r2
  405b2c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  405b30:	bf1c      	itt	ne
  405b32:	460b      	movne	r3, r1
  405b34:	4602      	movne	r2, r0
  405b36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  405b3a:	bf06      	itte	eq
  405b3c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  405b40:	ea91 0f03 	teqeq	r1, r3
  405b44:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  405b48:	bd30      	pop	{r4, r5, pc}
  405b4a:	bf00      	nop

00405b4c <__aeabi_ui2d>:
  405b4c:	f090 0f00 	teq	r0, #0
  405b50:	bf04      	itt	eq
  405b52:	2100      	moveq	r1, #0
  405b54:	4770      	bxeq	lr
  405b56:	b530      	push	{r4, r5, lr}
  405b58:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405b5c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405b60:	f04f 0500 	mov.w	r5, #0
  405b64:	f04f 0100 	mov.w	r1, #0
  405b68:	e750      	b.n	405a0c <__adddf3+0x138>
  405b6a:	bf00      	nop

00405b6c <__aeabi_i2d>:
  405b6c:	f090 0f00 	teq	r0, #0
  405b70:	bf04      	itt	eq
  405b72:	2100      	moveq	r1, #0
  405b74:	4770      	bxeq	lr
  405b76:	b530      	push	{r4, r5, lr}
  405b78:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405b7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405b80:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  405b84:	bf48      	it	mi
  405b86:	4240      	negmi	r0, r0
  405b88:	f04f 0100 	mov.w	r1, #0
  405b8c:	e73e      	b.n	405a0c <__adddf3+0x138>
  405b8e:	bf00      	nop

00405b90 <__aeabi_f2d>:
  405b90:	0042      	lsls	r2, r0, #1
  405b92:	ea4f 01e2 	mov.w	r1, r2, asr #3
  405b96:	ea4f 0131 	mov.w	r1, r1, rrx
  405b9a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  405b9e:	bf1f      	itttt	ne
  405ba0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  405ba4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405ba8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  405bac:	4770      	bxne	lr
  405bae:	f092 0f00 	teq	r2, #0
  405bb2:	bf14      	ite	ne
  405bb4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405bb8:	4770      	bxeq	lr
  405bba:	b530      	push	{r4, r5, lr}
  405bbc:	f44f 7460 	mov.w	r4, #896	; 0x380
  405bc0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405bc4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405bc8:	e720      	b.n	405a0c <__adddf3+0x138>
  405bca:	bf00      	nop

00405bcc <__aeabi_ul2d>:
  405bcc:	ea50 0201 	orrs.w	r2, r0, r1
  405bd0:	bf08      	it	eq
  405bd2:	4770      	bxeq	lr
  405bd4:	b530      	push	{r4, r5, lr}
  405bd6:	f04f 0500 	mov.w	r5, #0
  405bda:	e00a      	b.n	405bf2 <__aeabi_l2d+0x16>

00405bdc <__aeabi_l2d>:
  405bdc:	ea50 0201 	orrs.w	r2, r0, r1
  405be0:	bf08      	it	eq
  405be2:	4770      	bxeq	lr
  405be4:	b530      	push	{r4, r5, lr}
  405be6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  405bea:	d502      	bpl.n	405bf2 <__aeabi_l2d+0x16>
  405bec:	4240      	negs	r0, r0
  405bee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405bf2:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405bf6:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405bfa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  405bfe:	f43f aedc 	beq.w	4059ba <__adddf3+0xe6>
  405c02:	f04f 0203 	mov.w	r2, #3
  405c06:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  405c0a:	bf18      	it	ne
  405c0c:	3203      	addne	r2, #3
  405c0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  405c12:	bf18      	it	ne
  405c14:	3203      	addne	r2, #3
  405c16:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  405c1a:	f1c2 0320 	rsb	r3, r2, #32
  405c1e:	fa00 fc03 	lsl.w	ip, r0, r3
  405c22:	fa20 f002 	lsr.w	r0, r0, r2
  405c26:	fa01 fe03 	lsl.w	lr, r1, r3
  405c2a:	ea40 000e 	orr.w	r0, r0, lr
  405c2e:	fa21 f102 	lsr.w	r1, r1, r2
  405c32:	4414      	add	r4, r2
  405c34:	e6c1      	b.n	4059ba <__adddf3+0xe6>
  405c36:	bf00      	nop

00405c38 <__aeabi_dmul>:
  405c38:	b570      	push	{r4, r5, r6, lr}
  405c3a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405c3e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  405c42:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  405c46:	bf1d      	ittte	ne
  405c48:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405c4c:	ea94 0f0c 	teqne	r4, ip
  405c50:	ea95 0f0c 	teqne	r5, ip
  405c54:	f000 f8de 	bleq	405e14 <__aeabi_dmul+0x1dc>
  405c58:	442c      	add	r4, r5
  405c5a:	ea81 0603 	eor.w	r6, r1, r3
  405c5e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  405c62:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  405c66:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  405c6a:	bf18      	it	ne
  405c6c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  405c70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405c74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  405c78:	d038      	beq.n	405cec <__aeabi_dmul+0xb4>
  405c7a:	fba0 ce02 	umull	ip, lr, r0, r2
  405c7e:	f04f 0500 	mov.w	r5, #0
  405c82:	fbe1 e502 	umlal	lr, r5, r1, r2
  405c86:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  405c8a:	fbe0 e503 	umlal	lr, r5, r0, r3
  405c8e:	f04f 0600 	mov.w	r6, #0
  405c92:	fbe1 5603 	umlal	r5, r6, r1, r3
  405c96:	f09c 0f00 	teq	ip, #0
  405c9a:	bf18      	it	ne
  405c9c:	f04e 0e01 	orrne.w	lr, lr, #1
  405ca0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  405ca4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  405ca8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  405cac:	d204      	bcs.n	405cb8 <__aeabi_dmul+0x80>
  405cae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  405cb2:	416d      	adcs	r5, r5
  405cb4:	eb46 0606 	adc.w	r6, r6, r6
  405cb8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  405cbc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  405cc0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  405cc4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  405cc8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  405ccc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405cd0:	bf88      	it	hi
  405cd2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  405cd6:	d81e      	bhi.n	405d16 <__aeabi_dmul+0xde>
  405cd8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  405cdc:	bf08      	it	eq
  405cde:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  405ce2:	f150 0000 	adcs.w	r0, r0, #0
  405ce6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405cea:	bd70      	pop	{r4, r5, r6, pc}
  405cec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  405cf0:	ea46 0101 	orr.w	r1, r6, r1
  405cf4:	ea40 0002 	orr.w	r0, r0, r2
  405cf8:	ea81 0103 	eor.w	r1, r1, r3
  405cfc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  405d00:	bfc2      	ittt	gt
  405d02:	ebd4 050c 	rsbsgt	r5, r4, ip
  405d06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  405d0a:	bd70      	popgt	{r4, r5, r6, pc}
  405d0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405d10:	f04f 0e00 	mov.w	lr, #0
  405d14:	3c01      	subs	r4, #1
  405d16:	f300 80ab 	bgt.w	405e70 <__aeabi_dmul+0x238>
  405d1a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  405d1e:	bfde      	ittt	le
  405d20:	2000      	movle	r0, #0
  405d22:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  405d26:	bd70      	pople	{r4, r5, r6, pc}
  405d28:	f1c4 0400 	rsb	r4, r4, #0
  405d2c:	3c20      	subs	r4, #32
  405d2e:	da35      	bge.n	405d9c <__aeabi_dmul+0x164>
  405d30:	340c      	adds	r4, #12
  405d32:	dc1b      	bgt.n	405d6c <__aeabi_dmul+0x134>
  405d34:	f104 0414 	add.w	r4, r4, #20
  405d38:	f1c4 0520 	rsb	r5, r4, #32
  405d3c:	fa00 f305 	lsl.w	r3, r0, r5
  405d40:	fa20 f004 	lsr.w	r0, r0, r4
  405d44:	fa01 f205 	lsl.w	r2, r1, r5
  405d48:	ea40 0002 	orr.w	r0, r0, r2
  405d4c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  405d50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405d54:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405d58:	fa21 f604 	lsr.w	r6, r1, r4
  405d5c:	eb42 0106 	adc.w	r1, r2, r6
  405d60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405d64:	bf08      	it	eq
  405d66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405d6a:	bd70      	pop	{r4, r5, r6, pc}
  405d6c:	f1c4 040c 	rsb	r4, r4, #12
  405d70:	f1c4 0520 	rsb	r5, r4, #32
  405d74:	fa00 f304 	lsl.w	r3, r0, r4
  405d78:	fa20 f005 	lsr.w	r0, r0, r5
  405d7c:	fa01 f204 	lsl.w	r2, r1, r4
  405d80:	ea40 0002 	orr.w	r0, r0, r2
  405d84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405d88:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405d8c:	f141 0100 	adc.w	r1, r1, #0
  405d90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405d94:	bf08      	it	eq
  405d96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405d9a:	bd70      	pop	{r4, r5, r6, pc}
  405d9c:	f1c4 0520 	rsb	r5, r4, #32
  405da0:	fa00 f205 	lsl.w	r2, r0, r5
  405da4:	ea4e 0e02 	orr.w	lr, lr, r2
  405da8:	fa20 f304 	lsr.w	r3, r0, r4
  405dac:	fa01 f205 	lsl.w	r2, r1, r5
  405db0:	ea43 0302 	orr.w	r3, r3, r2
  405db4:	fa21 f004 	lsr.w	r0, r1, r4
  405db8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405dbc:	fa21 f204 	lsr.w	r2, r1, r4
  405dc0:	ea20 0002 	bic.w	r0, r0, r2
  405dc4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  405dc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405dcc:	bf08      	it	eq
  405dce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405dd2:	bd70      	pop	{r4, r5, r6, pc}
  405dd4:	f094 0f00 	teq	r4, #0
  405dd8:	d10f      	bne.n	405dfa <__aeabi_dmul+0x1c2>
  405dda:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  405dde:	0040      	lsls	r0, r0, #1
  405de0:	eb41 0101 	adc.w	r1, r1, r1
  405de4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405de8:	bf08      	it	eq
  405dea:	3c01      	subeq	r4, #1
  405dec:	d0f7      	beq.n	405dde <__aeabi_dmul+0x1a6>
  405dee:	ea41 0106 	orr.w	r1, r1, r6
  405df2:	f095 0f00 	teq	r5, #0
  405df6:	bf18      	it	ne
  405df8:	4770      	bxne	lr
  405dfa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  405dfe:	0052      	lsls	r2, r2, #1
  405e00:	eb43 0303 	adc.w	r3, r3, r3
  405e04:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  405e08:	bf08      	it	eq
  405e0a:	3d01      	subeq	r5, #1
  405e0c:	d0f7      	beq.n	405dfe <__aeabi_dmul+0x1c6>
  405e0e:	ea43 0306 	orr.w	r3, r3, r6
  405e12:	4770      	bx	lr
  405e14:	ea94 0f0c 	teq	r4, ip
  405e18:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405e1c:	bf18      	it	ne
  405e1e:	ea95 0f0c 	teqne	r5, ip
  405e22:	d00c      	beq.n	405e3e <__aeabi_dmul+0x206>
  405e24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405e28:	bf18      	it	ne
  405e2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405e2e:	d1d1      	bne.n	405dd4 <__aeabi_dmul+0x19c>
  405e30:	ea81 0103 	eor.w	r1, r1, r3
  405e34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405e38:	f04f 0000 	mov.w	r0, #0
  405e3c:	bd70      	pop	{r4, r5, r6, pc}
  405e3e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405e42:	bf06      	itte	eq
  405e44:	4610      	moveq	r0, r2
  405e46:	4619      	moveq	r1, r3
  405e48:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405e4c:	d019      	beq.n	405e82 <__aeabi_dmul+0x24a>
  405e4e:	ea94 0f0c 	teq	r4, ip
  405e52:	d102      	bne.n	405e5a <__aeabi_dmul+0x222>
  405e54:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  405e58:	d113      	bne.n	405e82 <__aeabi_dmul+0x24a>
  405e5a:	ea95 0f0c 	teq	r5, ip
  405e5e:	d105      	bne.n	405e6c <__aeabi_dmul+0x234>
  405e60:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  405e64:	bf1c      	itt	ne
  405e66:	4610      	movne	r0, r2
  405e68:	4619      	movne	r1, r3
  405e6a:	d10a      	bne.n	405e82 <__aeabi_dmul+0x24a>
  405e6c:	ea81 0103 	eor.w	r1, r1, r3
  405e70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405e74:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405e78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405e7c:	f04f 0000 	mov.w	r0, #0
  405e80:	bd70      	pop	{r4, r5, r6, pc}
  405e82:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405e86:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  405e8a:	bd70      	pop	{r4, r5, r6, pc}

00405e8c <__aeabi_ddiv>:
  405e8c:	b570      	push	{r4, r5, r6, lr}
  405e8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405e92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  405e96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  405e9a:	bf1d      	ittte	ne
  405e9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405ea0:	ea94 0f0c 	teqne	r4, ip
  405ea4:	ea95 0f0c 	teqne	r5, ip
  405ea8:	f000 f8a7 	bleq	405ffa <__aeabi_ddiv+0x16e>
  405eac:	eba4 0405 	sub.w	r4, r4, r5
  405eb0:	ea81 0e03 	eor.w	lr, r1, r3
  405eb4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  405eb8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405ebc:	f000 8088 	beq.w	405fd0 <__aeabi_ddiv+0x144>
  405ec0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405ec4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  405ec8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  405ecc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  405ed0:	ea4f 2202 	mov.w	r2, r2, lsl #8
  405ed4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  405ed8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  405edc:	ea4f 2600 	mov.w	r6, r0, lsl #8
  405ee0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  405ee4:	429d      	cmp	r5, r3
  405ee6:	bf08      	it	eq
  405ee8:	4296      	cmpeq	r6, r2
  405eea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  405eee:	f504 7440 	add.w	r4, r4, #768	; 0x300
  405ef2:	d202      	bcs.n	405efa <__aeabi_ddiv+0x6e>
  405ef4:	085b      	lsrs	r3, r3, #1
  405ef6:	ea4f 0232 	mov.w	r2, r2, rrx
  405efa:	1ab6      	subs	r6, r6, r2
  405efc:	eb65 0503 	sbc.w	r5, r5, r3
  405f00:	085b      	lsrs	r3, r3, #1
  405f02:	ea4f 0232 	mov.w	r2, r2, rrx
  405f06:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  405f0a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  405f0e:	ebb6 0e02 	subs.w	lr, r6, r2
  405f12:	eb75 0e03 	sbcs.w	lr, r5, r3
  405f16:	bf22      	ittt	cs
  405f18:	1ab6      	subcs	r6, r6, r2
  405f1a:	4675      	movcs	r5, lr
  405f1c:	ea40 000c 	orrcs.w	r0, r0, ip
  405f20:	085b      	lsrs	r3, r3, #1
  405f22:	ea4f 0232 	mov.w	r2, r2, rrx
  405f26:	ebb6 0e02 	subs.w	lr, r6, r2
  405f2a:	eb75 0e03 	sbcs.w	lr, r5, r3
  405f2e:	bf22      	ittt	cs
  405f30:	1ab6      	subcs	r6, r6, r2
  405f32:	4675      	movcs	r5, lr
  405f34:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  405f38:	085b      	lsrs	r3, r3, #1
  405f3a:	ea4f 0232 	mov.w	r2, r2, rrx
  405f3e:	ebb6 0e02 	subs.w	lr, r6, r2
  405f42:	eb75 0e03 	sbcs.w	lr, r5, r3
  405f46:	bf22      	ittt	cs
  405f48:	1ab6      	subcs	r6, r6, r2
  405f4a:	4675      	movcs	r5, lr
  405f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  405f50:	085b      	lsrs	r3, r3, #1
  405f52:	ea4f 0232 	mov.w	r2, r2, rrx
  405f56:	ebb6 0e02 	subs.w	lr, r6, r2
  405f5a:	eb75 0e03 	sbcs.w	lr, r5, r3
  405f5e:	bf22      	ittt	cs
  405f60:	1ab6      	subcs	r6, r6, r2
  405f62:	4675      	movcs	r5, lr
  405f64:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  405f68:	ea55 0e06 	orrs.w	lr, r5, r6
  405f6c:	d018      	beq.n	405fa0 <__aeabi_ddiv+0x114>
  405f6e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  405f72:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  405f76:	ea4f 1606 	mov.w	r6, r6, lsl #4
  405f7a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  405f7e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  405f82:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  405f86:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  405f8a:	d1c0      	bne.n	405f0e <__aeabi_ddiv+0x82>
  405f8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405f90:	d10b      	bne.n	405faa <__aeabi_ddiv+0x11e>
  405f92:	ea41 0100 	orr.w	r1, r1, r0
  405f96:	f04f 0000 	mov.w	r0, #0
  405f9a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  405f9e:	e7b6      	b.n	405f0e <__aeabi_ddiv+0x82>
  405fa0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405fa4:	bf04      	itt	eq
  405fa6:	4301      	orreq	r1, r0
  405fa8:	2000      	moveq	r0, #0
  405faa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405fae:	bf88      	it	hi
  405fb0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  405fb4:	f63f aeaf 	bhi.w	405d16 <__aeabi_dmul+0xde>
  405fb8:	ebb5 0c03 	subs.w	ip, r5, r3
  405fbc:	bf04      	itt	eq
  405fbe:	ebb6 0c02 	subseq.w	ip, r6, r2
  405fc2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  405fc6:	f150 0000 	adcs.w	r0, r0, #0
  405fca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405fce:	bd70      	pop	{r4, r5, r6, pc}
  405fd0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  405fd4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  405fd8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  405fdc:	bfc2      	ittt	gt
  405fde:	ebd4 050c 	rsbsgt	r5, r4, ip
  405fe2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  405fe6:	bd70      	popgt	{r4, r5, r6, pc}
  405fe8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405fec:	f04f 0e00 	mov.w	lr, #0
  405ff0:	3c01      	subs	r4, #1
  405ff2:	e690      	b.n	405d16 <__aeabi_dmul+0xde>
  405ff4:	ea45 0e06 	orr.w	lr, r5, r6
  405ff8:	e68d      	b.n	405d16 <__aeabi_dmul+0xde>
  405ffa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405ffe:	ea94 0f0c 	teq	r4, ip
  406002:	bf08      	it	eq
  406004:	ea95 0f0c 	teqeq	r5, ip
  406008:	f43f af3b 	beq.w	405e82 <__aeabi_dmul+0x24a>
  40600c:	ea94 0f0c 	teq	r4, ip
  406010:	d10a      	bne.n	406028 <__aeabi_ddiv+0x19c>
  406012:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  406016:	f47f af34 	bne.w	405e82 <__aeabi_dmul+0x24a>
  40601a:	ea95 0f0c 	teq	r5, ip
  40601e:	f47f af25 	bne.w	405e6c <__aeabi_dmul+0x234>
  406022:	4610      	mov	r0, r2
  406024:	4619      	mov	r1, r3
  406026:	e72c      	b.n	405e82 <__aeabi_dmul+0x24a>
  406028:	ea95 0f0c 	teq	r5, ip
  40602c:	d106      	bne.n	40603c <__aeabi_ddiv+0x1b0>
  40602e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  406032:	f43f aefd 	beq.w	405e30 <__aeabi_dmul+0x1f8>
  406036:	4610      	mov	r0, r2
  406038:	4619      	mov	r1, r3
  40603a:	e722      	b.n	405e82 <__aeabi_dmul+0x24a>
  40603c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  406040:	bf18      	it	ne
  406042:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  406046:	f47f aec5 	bne.w	405dd4 <__aeabi_dmul+0x19c>
  40604a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40604e:	f47f af0d 	bne.w	405e6c <__aeabi_dmul+0x234>
  406052:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  406056:	f47f aeeb 	bne.w	405e30 <__aeabi_dmul+0x1f8>
  40605a:	e712      	b.n	405e82 <__aeabi_dmul+0x24a>

0040605c <__gedf2>:
  40605c:	f04f 3cff 	mov.w	ip, #4294967295
  406060:	e006      	b.n	406070 <__cmpdf2+0x4>
  406062:	bf00      	nop

00406064 <__ledf2>:
  406064:	f04f 0c01 	mov.w	ip, #1
  406068:	e002      	b.n	406070 <__cmpdf2+0x4>
  40606a:	bf00      	nop

0040606c <__cmpdf2>:
  40606c:	f04f 0c01 	mov.w	ip, #1
  406070:	f84d cd04 	str.w	ip, [sp, #-4]!
  406074:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406078:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40607c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406080:	bf18      	it	ne
  406082:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  406086:	d01b      	beq.n	4060c0 <__cmpdf2+0x54>
  406088:	b001      	add	sp, #4
  40608a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40608e:	bf0c      	ite	eq
  406090:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  406094:	ea91 0f03 	teqne	r1, r3
  406098:	bf02      	ittt	eq
  40609a:	ea90 0f02 	teqeq	r0, r2
  40609e:	2000      	moveq	r0, #0
  4060a0:	4770      	bxeq	lr
  4060a2:	f110 0f00 	cmn.w	r0, #0
  4060a6:	ea91 0f03 	teq	r1, r3
  4060aa:	bf58      	it	pl
  4060ac:	4299      	cmppl	r1, r3
  4060ae:	bf08      	it	eq
  4060b0:	4290      	cmpeq	r0, r2
  4060b2:	bf2c      	ite	cs
  4060b4:	17d8      	asrcs	r0, r3, #31
  4060b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4060ba:	f040 0001 	orr.w	r0, r0, #1
  4060be:	4770      	bx	lr
  4060c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4060c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4060c8:	d102      	bne.n	4060d0 <__cmpdf2+0x64>
  4060ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4060ce:	d107      	bne.n	4060e0 <__cmpdf2+0x74>
  4060d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4060d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4060d8:	d1d6      	bne.n	406088 <__cmpdf2+0x1c>
  4060da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4060de:	d0d3      	beq.n	406088 <__cmpdf2+0x1c>
  4060e0:	f85d 0b04 	ldr.w	r0, [sp], #4
  4060e4:	4770      	bx	lr
  4060e6:	bf00      	nop

004060e8 <__aeabi_cdrcmple>:
  4060e8:	4684      	mov	ip, r0
  4060ea:	4610      	mov	r0, r2
  4060ec:	4662      	mov	r2, ip
  4060ee:	468c      	mov	ip, r1
  4060f0:	4619      	mov	r1, r3
  4060f2:	4663      	mov	r3, ip
  4060f4:	e000      	b.n	4060f8 <__aeabi_cdcmpeq>
  4060f6:	bf00      	nop

004060f8 <__aeabi_cdcmpeq>:
  4060f8:	b501      	push	{r0, lr}
  4060fa:	f7ff ffb7 	bl	40606c <__cmpdf2>
  4060fe:	2800      	cmp	r0, #0
  406100:	bf48      	it	mi
  406102:	f110 0f00 	cmnmi.w	r0, #0
  406106:	bd01      	pop	{r0, pc}

00406108 <__aeabi_dcmpeq>:
  406108:	f84d ed08 	str.w	lr, [sp, #-8]!
  40610c:	f7ff fff4 	bl	4060f8 <__aeabi_cdcmpeq>
  406110:	bf0c      	ite	eq
  406112:	2001      	moveq	r0, #1
  406114:	2000      	movne	r0, #0
  406116:	f85d fb08 	ldr.w	pc, [sp], #8
  40611a:	bf00      	nop

0040611c <__aeabi_dcmplt>:
  40611c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406120:	f7ff ffea 	bl	4060f8 <__aeabi_cdcmpeq>
  406124:	bf34      	ite	cc
  406126:	2001      	movcc	r0, #1
  406128:	2000      	movcs	r0, #0
  40612a:	f85d fb08 	ldr.w	pc, [sp], #8
  40612e:	bf00      	nop

00406130 <__aeabi_dcmple>:
  406130:	f84d ed08 	str.w	lr, [sp, #-8]!
  406134:	f7ff ffe0 	bl	4060f8 <__aeabi_cdcmpeq>
  406138:	bf94      	ite	ls
  40613a:	2001      	movls	r0, #1
  40613c:	2000      	movhi	r0, #0
  40613e:	f85d fb08 	ldr.w	pc, [sp], #8
  406142:	bf00      	nop

00406144 <__aeabi_dcmpge>:
  406144:	f84d ed08 	str.w	lr, [sp, #-8]!
  406148:	f7ff ffce 	bl	4060e8 <__aeabi_cdrcmple>
  40614c:	bf94      	ite	ls
  40614e:	2001      	movls	r0, #1
  406150:	2000      	movhi	r0, #0
  406152:	f85d fb08 	ldr.w	pc, [sp], #8
  406156:	bf00      	nop

00406158 <__aeabi_dcmpgt>:
  406158:	f84d ed08 	str.w	lr, [sp, #-8]!
  40615c:	f7ff ffc4 	bl	4060e8 <__aeabi_cdrcmple>
  406160:	bf34      	ite	cc
  406162:	2001      	movcc	r0, #1
  406164:	2000      	movcs	r0, #0
  406166:	f85d fb08 	ldr.w	pc, [sp], #8
  40616a:	bf00      	nop

0040616c <__aeabi_d2uiz>:
  40616c:	004a      	lsls	r2, r1, #1
  40616e:	d211      	bcs.n	406194 <__aeabi_d2uiz+0x28>
  406170:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  406174:	d211      	bcs.n	40619a <__aeabi_d2uiz+0x2e>
  406176:	d50d      	bpl.n	406194 <__aeabi_d2uiz+0x28>
  406178:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40617c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  406180:	d40e      	bmi.n	4061a0 <__aeabi_d2uiz+0x34>
  406182:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  406186:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40618a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40618e:	fa23 f002 	lsr.w	r0, r3, r2
  406192:	4770      	bx	lr
  406194:	f04f 0000 	mov.w	r0, #0
  406198:	4770      	bx	lr
  40619a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40619e:	d102      	bne.n	4061a6 <__aeabi_d2uiz+0x3a>
  4061a0:	f04f 30ff 	mov.w	r0, #4294967295
  4061a4:	4770      	bx	lr
  4061a6:	f04f 0000 	mov.w	r0, #0
  4061aa:	4770      	bx	lr

004061ac <__aeabi_uldivmod>:
  4061ac:	b94b      	cbnz	r3, 4061c2 <__aeabi_uldivmod+0x16>
  4061ae:	b942      	cbnz	r2, 4061c2 <__aeabi_uldivmod+0x16>
  4061b0:	2900      	cmp	r1, #0
  4061b2:	bf08      	it	eq
  4061b4:	2800      	cmpeq	r0, #0
  4061b6:	d002      	beq.n	4061be <__aeabi_uldivmod+0x12>
  4061b8:	f04f 31ff 	mov.w	r1, #4294967295
  4061bc:	4608      	mov	r0, r1
  4061be:	f000 b837 	b.w	406230 <__aeabi_idiv0>
  4061c2:	b082      	sub	sp, #8
  4061c4:	46ec      	mov	ip, sp
  4061c6:	e92d 5000 	stmdb	sp!, {ip, lr}
  4061ca:	f000 f81b 	bl	406204 <__gnu_uldivmod_helper>
  4061ce:	f8dd e004 	ldr.w	lr, [sp, #4]
  4061d2:	b002      	add	sp, #8
  4061d4:	bc0c      	pop	{r2, r3}
  4061d6:	4770      	bx	lr

004061d8 <__gnu_ldivmod_helper>:
  4061d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4061da:	4616      	mov	r6, r2
  4061dc:	4604      	mov	r4, r0
  4061de:	460d      	mov	r5, r1
  4061e0:	461f      	mov	r7, r3
  4061e2:	f000 f827 	bl	406234 <__divdi3>
  4061e6:	fb06 f301 	mul.w	r3, r6, r1
  4061ea:	fb00 3707 	mla	r7, r0, r7, r3
  4061ee:	fba6 2300 	umull	r2, r3, r6, r0
  4061f2:	18fb      	adds	r3, r7, r3
  4061f4:	1aa2      	subs	r2, r4, r2
  4061f6:	eb65 0303 	sbc.w	r3, r5, r3
  4061fa:	9c06      	ldr	r4, [sp, #24]
  4061fc:	e9c4 2300 	strd	r2, r3, [r4]
  406200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406202:	bf00      	nop

00406204 <__gnu_uldivmod_helper>:
  406204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406206:	4616      	mov	r6, r2
  406208:	4604      	mov	r4, r0
  40620a:	460d      	mov	r5, r1
  40620c:	461f      	mov	r7, r3
  40620e:	f000 f96f 	bl	4064f0 <__udivdi3>
  406212:	fb00 f707 	mul.w	r7, r0, r7
  406216:	fba0 2306 	umull	r2, r3, r0, r6
  40621a:	fb06 7701 	mla	r7, r6, r1, r7
  40621e:	18fb      	adds	r3, r7, r3
  406220:	1aa2      	subs	r2, r4, r2
  406222:	eb65 0303 	sbc.w	r3, r5, r3
  406226:	9c06      	ldr	r4, [sp, #24]
  406228:	e9c4 2300 	strd	r2, r3, [r4]
  40622c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40622e:	bf00      	nop

00406230 <__aeabi_idiv0>:
  406230:	4770      	bx	lr
  406232:	bf00      	nop

00406234 <__divdi3>:
  406234:	2900      	cmp	r1, #0
  406236:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40623a:	461d      	mov	r5, r3
  40623c:	f2c0 809d 	blt.w	40637a <__divdi3+0x146>
  406240:	2400      	movs	r4, #0
  406242:	2d00      	cmp	r5, #0
  406244:	f2c0 8094 	blt.w	406370 <__divdi3+0x13c>
  406248:	4680      	mov	r8, r0
  40624a:	460f      	mov	r7, r1
  40624c:	4694      	mov	ip, r2
  40624e:	461e      	mov	r6, r3
  406250:	bbe3      	cbnz	r3, 4062cc <__divdi3+0x98>
  406252:	428a      	cmp	r2, r1
  406254:	d955      	bls.n	406302 <__divdi3+0xce>
  406256:	fab2 f782 	clz	r7, r2
  40625a:	b147      	cbz	r7, 40626e <__divdi3+0x3a>
  40625c:	f1c7 0520 	rsb	r5, r7, #32
  406260:	fa20 f605 	lsr.w	r6, r0, r5
  406264:	fa01 f107 	lsl.w	r1, r1, r7
  406268:	40ba      	lsls	r2, r7
  40626a:	4331      	orrs	r1, r6
  40626c:	40b8      	lsls	r0, r7
  40626e:	0c17      	lsrs	r7, r2, #16
  406270:	fbb1 f6f7 	udiv	r6, r1, r7
  406274:	0c03      	lsrs	r3, r0, #16
  406276:	fa1f fc82 	uxth.w	ip, r2
  40627a:	fb07 1116 	mls	r1, r7, r6, r1
  40627e:	fb0c f506 	mul.w	r5, ip, r6
  406282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  406286:	429d      	cmp	r5, r3
  406288:	d908      	bls.n	40629c <__divdi3+0x68>
  40628a:	1e71      	subs	r1, r6, #1
  40628c:	189b      	adds	r3, r3, r2
  40628e:	f080 8113 	bcs.w	4064b8 <__divdi3+0x284>
  406292:	429d      	cmp	r5, r3
  406294:	f240 8110 	bls.w	4064b8 <__divdi3+0x284>
  406298:	3e02      	subs	r6, #2
  40629a:	189b      	adds	r3, r3, r2
  40629c:	1b59      	subs	r1, r3, r5
  40629e:	fbb1 f5f7 	udiv	r5, r1, r7
  4062a2:	fb07 1315 	mls	r3, r7, r5, r1
  4062a6:	b280      	uxth	r0, r0
  4062a8:	fb0c fc05 	mul.w	ip, ip, r5
  4062ac:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
  4062b0:	458c      	cmp	ip, r1
  4062b2:	d907      	bls.n	4062c4 <__divdi3+0x90>
  4062b4:	1e6b      	subs	r3, r5, #1
  4062b6:	188a      	adds	r2, r1, r2
  4062b8:	f080 8100 	bcs.w	4064bc <__divdi3+0x288>
  4062bc:	4594      	cmp	ip, r2
  4062be:	f240 80fd 	bls.w	4064bc <__divdi3+0x288>
  4062c2:	3d02      	subs	r5, #2
  4062c4:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
  4062c8:	2500      	movs	r5, #0
  4062ca:	e003      	b.n	4062d4 <__divdi3+0xa0>
  4062cc:	428b      	cmp	r3, r1
  4062ce:	d90c      	bls.n	4062ea <__divdi3+0xb6>
  4062d0:	2500      	movs	r5, #0
  4062d2:	4629      	mov	r1, r5
  4062d4:	460a      	mov	r2, r1
  4062d6:	462b      	mov	r3, r5
  4062d8:	b114      	cbz	r4, 4062e0 <__divdi3+0xac>
  4062da:	4252      	negs	r2, r2
  4062dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4062e0:	4610      	mov	r0, r2
  4062e2:	4619      	mov	r1, r3
  4062e4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4062e8:	4770      	bx	lr
  4062ea:	fab3 f583 	clz	r5, r3
  4062ee:	2d00      	cmp	r5, #0
  4062f0:	f040 8087 	bne.w	406402 <__divdi3+0x1ce>
  4062f4:	428b      	cmp	r3, r1
  4062f6:	d301      	bcc.n	4062fc <__divdi3+0xc8>
  4062f8:	4282      	cmp	r2, r0
  4062fa:	d8ea      	bhi.n	4062d2 <__divdi3+0x9e>
  4062fc:	2500      	movs	r5, #0
  4062fe:	2101      	movs	r1, #1
  406300:	e7e8      	b.n	4062d4 <__divdi3+0xa0>
  406302:	b912      	cbnz	r2, 40630a <__divdi3+0xd6>
  406304:	2601      	movs	r6, #1
  406306:	fbb6 f2f2 	udiv	r2, r6, r2
  40630a:	fab2 f682 	clz	r6, r2
  40630e:	2e00      	cmp	r6, #0
  406310:	d139      	bne.n	406386 <__divdi3+0x152>
  406312:	1a8e      	subs	r6, r1, r2
  406314:	0c13      	lsrs	r3, r2, #16
  406316:	fa1f fc82 	uxth.w	ip, r2
  40631a:	2501      	movs	r5, #1
  40631c:	fbb6 f7f3 	udiv	r7, r6, r3
  406320:	fb03 6117 	mls	r1, r3, r7, r6
  406324:	ea4f 4910 	mov.w	r9, r0, lsr #16
  406328:	fb0c f807 	mul.w	r8, ip, r7
  40632c:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
  406330:	45b0      	cmp	r8, r6
  406332:	d906      	bls.n	406342 <__divdi3+0x10e>
  406334:	1e79      	subs	r1, r7, #1
  406336:	18b6      	adds	r6, r6, r2
  406338:	d202      	bcs.n	406340 <__divdi3+0x10c>
  40633a:	45b0      	cmp	r8, r6
  40633c:	f200 80d3 	bhi.w	4064e6 <__divdi3+0x2b2>
  406340:	460f      	mov	r7, r1
  406342:	ebc8 0606 	rsb	r6, r8, r6
  406346:	fbb6 f1f3 	udiv	r1, r6, r3
  40634a:	fb03 6311 	mls	r3, r3, r1, r6
  40634e:	b280      	uxth	r0, r0
  406350:	fb0c fc01 	mul.w	ip, ip, r1
  406354:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
  406358:	459c      	cmp	ip, r3
  40635a:	d906      	bls.n	40636a <__divdi3+0x136>
  40635c:	1e4e      	subs	r6, r1, #1
  40635e:	189a      	adds	r2, r3, r2
  406360:	d202      	bcs.n	406368 <__divdi3+0x134>
  406362:	4594      	cmp	ip, r2
  406364:	f200 80c2 	bhi.w	4064ec <__divdi3+0x2b8>
  406368:	4631      	mov	r1, r6
  40636a:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
  40636e:	e7b1      	b.n	4062d4 <__divdi3+0xa0>
  406370:	43e4      	mvns	r4, r4
  406372:	4252      	negs	r2, r2
  406374:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  406378:	e766      	b.n	406248 <__divdi3+0x14>
  40637a:	4240      	negs	r0, r0
  40637c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  406380:	f04f 34ff 	mov.w	r4, #4294967295
  406384:	e75d      	b.n	406242 <__divdi3+0xe>
  406386:	40b2      	lsls	r2, r6
  406388:	f1c6 0920 	rsb	r9, r6, #32
  40638c:	fa21 f709 	lsr.w	r7, r1, r9
  406390:	fa20 f509 	lsr.w	r5, r0, r9
  406394:	0c13      	lsrs	r3, r2, #16
  406396:	fa01 f106 	lsl.w	r1, r1, r6
  40639a:	fbb7 f8f3 	udiv	r8, r7, r3
  40639e:	ea45 0901 	orr.w	r9, r5, r1
  4063a2:	fa1f fc82 	uxth.w	ip, r2
  4063a6:	fb03 7718 	mls	r7, r3, r8, r7
  4063aa:	ea4f 4119 	mov.w	r1, r9, lsr #16
  4063ae:	fb0c f508 	mul.w	r5, ip, r8
  4063b2:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
  4063b6:	40b0      	lsls	r0, r6
  4063b8:	42bd      	cmp	r5, r7
  4063ba:	d90a      	bls.n	4063d2 <__divdi3+0x19e>
  4063bc:	18bf      	adds	r7, r7, r2
  4063be:	f108 36ff 	add.w	r6, r8, #4294967295
  4063c2:	f080 808e 	bcs.w	4064e2 <__divdi3+0x2ae>
  4063c6:	42bd      	cmp	r5, r7
  4063c8:	f240 808b 	bls.w	4064e2 <__divdi3+0x2ae>
  4063cc:	f1a8 0802 	sub.w	r8, r8, #2
  4063d0:	18bf      	adds	r7, r7, r2
  4063d2:	1b79      	subs	r1, r7, r5
  4063d4:	fbb1 f5f3 	udiv	r5, r1, r3
  4063d8:	fb03 1715 	mls	r7, r3, r5, r1
  4063dc:	fa1f f989 	uxth.w	r9, r9
  4063e0:	fb0c f605 	mul.w	r6, ip, r5
  4063e4:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
  4063e8:	428e      	cmp	r6, r1
  4063ea:	d906      	bls.n	4063fa <__divdi3+0x1c6>
  4063ec:	1e6f      	subs	r7, r5, #1
  4063ee:	1889      	adds	r1, r1, r2
  4063f0:	d271      	bcs.n	4064d6 <__divdi3+0x2a2>
  4063f2:	428e      	cmp	r6, r1
  4063f4:	d96f      	bls.n	4064d6 <__divdi3+0x2a2>
  4063f6:	3d02      	subs	r5, #2
  4063f8:	1889      	adds	r1, r1, r2
  4063fa:	1b8e      	subs	r6, r1, r6
  4063fc:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
  406400:	e78c      	b.n	40631c <__divdi3+0xe8>
  406402:	f1c5 0120 	rsb	r1, r5, #32
  406406:	fa22 f301 	lsr.w	r3, r2, r1
  40640a:	fa06 f605 	lsl.w	r6, r6, r5
  40640e:	431e      	orrs	r6, r3
  406410:	fa27 f201 	lsr.w	r2, r7, r1
  406414:	ea4f 4916 	mov.w	r9, r6, lsr #16
  406418:	fa07 f705 	lsl.w	r7, r7, r5
  40641c:	fa20 f101 	lsr.w	r1, r0, r1
  406420:	fbb2 f8f9 	udiv	r8, r2, r9
  406424:	430f      	orrs	r7, r1
  406426:	0c3b      	lsrs	r3, r7, #16
  406428:	fa1f fa86 	uxth.w	sl, r6
  40642c:	fb09 2218 	mls	r2, r9, r8, r2
  406430:	fb0a fb08 	mul.w	fp, sl, r8
  406434:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  406438:	4593      	cmp	fp, r2
  40643a:	fa0c fc05 	lsl.w	ip, ip, r5
  40643e:	d908      	bls.n	406452 <__divdi3+0x21e>
  406440:	1992      	adds	r2, r2, r6
  406442:	f108 31ff 	add.w	r1, r8, #4294967295
  406446:	d24a      	bcs.n	4064de <__divdi3+0x2aa>
  406448:	4593      	cmp	fp, r2
  40644a:	d948      	bls.n	4064de <__divdi3+0x2aa>
  40644c:	f1a8 0802 	sub.w	r8, r8, #2
  406450:	1992      	adds	r2, r2, r6
  406452:	ebcb 0302 	rsb	r3, fp, r2
  406456:	fbb3 f1f9 	udiv	r1, r3, r9
  40645a:	fb09 3211 	mls	r2, r9, r1, r3
  40645e:	b2bf      	uxth	r7, r7
  406460:	fb0a fa01 	mul.w	sl, sl, r1
  406464:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
  406468:	459a      	cmp	sl, r3
  40646a:	d906      	bls.n	40647a <__divdi3+0x246>
  40646c:	1e4a      	subs	r2, r1, #1
  40646e:	199b      	adds	r3, r3, r6
  406470:	d233      	bcs.n	4064da <__divdi3+0x2a6>
  406472:	459a      	cmp	sl, r3
  406474:	d931      	bls.n	4064da <__divdi3+0x2a6>
  406476:	3902      	subs	r1, #2
  406478:	199b      	adds	r3, r3, r6
  40647a:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
  40647e:	0c0f      	lsrs	r7, r1, #16
  406480:	fa1f f88c 	uxth.w	r8, ip
  406484:	fb08 f607 	mul.w	r6, r8, r7
  406488:	b28a      	uxth	r2, r1
  40648a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  40648e:	fb08 f802 	mul.w	r8, r8, r2
  406492:	fb0c 6202 	mla	r2, ip, r2, r6
  406496:	eb02 4218 	add.w	r2, r2, r8, lsr #16
  40649a:	fb0c fc07 	mul.w	ip, ip, r7
  40649e:	4296      	cmp	r6, r2
  4064a0:	bf88      	it	hi
  4064a2:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
  4064a6:	ebca 0303 	rsb	r3, sl, r3
  4064aa:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
  4064ae:	4563      	cmp	r3, ip
  4064b0:	d30e      	bcc.n	4064d0 <__divdi3+0x29c>
  4064b2:	d005      	beq.n	4064c0 <__divdi3+0x28c>
  4064b4:	2500      	movs	r5, #0
  4064b6:	e70d      	b.n	4062d4 <__divdi3+0xa0>
  4064b8:	460e      	mov	r6, r1
  4064ba:	e6ef      	b.n	40629c <__divdi3+0x68>
  4064bc:	461d      	mov	r5, r3
  4064be:	e701      	b.n	4062c4 <__divdi3+0x90>
  4064c0:	fa1f f888 	uxth.w	r8, r8
  4064c4:	fa00 f005 	lsl.w	r0, r0, r5
  4064c8:	eb08 4502 	add.w	r5, r8, r2, lsl #16
  4064cc:	42a8      	cmp	r0, r5
  4064ce:	d2f1      	bcs.n	4064b4 <__divdi3+0x280>
  4064d0:	3901      	subs	r1, #1
  4064d2:	2500      	movs	r5, #0
  4064d4:	e6fe      	b.n	4062d4 <__divdi3+0xa0>
  4064d6:	463d      	mov	r5, r7
  4064d8:	e78f      	b.n	4063fa <__divdi3+0x1c6>
  4064da:	4611      	mov	r1, r2
  4064dc:	e7cd      	b.n	40647a <__divdi3+0x246>
  4064de:	4688      	mov	r8, r1
  4064e0:	e7b7      	b.n	406452 <__divdi3+0x21e>
  4064e2:	46b0      	mov	r8, r6
  4064e4:	e775      	b.n	4063d2 <__divdi3+0x19e>
  4064e6:	3f02      	subs	r7, #2
  4064e8:	18b6      	adds	r6, r6, r2
  4064ea:	e72a      	b.n	406342 <__divdi3+0x10e>
  4064ec:	3902      	subs	r1, #2
  4064ee:	e73c      	b.n	40636a <__divdi3+0x136>

004064f0 <__udivdi3>:
  4064f0:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  4064f4:	4614      	mov	r4, r2
  4064f6:	4605      	mov	r5, r0
  4064f8:	460e      	mov	r6, r1
  4064fa:	2b00      	cmp	r3, #0
  4064fc:	d13d      	bne.n	40657a <__udivdi3+0x8a>
  4064fe:	428a      	cmp	r2, r1
  406500:	d949      	bls.n	406596 <__udivdi3+0xa6>
  406502:	fab2 f782 	clz	r7, r2
  406506:	b147      	cbz	r7, 40651a <__udivdi3+0x2a>
  406508:	f1c7 0120 	rsb	r1, r7, #32
  40650c:	fa20 f201 	lsr.w	r2, r0, r1
  406510:	fa06 f607 	lsl.w	r6, r6, r7
  406514:	40bc      	lsls	r4, r7
  406516:	4316      	orrs	r6, r2
  406518:	40bd      	lsls	r5, r7
  40651a:	0c22      	lsrs	r2, r4, #16
  40651c:	fbb6 f0f2 	udiv	r0, r6, r2
  406520:	0c2f      	lsrs	r7, r5, #16
  406522:	b2a1      	uxth	r1, r4
  406524:	fb02 6610 	mls	r6, r2, r0, r6
  406528:	fb01 f300 	mul.w	r3, r1, r0
  40652c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  406530:	42b3      	cmp	r3, r6
  406532:	d908      	bls.n	406546 <__udivdi3+0x56>
  406534:	1e47      	subs	r7, r0, #1
  406536:	1936      	adds	r6, r6, r4
  406538:	f080 80f8 	bcs.w	40672c <__udivdi3+0x23c>
  40653c:	42b3      	cmp	r3, r6
  40653e:	f240 80f5 	bls.w	40672c <__udivdi3+0x23c>
  406542:	3802      	subs	r0, #2
  406544:	1936      	adds	r6, r6, r4
  406546:	1af6      	subs	r6, r6, r3
  406548:	fbb6 f3f2 	udiv	r3, r6, r2
  40654c:	fb02 6213 	mls	r2, r2, r3, r6
  406550:	b2ad      	uxth	r5, r5
  406552:	fb01 f103 	mul.w	r1, r1, r3
  406556:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
  40655a:	4291      	cmp	r1, r2
  40655c:	d907      	bls.n	40656e <__udivdi3+0x7e>
  40655e:	1e5e      	subs	r6, r3, #1
  406560:	1912      	adds	r2, r2, r4
  406562:	f080 80e5 	bcs.w	406730 <__udivdi3+0x240>
  406566:	4291      	cmp	r1, r2
  406568:	f240 80e2 	bls.w	406730 <__udivdi3+0x240>
  40656c:	3b02      	subs	r3, #2
  40656e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  406572:	2100      	movs	r1, #0
  406574:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
  406578:	4770      	bx	lr
  40657a:	428b      	cmp	r3, r1
  40657c:	d843      	bhi.n	406606 <__udivdi3+0x116>
  40657e:	fab3 f483 	clz	r4, r3
  406582:	2c00      	cmp	r4, #0
  406584:	d142      	bne.n	40660c <__udivdi3+0x11c>
  406586:	428b      	cmp	r3, r1
  406588:	d302      	bcc.n	406590 <__udivdi3+0xa0>
  40658a:	4282      	cmp	r2, r0
  40658c:	f200 80df 	bhi.w	40674e <__udivdi3+0x25e>
  406590:	2100      	movs	r1, #0
  406592:	2001      	movs	r0, #1
  406594:	e7ee      	b.n	406574 <__udivdi3+0x84>
  406596:	b912      	cbnz	r2, 40659e <__udivdi3+0xae>
  406598:	2701      	movs	r7, #1
  40659a:	fbb7 f4f2 	udiv	r4, r7, r2
  40659e:	fab4 f284 	clz	r2, r4
  4065a2:	2a00      	cmp	r2, #0
  4065a4:	f040 8088 	bne.w	4066b8 <__udivdi3+0x1c8>
  4065a8:	1b0a      	subs	r2, r1, r4
  4065aa:	0c23      	lsrs	r3, r4, #16
  4065ac:	b2a7      	uxth	r7, r4
  4065ae:	2101      	movs	r1, #1
  4065b0:	fbb2 f6f3 	udiv	r6, r2, r3
  4065b4:	fb03 2216 	mls	r2, r3, r6, r2
  4065b8:	ea4f 4c15 	mov.w	ip, r5, lsr #16
  4065bc:	fb07 f006 	mul.w	r0, r7, r6
  4065c0:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
  4065c4:	4290      	cmp	r0, r2
  4065c6:	d907      	bls.n	4065d8 <__udivdi3+0xe8>
  4065c8:	1912      	adds	r2, r2, r4
  4065ca:	f106 3cff 	add.w	ip, r6, #4294967295
  4065ce:	d202      	bcs.n	4065d6 <__udivdi3+0xe6>
  4065d0:	4290      	cmp	r0, r2
  4065d2:	f200 80ce 	bhi.w	406772 <__udivdi3+0x282>
  4065d6:	4666      	mov	r6, ip
  4065d8:	1a12      	subs	r2, r2, r0
  4065da:	fbb2 f0f3 	udiv	r0, r2, r3
  4065de:	fb03 2310 	mls	r3, r3, r0, r2
  4065e2:	b2ad      	uxth	r5, r5
  4065e4:	fb07 f700 	mul.w	r7, r7, r0
  4065e8:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  4065ec:	429f      	cmp	r7, r3
  4065ee:	d907      	bls.n	406600 <__udivdi3+0x110>
  4065f0:	1e42      	subs	r2, r0, #1
  4065f2:	191b      	adds	r3, r3, r4
  4065f4:	f080 809e 	bcs.w	406734 <__udivdi3+0x244>
  4065f8:	429f      	cmp	r7, r3
  4065fa:	f240 809b 	bls.w	406734 <__udivdi3+0x244>
  4065fe:	3802      	subs	r0, #2
  406600:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
  406604:	e7b6      	b.n	406574 <__udivdi3+0x84>
  406606:	2100      	movs	r1, #0
  406608:	4608      	mov	r0, r1
  40660a:	e7b3      	b.n	406574 <__udivdi3+0x84>
  40660c:	f1c4 0620 	rsb	r6, r4, #32
  406610:	fa22 f506 	lsr.w	r5, r2, r6
  406614:	fa03 f304 	lsl.w	r3, r3, r4
  406618:	432b      	orrs	r3, r5
  40661a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40661e:	fa21 f506 	lsr.w	r5, r1, r6
  406622:	fa01 f104 	lsl.w	r1, r1, r4
  406626:	fa20 f606 	lsr.w	r6, r0, r6
  40662a:	fbb5 f7fc 	udiv	r7, r5, ip
  40662e:	ea46 0a01 	orr.w	sl, r6, r1
  406632:	fa1f f883 	uxth.w	r8, r3
  406636:	fb0c 5517 	mls	r5, ip, r7, r5
  40663a:	ea4f 411a 	mov.w	r1, sl, lsr #16
  40663e:	fb08 f907 	mul.w	r9, r8, r7
  406642:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
  406646:	45a9      	cmp	r9, r5
  406648:	fa02 f204 	lsl.w	r2, r2, r4
  40664c:	d903      	bls.n	406656 <__udivdi3+0x166>
  40664e:	1e7e      	subs	r6, r7, #1
  406650:	18ed      	adds	r5, r5, r3
  406652:	d37f      	bcc.n	406754 <__udivdi3+0x264>
  406654:	4637      	mov	r7, r6
  406656:	ebc9 0105 	rsb	r1, r9, r5
  40665a:	fbb1 f6fc 	udiv	r6, r1, ip
  40665e:	fb0c 1516 	mls	r5, ip, r6, r1
  406662:	fa1f fa8a 	uxth.w	sl, sl
  406666:	fb08 f806 	mul.w	r8, r8, r6
  40666a:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
  40666e:	4588      	cmp	r8, r1
  406670:	d903      	bls.n	40667a <__udivdi3+0x18a>
  406672:	1e75      	subs	r5, r6, #1
  406674:	18c9      	adds	r1, r1, r3
  406676:	d373      	bcc.n	406760 <__udivdi3+0x270>
  406678:	462e      	mov	r6, r5
  40667a:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
  40667e:	0c37      	lsrs	r7, r6, #16
  406680:	fa1f fc82 	uxth.w	ip, r2
  406684:	fb0c f507 	mul.w	r5, ip, r7
  406688:	0c12      	lsrs	r2, r2, #16
  40668a:	b2b3      	uxth	r3, r6
  40668c:	fb0c fc03 	mul.w	ip, ip, r3
  406690:	fb02 5303 	mla	r3, r2, r3, r5
  406694:	eb03 431c 	add.w	r3, r3, ip, lsr #16
  406698:	fb02 f207 	mul.w	r2, r2, r7
  40669c:	429d      	cmp	r5, r3
  40669e:	bf88      	it	hi
  4066a0:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
  4066a4:	ebc8 0101 	rsb	r1, r8, r1
  4066a8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
  4066ac:	4291      	cmp	r1, r2
  4066ae:	d34b      	bcc.n	406748 <__udivdi3+0x258>
  4066b0:	d042      	beq.n	406738 <__udivdi3+0x248>
  4066b2:	4630      	mov	r0, r6
  4066b4:	2100      	movs	r1, #0
  4066b6:	e75d      	b.n	406574 <__udivdi3+0x84>
  4066b8:	4094      	lsls	r4, r2
  4066ba:	f1c2 0520 	rsb	r5, r2, #32
  4066be:	fa21 f605 	lsr.w	r6, r1, r5
  4066c2:	0c23      	lsrs	r3, r4, #16
  4066c4:	fa20 f705 	lsr.w	r7, r0, r5
  4066c8:	fa01 f102 	lsl.w	r1, r1, r2
  4066cc:	fbb6 fcf3 	udiv	ip, r6, r3
  4066d0:	4339      	orrs	r1, r7
  4066d2:	0c0d      	lsrs	r5, r1, #16
  4066d4:	b2a7      	uxth	r7, r4
  4066d6:	fb03 661c 	mls	r6, r3, ip, r6
  4066da:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
  4066de:	fb07 f80c 	mul.w	r8, r7, ip
  4066e2:	45b0      	cmp	r8, r6
  4066e4:	fa00 f502 	lsl.w	r5, r0, r2
  4066e8:	d908      	bls.n	4066fc <__udivdi3+0x20c>
  4066ea:	1936      	adds	r6, r6, r4
  4066ec:	f10c 30ff 	add.w	r0, ip, #4294967295
  4066f0:	d23d      	bcs.n	40676e <__udivdi3+0x27e>
  4066f2:	45b0      	cmp	r8, r6
  4066f4:	d93b      	bls.n	40676e <__udivdi3+0x27e>
  4066f6:	f1ac 0c02 	sub.w	ip, ip, #2
  4066fa:	1936      	adds	r6, r6, r4
  4066fc:	ebc8 0206 	rsb	r2, r8, r6
  406700:	fbb2 f0f3 	udiv	r0, r2, r3
  406704:	fb03 2610 	mls	r6, r3, r0, r2
  406708:	b28a      	uxth	r2, r1
  40670a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  40670e:	fb07 f100 	mul.w	r1, r7, r0
  406712:	4291      	cmp	r1, r2
  406714:	d906      	bls.n	406724 <__udivdi3+0x234>
  406716:	1e46      	subs	r6, r0, #1
  406718:	1912      	adds	r2, r2, r4
  40671a:	d226      	bcs.n	40676a <__udivdi3+0x27a>
  40671c:	4291      	cmp	r1, r2
  40671e:	d924      	bls.n	40676a <__udivdi3+0x27a>
  406720:	3802      	subs	r0, #2
  406722:	1912      	adds	r2, r2, r4
  406724:	1a52      	subs	r2, r2, r1
  406726:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
  40672a:	e741      	b.n	4065b0 <__udivdi3+0xc0>
  40672c:	4638      	mov	r0, r7
  40672e:	e70a      	b.n	406546 <__udivdi3+0x56>
  406730:	4633      	mov	r3, r6
  406732:	e71c      	b.n	40656e <__udivdi3+0x7e>
  406734:	4610      	mov	r0, r2
  406736:	e763      	b.n	406600 <__udivdi3+0x110>
  406738:	fa1f fc8c 	uxth.w	ip, ip
  40673c:	fa00 f004 	lsl.w	r0, r0, r4
  406740:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
  406744:	4298      	cmp	r0, r3
  406746:	d2b4      	bcs.n	4066b2 <__udivdi3+0x1c2>
  406748:	1e70      	subs	r0, r6, #1
  40674a:	2100      	movs	r1, #0
  40674c:	e712      	b.n	406574 <__udivdi3+0x84>
  40674e:	4621      	mov	r1, r4
  406750:	4620      	mov	r0, r4
  406752:	e70f      	b.n	406574 <__udivdi3+0x84>
  406754:	45a9      	cmp	r9, r5
  406756:	f67f af7d 	bls.w	406654 <__udivdi3+0x164>
  40675a:	3f02      	subs	r7, #2
  40675c:	18ed      	adds	r5, r5, r3
  40675e:	e77a      	b.n	406656 <__udivdi3+0x166>
  406760:	4588      	cmp	r8, r1
  406762:	d989      	bls.n	406678 <__udivdi3+0x188>
  406764:	3e02      	subs	r6, #2
  406766:	18c9      	adds	r1, r1, r3
  406768:	e787      	b.n	40667a <__udivdi3+0x18a>
  40676a:	4630      	mov	r0, r6
  40676c:	e7da      	b.n	406724 <__udivdi3+0x234>
  40676e:	4684      	mov	ip, r0
  406770:	e7c4      	b.n	4066fc <__udivdi3+0x20c>
  406772:	3e02      	subs	r6, #2
  406774:	1912      	adds	r2, r2, r4
  406776:	e72f      	b.n	4065d8 <__udivdi3+0xe8>

00406778 <__register_exitproc>:
  406778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40677c:	4698      	mov	r8, r3
  40677e:	4b23      	ldr	r3, [pc, #140]	; (40680c <__register_exitproc+0x94>)
  406780:	681c      	ldr	r4, [r3, #0]
  406782:	4606      	mov	r6, r0
  406784:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
  406788:	460f      	mov	r7, r1
  40678a:	4691      	mov	r9, r2
  40678c:	b918      	cbnz	r0, 406796 <__register_exitproc+0x1e>
  40678e:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
  406792:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406796:	6841      	ldr	r1, [r0, #4]
  406798:	291f      	cmp	r1, #31
  40679a:	dd16      	ble.n	4067ca <__register_exitproc+0x52>
  40679c:	481c      	ldr	r0, [pc, #112]	; (406810 <__register_exitproc+0x98>)
  40679e:	b918      	cbnz	r0, 4067a8 <__register_exitproc+0x30>
  4067a0:	f04f 30ff 	mov.w	r0, #4294967295
  4067a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4067a8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4067ac:	f3af 8000 	nop.w
  4067b0:	2800      	cmp	r0, #0
  4067b2:	d0f5      	beq.n	4067a0 <__register_exitproc+0x28>
  4067b4:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4067b8:	2500      	movs	r5, #0
  4067ba:	6045      	str	r5, [r0, #4]
  4067bc:	6002      	str	r2, [r0, #0]
  4067be:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4067c2:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
  4067c6:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
  4067ca:	b1b6      	cbz	r6, 4067fa <__register_exitproc+0x82>
  4067cc:	6844      	ldr	r4, [r0, #4]
  4067ce:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
  4067d2:	2201      	movs	r2, #1
  4067d4:	eb00 0384 	add.w	r3, r0, r4, lsl #2
  4067d8:	fa02 f204 	lsl.w	r2, r2, r4
  4067dc:	4311      	orrs	r1, r2
  4067de:	2e02      	cmp	r6, #2
  4067e0:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
  4067e4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4067e8:	461c      	mov	r4, r3
  4067ea:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
  4067ee:	d104      	bne.n	4067fa <__register_exitproc+0x82>
  4067f0:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
  4067f4:	431a      	orrs	r2, r3
  4067f6:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
  4067fa:	6841      	ldr	r1, [r0, #4]
  4067fc:	1c8b      	adds	r3, r1, #2
  4067fe:	1c4a      	adds	r2, r1, #1
  406800:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
  406804:	6042      	str	r2, [r0, #4]
  406806:	2000      	movs	r0, #0
  406808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40680c:	00408698 	.word	0x00408698
  406810:	00000000 	.word	0x00000000

00406814 <__libc_fini_array>:
  406814:	b570      	push	{r4, r5, r6, lr}
  406816:	4b08      	ldr	r3, [pc, #32]	; (406838 <__libc_fini_array+0x24>)
  406818:	4c08      	ldr	r4, [pc, #32]	; (40683c <__libc_fini_array+0x28>)
  40681a:	1ae0      	subs	r0, r4, r3
  40681c:	1084      	asrs	r4, r0, #2
  40681e:	eb03 0684 	add.w	r6, r3, r4, lsl #2
  406822:	2500      	movs	r5, #0
  406824:	3d04      	subs	r5, #4
  406826:	b11c      	cbz	r4, 406830 <__libc_fini_array+0x1c>
  406828:	5972      	ldr	r2, [r6, r5]
  40682a:	4790      	blx	r2
  40682c:	3c01      	subs	r4, #1
  40682e:	e7f9      	b.n	406824 <__libc_fini_array+0x10>
  406830:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  406834:	f001 bf6e 	b.w	408714 <_fini>
  406838:	00408720 	.word	0x00408720
  40683c:	00408724 	.word	0x00408724

00406840 <__libc_init_array>:
  406840:	b538      	push	{r3, r4, r5, lr}
  406842:	4d0e      	ldr	r5, [pc, #56]	; (40687c <__libc_init_array+0x3c>)
  406844:	4b0e      	ldr	r3, [pc, #56]	; (406880 <__libc_init_array+0x40>)
  406846:	1ae8      	subs	r0, r5, r3
  406848:	1085      	asrs	r5, r0, #2
  40684a:	2400      	movs	r4, #0
  40684c:	42ac      	cmp	r4, r5
  40684e:	d005      	beq.n	40685c <__libc_init_array+0x1c>
  406850:	490b      	ldr	r1, [pc, #44]	; (406880 <__libc_init_array+0x40>)
  406852:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
  406856:	4790      	blx	r2
  406858:	3401      	adds	r4, #1
  40685a:	e7f7      	b.n	40684c <__libc_init_array+0xc>
  40685c:	f001 ff50 	bl	408700 <_init>
  406860:	4908      	ldr	r1, [pc, #32]	; (406884 <__libc_init_array+0x44>)
  406862:	4a09      	ldr	r2, [pc, #36]	; (406888 <__libc_init_array+0x48>)
  406864:	1a54      	subs	r4, r2, r1
  406866:	10a5      	asrs	r5, r4, #2
  406868:	2400      	movs	r4, #0
  40686a:	42ac      	cmp	r4, r5
  40686c:	d005      	beq.n	40687a <__libc_init_array+0x3a>
  40686e:	4b05      	ldr	r3, [pc, #20]	; (406884 <__libc_init_array+0x44>)
  406870:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  406874:	4780      	blx	r0
  406876:	3401      	adds	r4, #1
  406878:	e7f7      	b.n	40686a <__libc_init_array+0x2a>
  40687a:	bd38      	pop	{r3, r4, r5, pc}
  40687c:	0040870c 	.word	0x0040870c
  406880:	0040870c 	.word	0x0040870c
  406884:	0040870c 	.word	0x0040870c
  406888:	00408714 	.word	0x00408714

0040688c <memcpy>:
  40688c:	b510      	push	{r4, lr}
  40688e:	2300      	movs	r3, #0
  406890:	4293      	cmp	r3, r2
  406892:	d003      	beq.n	40689c <memcpy+0x10>
  406894:	5ccc      	ldrb	r4, [r1, r3]
  406896:	54c4      	strb	r4, [r0, r3]
  406898:	3301      	adds	r3, #1
  40689a:	e7f9      	b.n	406890 <memcpy+0x4>
  40689c:	bd10      	pop	{r4, pc}
	...

004068a0 <_sprintf_r>:
  4068a0:	b40c      	push	{r2, r3}
  4068a2:	b510      	push	{r4, lr}
  4068a4:	b09c      	sub	sp, #112	; 0x70
  4068a6:	ab1e      	add	r3, sp, #120	; 0x78
  4068a8:	9102      	str	r1, [sp, #8]
  4068aa:	9106      	str	r1, [sp, #24]
  4068ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  4068b0:	f853 2b04 	ldr.w	r2, [r3], #4
  4068b4:	9104      	str	r1, [sp, #16]
  4068b6:	9107      	str	r1, [sp, #28]
  4068b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
  4068bc:	f8ad 1016 	strh.w	r1, [sp, #22]
  4068c0:	f44f 7402 	mov.w	r4, #520	; 0x208
  4068c4:	a902      	add	r1, sp, #8
  4068c6:	9301      	str	r3, [sp, #4]
  4068c8:	f8ad 4014 	strh.w	r4, [sp, #20]
  4068cc:	f000 f834 	bl	406938 <_svfprintf_r>
  4068d0:	9b02      	ldr	r3, [sp, #8]
  4068d2:	2200      	movs	r2, #0
  4068d4:	701a      	strb	r2, [r3, #0]
  4068d6:	b01c      	add	sp, #112	; 0x70
  4068d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4068dc:	b002      	add	sp, #8
  4068de:	4770      	bx	lr

004068e0 <sprintf>:
  4068e0:	b40e      	push	{r1, r2, r3}
  4068e2:	b500      	push	{lr}
  4068e4:	b09c      	sub	sp, #112	; 0x70
  4068e6:	ab1d      	add	r3, sp, #116	; 0x74
  4068e8:	9002      	str	r0, [sp, #8]
  4068ea:	9006      	str	r0, [sp, #24]
  4068ec:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  4068f0:	9004      	str	r0, [sp, #16]
  4068f2:	9007      	str	r0, [sp, #28]
  4068f4:	f44f 7102 	mov.w	r1, #520	; 0x208
  4068f8:	480a      	ldr	r0, [pc, #40]	; (406924 <sprintf+0x44>)
  4068fa:	f853 2b04 	ldr.w	r2, [r3], #4
  4068fe:	f8ad 1014 	strh.w	r1, [sp, #20]
  406902:	f64f 71ff 	movw	r1, #65535	; 0xffff
  406906:	f8ad 1016 	strh.w	r1, [sp, #22]
  40690a:	6800      	ldr	r0, [r0, #0]
  40690c:	9301      	str	r3, [sp, #4]
  40690e:	a902      	add	r1, sp, #8
  406910:	f000 f812 	bl	406938 <_svfprintf_r>
  406914:	9b02      	ldr	r3, [sp, #8]
  406916:	2200      	movs	r2, #0
  406918:	701a      	strb	r2, [r3, #0]
  40691a:	b01c      	add	sp, #112	; 0x70
  40691c:	f85d eb04 	ldr.w	lr, [sp], #4
  406920:	b003      	add	sp, #12
  406922:	4770      	bx	lr
  406924:	200004c0 	.word	0x200004c0

00406928 <strlen>:
  406928:	4603      	mov	r3, r0
  40692a:	f813 2b01 	ldrb.w	r2, [r3], #1
  40692e:	2a00      	cmp	r2, #0
  406930:	d1fb      	bne.n	40692a <strlen+0x2>
  406932:	1a18      	subs	r0, r3, r0
  406934:	3801      	subs	r0, #1
  406936:	4770      	bx	lr

00406938 <_svfprintf_r>:
  406938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40693c:	461e      	mov	r6, r3
  40693e:	898b      	ldrh	r3, [r1, #12]
  406940:	4689      	mov	r9, r1
  406942:	f003 0180 	and.w	r1, r3, #128	; 0x80
  406946:	4614      	mov	r4, r2
  406948:	b20a      	sxth	r2, r1
  40694a:	b0a9      	sub	sp, #164	; 0xa4
  40694c:	4683      	mov	fp, r0
  40694e:	b19a      	cbz	r2, 406978 <_svfprintf_r+0x40>
  406950:	f8d9 3010 	ldr.w	r3, [r9, #16]
  406954:	b983      	cbnz	r3, 406978 <_svfprintf_r+0x40>
  406956:	2140      	movs	r1, #64	; 0x40
  406958:	f000 fd00 	bl	40735c <_malloc_r>
  40695c:	f8c9 0000 	str.w	r0, [r9]
  406960:	f8c9 0010 	str.w	r0, [r9, #16]
  406964:	b928      	cbnz	r0, 406972 <_svfprintf_r+0x3a>
  406966:	220c      	movs	r2, #12
  406968:	f8cb 2000 	str.w	r2, [fp]
  40696c:	f04f 30ff 	mov.w	r0, #4294967295
  406970:	e3dc      	b.n	40712c <_svfprintf_r+0x7f4>
  406972:	2040      	movs	r0, #64	; 0x40
  406974:	f8c9 0014 	str.w	r0, [r9, #20]
  406978:	2100      	movs	r1, #0
  40697a:	ad18      	add	r5, sp, #96	; 0x60
  40697c:	950b      	str	r5, [sp, #44]	; 0x2c
  40697e:	910d      	str	r1, [sp, #52]	; 0x34
  406980:	910c      	str	r1, [sp, #48]	; 0x30
  406982:	9401      	str	r4, [sp, #4]
  406984:	9105      	str	r1, [sp, #20]
  406986:	9104      	str	r1, [sp, #16]
  406988:	46a8      	mov	r8, r5
  40698a:	9b01      	ldr	r3, [sp, #4]
  40698c:	461c      	mov	r4, r3
  40698e:	f813 2b01 	ldrb.w	r2, [r3], #1
  406992:	b91a      	cbnz	r2, 40699c <_svfprintf_r+0x64>
  406994:	9801      	ldr	r0, [sp, #4]
  406996:	1a25      	subs	r5, r4, r0
  406998:	d103      	bne.n	4069a2 <_svfprintf_r+0x6a>
  40699a:	e01d      	b.n	4069d8 <_svfprintf_r+0xa0>
  40699c:	2a25      	cmp	r2, #37	; 0x25
  40699e:	d1f5      	bne.n	40698c <_svfprintf_r+0x54>
  4069a0:	e7f8      	b.n	406994 <_svfprintf_r+0x5c>
  4069a2:	9a01      	ldr	r2, [sp, #4]
  4069a4:	990d      	ldr	r1, [sp, #52]	; 0x34
  4069a6:	e888 0024 	stmia.w	r8, {r2, r5}
  4069aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4069ac:	1c50      	adds	r0, r2, #1
  4069ae:	194b      	adds	r3, r1, r5
  4069b0:	2807      	cmp	r0, #7
  4069b2:	930d      	str	r3, [sp, #52]	; 0x34
  4069b4:	900c      	str	r0, [sp, #48]	; 0x30
  4069b6:	dc02      	bgt.n	4069be <_svfprintf_r+0x86>
  4069b8:	f108 0808 	add.w	r8, r8, #8
  4069bc:	e009      	b.n	4069d2 <_svfprintf_r+0x9a>
  4069be:	4658      	mov	r0, fp
  4069c0:	4649      	mov	r1, r9
  4069c2:	aa0b      	add	r2, sp, #44	; 0x2c
  4069c4:	f001 f874 	bl	407ab0 <__ssprint_r>
  4069c8:	2800      	cmp	r0, #0
  4069ca:	f040 83a4 	bne.w	407116 <_svfprintf_r+0x7de>
  4069ce:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  4069d2:	9904      	ldr	r1, [sp, #16]
  4069d4:	194b      	adds	r3, r1, r5
  4069d6:	9304      	str	r3, [sp, #16]
  4069d8:	7822      	ldrb	r2, [r4, #0]
  4069da:	2a00      	cmp	r2, #0
  4069dc:	f000 8394 	beq.w	407108 <_svfprintf_r+0x7d0>
  4069e0:	2200      	movs	r2, #0
  4069e2:	3401      	adds	r4, #1
  4069e4:	9401      	str	r4, [sp, #4]
  4069e6:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
  4069ea:	f04f 3cff 	mov.w	ip, #4294967295
  4069ee:	9203      	str	r2, [sp, #12]
  4069f0:	4617      	mov	r7, r2
  4069f2:	9801      	ldr	r0, [sp, #4]
  4069f4:	f810 3b01 	ldrb.w	r3, [r0], #1
  4069f8:	9001      	str	r0, [sp, #4]
  4069fa:	2b63      	cmp	r3, #99	; 0x63
  4069fc:	f000 80b3 	beq.w	406b66 <_svfprintf_r+0x22e>
  406a00:	dc33      	bgt.n	406a6a <_svfprintf_r+0x132>
  406a02:	2b39      	cmp	r3, #57	; 0x39
  406a04:	dc1a      	bgt.n	406a3c <_svfprintf_r+0x104>
  406a06:	2b31      	cmp	r3, #49	; 0x31
  406a08:	f280 8091 	bge.w	406b2e <_svfprintf_r+0x1f6>
  406a0c:	2b2b      	cmp	r3, #43	; 0x2b
  406a0e:	d101      	bne.n	406a14 <_svfprintf_r+0xdc>
  406a10:	461a      	mov	r2, r3
  406a12:	e7ee      	b.n	4069f2 <_svfprintf_r+0xba>
  406a14:	dc0a      	bgt.n	406a2c <_svfprintf_r+0xf4>
  406a16:	2b23      	cmp	r3, #35	; 0x23
  406a18:	d055      	beq.n	406ac6 <_svfprintf_r+0x18e>
  406a1a:	2b2a      	cmp	r3, #42	; 0x2a
  406a1c:	d056      	beq.n	406acc <_svfprintf_r+0x194>
  406a1e:	2b20      	cmp	r3, #32
  406a20:	f040 81f7 	bne.w	406e12 <_svfprintf_r+0x4da>
  406a24:	2a00      	cmp	r2, #0
  406a26:	bf08      	it	eq
  406a28:	2220      	moveq	r2, #32
  406a2a:	e7e2      	b.n	4069f2 <_svfprintf_r+0xba>
  406a2c:	2b2e      	cmp	r3, #46	; 0x2e
  406a2e:	d058      	beq.n	406ae2 <_svfprintf_r+0x1aa>
  406a30:	2b30      	cmp	r3, #48	; 0x30
  406a32:	d079      	beq.n	406b28 <_svfprintf_r+0x1f0>
  406a34:	2b2d      	cmp	r3, #45	; 0x2d
  406a36:	f040 81ec 	bne.w	406e12 <_svfprintf_r+0x4da>
  406a3a:	e04f      	b.n	406adc <_svfprintf_r+0x1a4>
  406a3c:	2b4f      	cmp	r3, #79	; 0x4f
  406a3e:	f000 80de 	beq.w	406bfe <_svfprintf_r+0x2c6>
  406a42:	dc07      	bgt.n	406a54 <_svfprintf_r+0x11c>
  406a44:	2b44      	cmp	r3, #68	; 0x44
  406a46:	f040 81e4 	bne.w	406e12 <_svfprintf_r+0x4da>
  406a4a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
  406a4e:	f047 0710 	orr.w	r7, r7, #16
  406a52:	e090      	b.n	406b76 <_svfprintf_r+0x23e>
  406a54:	2b55      	cmp	r3, #85	; 0x55
  406a56:	f000 811f 	beq.w	406c98 <_svfprintf_r+0x360>
  406a5a:	2b58      	cmp	r3, #88	; 0x58
  406a5c:	f040 81d9 	bne.w	406e12 <_svfprintf_r+0x4da>
  406a60:	4daf      	ldr	r5, [pc, #700]	; (406d20 <_svfprintf_r+0x3e8>)
  406a62:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
  406a66:	9505      	str	r5, [sp, #20]
  406a68:	e131      	b.n	406cce <_svfprintf_r+0x396>
  406a6a:	2b6f      	cmp	r3, #111	; 0x6f
  406a6c:	f000 80c9 	beq.w	406c02 <_svfprintf_r+0x2ca>
  406a70:	dc10      	bgt.n	406a94 <_svfprintf_r+0x15c>
  406a72:	2b69      	cmp	r3, #105	; 0x69
  406a74:	d024      	beq.n	406ac0 <_svfprintf_r+0x188>
  406a76:	dc07      	bgt.n	406a88 <_svfprintf_r+0x150>
  406a78:	2b64      	cmp	r3, #100	; 0x64
  406a7a:	d021      	beq.n	406ac0 <_svfprintf_r+0x188>
  406a7c:	2b68      	cmp	r3, #104	; 0x68
  406a7e:	f040 81c8 	bne.w	406e12 <_svfprintf_r+0x4da>
  406a82:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  406a86:	e7b4      	b.n	4069f2 <_svfprintf_r+0xba>
  406a88:	2b6c      	cmp	r3, #108	; 0x6c
  406a8a:	d05f      	beq.n	406b4c <_svfprintf_r+0x214>
  406a8c:	2b6e      	cmp	r3, #110	; 0x6e
  406a8e:	f040 81c0 	bne.w	406e12 <_svfprintf_r+0x4da>
  406a92:	e096      	b.n	406bc2 <_svfprintf_r+0x28a>
  406a94:	2b73      	cmp	r3, #115	; 0x73
  406a96:	f000 80df 	beq.w	406c58 <_svfprintf_r+0x320>
  406a9a:	dc06      	bgt.n	406aaa <_svfprintf_r+0x172>
  406a9c:	2b70      	cmp	r3, #112	; 0x70
  406a9e:	f000 80cd 	beq.w	406c3c <_svfprintf_r+0x304>
  406aa2:	2b71      	cmp	r3, #113	; 0x71
  406aa4:	f040 81b5 	bne.w	406e12 <_svfprintf_r+0x4da>
  406aa8:	e05a      	b.n	406b60 <_svfprintf_r+0x228>
  406aaa:	2b75      	cmp	r3, #117	; 0x75
  406aac:	f000 80f6 	beq.w	406c9c <_svfprintf_r+0x364>
  406ab0:	2b78      	cmp	r3, #120	; 0x78
  406ab2:	f040 81ae 	bne.w	406e12 <_svfprintf_r+0x4da>
  406ab6:	4d9b      	ldr	r5, [pc, #620]	; (406d24 <_svfprintf_r+0x3ec>)
  406ab8:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
  406abc:	9505      	str	r5, [sp, #20]
  406abe:	e106      	b.n	406cce <_svfprintf_r+0x396>
  406ac0:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
  406ac4:	e057      	b.n	406b76 <_svfprintf_r+0x23e>
  406ac6:	f047 0701 	orr.w	r7, r7, #1
  406aca:	e792      	b.n	4069f2 <_svfprintf_r+0xba>
  406acc:	1d33      	adds	r3, r6, #4
  406ace:	6836      	ldr	r6, [r6, #0]
  406ad0:	2e00      	cmp	r6, #0
  406ad2:	9603      	str	r6, [sp, #12]
  406ad4:	da15      	bge.n	406b02 <_svfprintf_r+0x1ca>
  406ad6:	4270      	negs	r0, r6
  406ad8:	9003      	str	r0, [sp, #12]
  406ada:	461e      	mov	r6, r3
  406adc:	f047 0704 	orr.w	r7, r7, #4
  406ae0:	e787      	b.n	4069f2 <_svfprintf_r+0xba>
  406ae2:	9901      	ldr	r1, [sp, #4]
  406ae4:	f811 3b01 	ldrb.w	r3, [r1], #1
  406ae8:	2b2a      	cmp	r3, #42	; 0x2a
  406aea:	9101      	str	r1, [sp, #4]
  406aec:	d10b      	bne.n	406b06 <_svfprintf_r+0x1ce>
  406aee:	f8d6 c000 	ldr.w	ip, [r6]
  406af2:	1d33      	adds	r3, r6, #4
  406af4:	f1bc 0f00 	cmp.w	ip, #0
  406af8:	da03      	bge.n	406b02 <_svfprintf_r+0x1ca>
  406afa:	461e      	mov	r6, r3
  406afc:	f04f 3cff 	mov.w	ip, #4294967295
  406b00:	e777      	b.n	4069f2 <_svfprintf_r+0xba>
  406b02:	461e      	mov	r6, r3
  406b04:	e775      	b.n	4069f2 <_svfprintf_r+0xba>
  406b06:	f04f 0c00 	mov.w	ip, #0
  406b0a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  406b0e:	2809      	cmp	r0, #9
  406b10:	d807      	bhi.n	406b22 <_svfprintf_r+0x1ea>
  406b12:	9901      	ldr	r1, [sp, #4]
  406b14:	230a      	movs	r3, #10
  406b16:	fb03 0c0c 	mla	ip, r3, ip, r0
  406b1a:	f811 3b01 	ldrb.w	r3, [r1], #1
  406b1e:	9101      	str	r1, [sp, #4]
  406b20:	e7f3      	b.n	406b0a <_svfprintf_r+0x1d2>
  406b22:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
  406b26:	e768      	b.n	4069fa <_svfprintf_r+0xc2>
  406b28:	f047 0780 	orr.w	r7, r7, #128	; 0x80
  406b2c:	e761      	b.n	4069f2 <_svfprintf_r+0xba>
  406b2e:	9801      	ldr	r0, [sp, #4]
  406b30:	2100      	movs	r1, #0
  406b32:	3b30      	subs	r3, #48	; 0x30
  406b34:	240a      	movs	r4, #10
  406b36:	fb04 3101 	mla	r1, r4, r1, r3
  406b3a:	f810 3b01 	ldrb.w	r3, [r0], #1
  406b3e:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
  406b42:	2c09      	cmp	r4, #9
  406b44:	9001      	str	r0, [sp, #4]
  406b46:	d9f4      	bls.n	406b32 <_svfprintf_r+0x1fa>
  406b48:	9103      	str	r1, [sp, #12]
  406b4a:	e756      	b.n	4069fa <_svfprintf_r+0xc2>
  406b4c:	9901      	ldr	r1, [sp, #4]
  406b4e:	780b      	ldrb	r3, [r1, #0]
  406b50:	2b6c      	cmp	r3, #108	; 0x6c
  406b52:	d102      	bne.n	406b5a <_svfprintf_r+0x222>
  406b54:	1c48      	adds	r0, r1, #1
  406b56:	9001      	str	r0, [sp, #4]
  406b58:	e002      	b.n	406b60 <_svfprintf_r+0x228>
  406b5a:	f047 0710 	orr.w	r7, r7, #16
  406b5e:	e748      	b.n	4069f2 <_svfprintf_r+0xba>
  406b60:	f047 0720 	orr.w	r7, r7, #32
  406b64:	e745      	b.n	4069f2 <_svfprintf_r+0xba>
  406b66:	6832      	ldr	r2, [r6, #0]
  406b68:	2500      	movs	r5, #0
  406b6a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
  406b6e:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
  406b72:	3604      	adds	r6, #4
  406b74:	e157      	b.n	406e26 <_svfprintf_r+0x4ee>
  406b76:	06ba      	lsls	r2, r7, #26
  406b78:	d507      	bpl.n	406b8a <_svfprintf_r+0x252>
  406b7a:	3607      	adds	r6, #7
  406b7c:	f026 0507 	bic.w	r5, r6, #7
  406b80:	f105 0608 	add.w	r6, r5, #8
  406b84:	e9d5 4500 	ldrd	r4, r5, [r5]
  406b88:	e00f      	b.n	406baa <_svfprintf_r+0x272>
  406b8a:	f017 0f10 	tst.w	r7, #16
  406b8e:	f106 0104 	add.w	r1, r6, #4
  406b92:	d001      	beq.n	406b98 <_svfprintf_r+0x260>
  406b94:	6832      	ldr	r2, [r6, #0]
  406b96:	e005      	b.n	406ba4 <_svfprintf_r+0x26c>
  406b98:	f017 0f40 	tst.w	r7, #64	; 0x40
  406b9c:	6832      	ldr	r2, [r6, #0]
  406b9e:	d001      	beq.n	406ba4 <_svfprintf_r+0x26c>
  406ba0:	b214      	sxth	r4, r2
  406ba2:	e000      	b.n	406ba6 <_svfprintf_r+0x26e>
  406ba4:	4614      	mov	r4, r2
  406ba6:	17e5      	asrs	r5, r4, #31
  406ba8:	460e      	mov	r6, r1
  406baa:	2c00      	cmp	r4, #0
  406bac:	f175 0200 	sbcs.w	r2, r5, #0
  406bb0:	f280 80ba 	bge.w	406d28 <_svfprintf_r+0x3f0>
  406bb4:	232d      	movs	r3, #45	; 0x2d
  406bb6:	4264      	negs	r4, r4
  406bb8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  406bbc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
  406bc0:	e0b2      	b.n	406d28 <_svfprintf_r+0x3f0>
  406bc2:	f017 0f20 	tst.w	r7, #32
  406bc6:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
  406bca:	f106 0204 	add.w	r2, r6, #4
  406bce:	d005      	beq.n	406bdc <_svfprintf_r+0x2a4>
  406bd0:	9c04      	ldr	r4, [sp, #16]
  406bd2:	6835      	ldr	r5, [r6, #0]
  406bd4:	17e0      	asrs	r0, r4, #31
  406bd6:	602c      	str	r4, [r5, #0]
  406bd8:	6068      	str	r0, [r5, #4]
  406bda:	e004      	b.n	406be6 <_svfprintf_r+0x2ae>
  406bdc:	06fb      	lsls	r3, r7, #27
  406bde:	d504      	bpl.n	406bea <_svfprintf_r+0x2b2>
  406be0:	6833      	ldr	r3, [r6, #0]
  406be2:	9904      	ldr	r1, [sp, #16]
  406be4:	6019      	str	r1, [r3, #0]
  406be6:	4616      	mov	r6, r2
  406be8:	e6cf      	b.n	40698a <_svfprintf_r+0x52>
  406bea:	6830      	ldr	r0, [r6, #0]
  406bec:	9c04      	ldr	r4, [sp, #16]
  406bee:	f017 0f40 	tst.w	r7, #64	; 0x40
  406bf2:	f106 0604 	add.w	r6, r6, #4
  406bf6:	bf14      	ite	ne
  406bf8:	8004      	strhne	r4, [r0, #0]
  406bfa:	6004      	streq	r4, [r0, #0]
  406bfc:	e6c5      	b.n	40698a <_svfprintf_r+0x52>
  406bfe:	f047 0710 	orr.w	r7, r7, #16
  406c02:	f017 0020 	ands.w	r0, r7, #32
  406c06:	d008      	beq.n	406c1a <_svfprintf_r+0x2e2>
  406c08:	1df3      	adds	r3, r6, #7
  406c0a:	f023 0507 	bic.w	r5, r3, #7
  406c0e:	f105 0608 	add.w	r6, r5, #8
  406c12:	e9d5 4500 	ldrd	r4, r5, [r5]
  406c16:	2000      	movs	r0, #0
  406c18:	e07d      	b.n	406d16 <_svfprintf_r+0x3de>
  406c1a:	f017 0110 	ands.w	r1, r7, #16
  406c1e:	f106 0204 	add.w	r2, r6, #4
  406c22:	d106      	bne.n	406c32 <_svfprintf_r+0x2fa>
  406c24:	f017 0040 	ands.w	r0, r7, #64	; 0x40
  406c28:	d003      	beq.n	406c32 <_svfprintf_r+0x2fa>
  406c2a:	8834      	ldrh	r4, [r6, #0]
  406c2c:	2500      	movs	r5, #0
  406c2e:	4616      	mov	r6, r2
  406c30:	e7f1      	b.n	406c16 <_svfprintf_r+0x2de>
  406c32:	6836      	ldr	r6, [r6, #0]
  406c34:	2500      	movs	r5, #0
  406c36:	4634      	mov	r4, r6
  406c38:	4616      	mov	r6, r2
  406c3a:	e06c      	b.n	406d16 <_svfprintf_r+0x3de>
  406c3c:	4b39      	ldr	r3, [pc, #228]	; (406d24 <_svfprintf_r+0x3ec>)
  406c3e:	6834      	ldr	r4, [r6, #0]
  406c40:	9305      	str	r3, [sp, #20]
  406c42:	2130      	movs	r1, #48	; 0x30
  406c44:	2278      	movs	r2, #120	; 0x78
  406c46:	2500      	movs	r5, #0
  406c48:	f047 0702 	orr.w	r7, r7, #2
  406c4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  406c50:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
  406c54:	3604      	adds	r6, #4
  406c56:	e05d      	b.n	406d14 <_svfprintf_r+0x3dc>
  406c58:	4631      	mov	r1, r6
  406c5a:	2500      	movs	r5, #0
  406c5c:	f8d1 a000 	ldr.w	sl, [r1]
  406c60:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
  406c64:	3604      	adds	r6, #4
  406c66:	45ac      	cmp	ip, r5
  406c68:	4650      	mov	r0, sl
  406c6a:	db11      	blt.n	406c90 <_svfprintf_r+0x358>
  406c6c:	4662      	mov	r2, ip
  406c6e:	4629      	mov	r1, r5
  406c70:	f8cd c000 	str.w	ip, [sp]
  406c74:	f000 fd74 	bl	407760 <memchr>
  406c78:	f8dd c000 	ldr.w	ip, [sp]
  406c7c:	2800      	cmp	r0, #0
  406c7e:	f000 80d6 	beq.w	406e2e <_svfprintf_r+0x4f6>
  406c82:	ebca 0400 	rsb	r4, sl, r0
  406c86:	4564      	cmp	r4, ip
  406c88:	f340 80d3 	ble.w	406e32 <_svfprintf_r+0x4fa>
  406c8c:	4664      	mov	r4, ip
  406c8e:	e0d0      	b.n	406e32 <_svfprintf_r+0x4fa>
  406c90:	f7ff fe4a 	bl	406928 <strlen>
  406c94:	4604      	mov	r4, r0
  406c96:	e0cc      	b.n	406e32 <_svfprintf_r+0x4fa>
  406c98:	f047 0710 	orr.w	r7, r7, #16
  406c9c:	06bd      	lsls	r5, r7, #26
  406c9e:	d507      	bpl.n	406cb0 <_svfprintf_r+0x378>
  406ca0:	1df0      	adds	r0, r6, #7
  406ca2:	f020 0407 	bic.w	r4, r0, #7
  406ca6:	f104 0608 	add.w	r6, r4, #8
  406caa:	e9d4 4500 	ldrd	r4, r5, [r4]
  406cae:	e00c      	b.n	406cca <_svfprintf_r+0x392>
  406cb0:	f017 0f10 	tst.w	r7, #16
  406cb4:	f106 0304 	add.w	r3, r6, #4
  406cb8:	d103      	bne.n	406cc2 <_svfprintf_r+0x38a>
  406cba:	067c      	lsls	r4, r7, #25
  406cbc:	d501      	bpl.n	406cc2 <_svfprintf_r+0x38a>
  406cbe:	8834      	ldrh	r4, [r6, #0]
  406cc0:	e001      	b.n	406cc6 <_svfprintf_r+0x38e>
  406cc2:	6835      	ldr	r5, [r6, #0]
  406cc4:	462c      	mov	r4, r5
  406cc6:	2500      	movs	r5, #0
  406cc8:	461e      	mov	r6, r3
  406cca:	2001      	movs	r0, #1
  406ccc:	e023      	b.n	406d16 <_svfprintf_r+0x3de>
  406cce:	06b8      	lsls	r0, r7, #26
  406cd0:	d507      	bpl.n	406ce2 <_svfprintf_r+0x3aa>
  406cd2:	1df4      	adds	r4, r6, #7
  406cd4:	f024 0107 	bic.w	r1, r4, #7
  406cd8:	f101 0608 	add.w	r6, r1, #8
  406cdc:	e9d1 4500 	ldrd	r4, r5, [r1]
  406ce0:	e00c      	b.n	406cfc <_svfprintf_r+0x3c4>
  406ce2:	f017 0f10 	tst.w	r7, #16
  406ce6:	f106 0004 	add.w	r0, r6, #4
  406cea:	d103      	bne.n	406cf4 <_svfprintf_r+0x3bc>
  406cec:	0679      	lsls	r1, r7, #25
  406cee:	d501      	bpl.n	406cf4 <_svfprintf_r+0x3bc>
  406cf0:	8834      	ldrh	r4, [r6, #0]
  406cf2:	e001      	b.n	406cf8 <_svfprintf_r+0x3c0>
  406cf4:	6836      	ldr	r6, [r6, #0]
  406cf6:	4634      	mov	r4, r6
  406cf8:	2500      	movs	r5, #0
  406cfa:	4606      	mov	r6, r0
  406cfc:	07fa      	lsls	r2, r7, #31
  406cfe:	d509      	bpl.n	406d14 <_svfprintf_r+0x3dc>
  406d00:	ea54 0205 	orrs.w	r2, r4, r5
  406d04:	d006      	beq.n	406d14 <_svfprintf_r+0x3dc>
  406d06:	2230      	movs	r2, #48	; 0x30
  406d08:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
  406d0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  406d10:	f047 0702 	orr.w	r7, r7, #2
  406d14:	2002      	movs	r0, #2
  406d16:	2100      	movs	r1, #0
  406d18:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
  406d1c:	e005      	b.n	406d2a <_svfprintf_r+0x3f2>
  406d1e:	bf00      	nop
  406d20:	004086be 	.word	0x004086be
  406d24:	004086cf 	.word	0x004086cf
  406d28:	2001      	movs	r0, #1
  406d2a:	f1bc 0f00 	cmp.w	ip, #0
  406d2e:	bfa8      	it	ge
  406d30:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
  406d34:	ea54 0105 	orrs.w	r1, r4, r5
  406d38:	d102      	bne.n	406d40 <_svfprintf_r+0x408>
  406d3a:	f1bc 0f00 	cmp.w	ip, #0
  406d3e:	d058      	beq.n	406df2 <_svfprintf_r+0x4ba>
  406d40:	2801      	cmp	r0, #1
  406d42:	d01d      	beq.n	406d80 <_svfprintf_r+0x448>
  406d44:	2802      	cmp	r0, #2
  406d46:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
  406d4a:	d041      	beq.n	406dd0 <_svfprintf_r+0x498>
  406d4c:	f004 0207 	and.w	r2, r4, #7
  406d50:	08e4      	lsrs	r4, r4, #3
  406d52:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
  406d56:	08e9      	lsrs	r1, r5, #3
  406d58:	4604      	mov	r4, r0
  406d5a:	460d      	mov	r5, r1
  406d5c:	3230      	adds	r2, #48	; 0x30
  406d5e:	ea54 0105 	orrs.w	r1, r4, r5
  406d62:	469a      	mov	sl, r3
  406d64:	701a      	strb	r2, [r3, #0]
  406d66:	f103 33ff 	add.w	r3, r3, #4294967295
  406d6a:	d1ef      	bne.n	406d4c <_svfprintf_r+0x414>
  406d6c:	07f8      	lsls	r0, r7, #31
  406d6e:	4655      	mov	r5, sl
  406d70:	d54a      	bpl.n	406e08 <_svfprintf_r+0x4d0>
  406d72:	2a30      	cmp	r2, #48	; 0x30
  406d74:	d048      	beq.n	406e08 <_svfprintf_r+0x4d0>
  406d76:	2230      	movs	r2, #48	; 0x30
  406d78:	469a      	mov	sl, r3
  406d7a:	f805 2c01 	strb.w	r2, [r5, #-1]
  406d7e:	e043      	b.n	406e08 <_svfprintf_r+0x4d0>
  406d80:	2d00      	cmp	r5, #0
  406d82:	bf08      	it	eq
  406d84:	2c0a      	cmpeq	r4, #10
  406d86:	d203      	bcs.n	406d90 <_svfprintf_r+0x458>
  406d88:	3430      	adds	r4, #48	; 0x30
  406d8a:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
  406d8e:	e036      	b.n	406dfe <_svfprintf_r+0x4c6>
  406d90:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
  406d94:	9302      	str	r3, [sp, #8]
  406d96:	4620      	mov	r0, r4
  406d98:	4629      	mov	r1, r5
  406d9a:	220a      	movs	r2, #10
  406d9c:	2300      	movs	r3, #0
  406d9e:	f8cd c000 	str.w	ip, [sp]
  406da2:	f7ff fa03 	bl	4061ac <__aeabi_uldivmod>
  406da6:	9802      	ldr	r0, [sp, #8]
  406da8:	f8dd a008 	ldr.w	sl, [sp, #8]
  406dac:	3230      	adds	r2, #48	; 0x30
  406dae:	f800 2901 	strb.w	r2, [r0], #-1
  406db2:	4629      	mov	r1, r5
  406db4:	9002      	str	r0, [sp, #8]
  406db6:	220a      	movs	r2, #10
  406db8:	4620      	mov	r0, r4
  406dba:	2300      	movs	r3, #0
  406dbc:	f7ff f9f6 	bl	4061ac <__aeabi_uldivmod>
  406dc0:	4604      	mov	r4, r0
  406dc2:	460d      	mov	r5, r1
  406dc4:	ea54 0105 	orrs.w	r1, r4, r5
  406dc8:	f8dd c000 	ldr.w	ip, [sp]
  406dcc:	d1e3      	bne.n	406d96 <_svfprintf_r+0x45e>
  406dce:	e01b      	b.n	406e08 <_svfprintf_r+0x4d0>
  406dd0:	f004 000f 	and.w	r0, r4, #15
  406dd4:	9905      	ldr	r1, [sp, #20]
  406dd6:	0924      	lsrs	r4, r4, #4
  406dd8:	5c0a      	ldrb	r2, [r1, r0]
  406dda:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
  406dde:	0929      	lsrs	r1, r5, #4
  406de0:	4604      	mov	r4, r0
  406de2:	460d      	mov	r5, r1
  406de4:	469a      	mov	sl, r3
  406de6:	f803 2901 	strb.w	r2, [r3], #-1
  406dea:	ea54 0205 	orrs.w	r2, r4, r5
  406dee:	d1ef      	bne.n	406dd0 <_svfprintf_r+0x498>
  406df0:	e00a      	b.n	406e08 <_svfprintf_r+0x4d0>
  406df2:	b938      	cbnz	r0, 406e04 <_svfprintf_r+0x4cc>
  406df4:	07f9      	lsls	r1, r7, #31
  406df6:	d505      	bpl.n	406e04 <_svfprintf_r+0x4cc>
  406df8:	2030      	movs	r0, #48	; 0x30
  406dfa:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
  406dfe:	f10d 0a5f 	add.w	sl, sp, #95	; 0x5f
  406e02:	e001      	b.n	406e08 <_svfprintf_r+0x4d0>
  406e04:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
  406e08:	ad18      	add	r5, sp, #96	; 0x60
  406e0a:	ebca 0405 	rsb	r4, sl, r5
  406e0e:	4665      	mov	r5, ip
  406e10:	e00f      	b.n	406e32 <_svfprintf_r+0x4fa>
  406e12:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
  406e16:	2b00      	cmp	r3, #0
  406e18:	f000 8176 	beq.w	407108 <_svfprintf_r+0x7d0>
  406e1c:	2500      	movs	r5, #0
  406e1e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  406e22:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
  406e26:	2401      	movs	r4, #1
  406e28:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
  406e2c:	e001      	b.n	406e32 <_svfprintf_r+0x4fa>
  406e2e:	4664      	mov	r4, ip
  406e30:	4605      	mov	r5, r0
  406e32:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
  406e36:	42ac      	cmp	r4, r5
  406e38:	bfac      	ite	ge
  406e3a:	4621      	movge	r1, r4
  406e3c:	4629      	movlt	r1, r5
  406e3e:	9102      	str	r1, [sp, #8]
  406e40:	b113      	cbz	r3, 406e48 <_svfprintf_r+0x510>
  406e42:	9802      	ldr	r0, [sp, #8]
  406e44:	1c42      	adds	r2, r0, #1
  406e46:	9202      	str	r2, [sp, #8]
  406e48:	f017 0102 	ands.w	r1, r7, #2
  406e4c:	9106      	str	r1, [sp, #24]
  406e4e:	d002      	beq.n	406e56 <_svfprintf_r+0x51e>
  406e50:	9b02      	ldr	r3, [sp, #8]
  406e52:	1c98      	adds	r0, r3, #2
  406e54:	9002      	str	r0, [sp, #8]
  406e56:	f017 0284 	ands.w	r2, r7, #132	; 0x84
  406e5a:	9207      	str	r2, [sp, #28]
  406e5c:	d13c      	bne.n	406ed8 <_svfprintf_r+0x5a0>
  406e5e:	9903      	ldr	r1, [sp, #12]
  406e60:	9b02      	ldr	r3, [sp, #8]
  406e62:	1acb      	subs	r3, r1, r3
  406e64:	2b00      	cmp	r3, #0
  406e66:	dd37      	ble.n	406ed8 <_svfprintf_r+0x5a0>
  406e68:	48a5      	ldr	r0, [pc, #660]	; (407100 <_svfprintf_r+0x7c8>)
  406e6a:	2b10      	cmp	r3, #16
  406e6c:	f8c8 0000 	str.w	r0, [r8]
  406e70:	dd1b      	ble.n	406eaa <_svfprintf_r+0x572>
  406e72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406e74:	980d      	ldr	r0, [sp, #52]	; 0x34
  406e76:	2110      	movs	r1, #16
  406e78:	f8c8 1004 	str.w	r1, [r8, #4]
  406e7c:	1c51      	adds	r1, r2, #1
  406e7e:	3010      	adds	r0, #16
  406e80:	2907      	cmp	r1, #7
  406e82:	900d      	str	r0, [sp, #52]	; 0x34
  406e84:	910c      	str	r1, [sp, #48]	; 0x30
  406e86:	dc02      	bgt.n	406e8e <_svfprintf_r+0x556>
  406e88:	f108 0808 	add.w	r8, r8, #8
  406e8c:	e00b      	b.n	406ea6 <_svfprintf_r+0x56e>
  406e8e:	4658      	mov	r0, fp
  406e90:	4649      	mov	r1, r9
  406e92:	aa0b      	add	r2, sp, #44	; 0x2c
  406e94:	9300      	str	r3, [sp, #0]
  406e96:	f000 fe0b 	bl	407ab0 <__ssprint_r>
  406e9a:	9b00      	ldr	r3, [sp, #0]
  406e9c:	2800      	cmp	r0, #0
  406e9e:	f040 813a 	bne.w	407116 <_svfprintf_r+0x7de>
  406ea2:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  406ea6:	3b10      	subs	r3, #16
  406ea8:	e7de      	b.n	406e68 <_svfprintf_r+0x530>
  406eaa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  406eac:	f8c8 3004 	str.w	r3, [r8, #4]
  406eb0:	18d1      	adds	r1, r2, r3
  406eb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406eb4:	910d      	str	r1, [sp, #52]	; 0x34
  406eb6:	1c58      	adds	r0, r3, #1
  406eb8:	2807      	cmp	r0, #7
  406eba:	900c      	str	r0, [sp, #48]	; 0x30
  406ebc:	dc02      	bgt.n	406ec4 <_svfprintf_r+0x58c>
  406ebe:	f108 0808 	add.w	r8, r8, #8
  406ec2:	e009      	b.n	406ed8 <_svfprintf_r+0x5a0>
  406ec4:	4658      	mov	r0, fp
  406ec6:	4649      	mov	r1, r9
  406ec8:	aa0b      	add	r2, sp, #44	; 0x2c
  406eca:	f000 fdf1 	bl	407ab0 <__ssprint_r>
  406ece:	2800      	cmp	r0, #0
  406ed0:	f040 8121 	bne.w	407116 <_svfprintf_r+0x7de>
  406ed4:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  406ed8:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
  406edc:	b1da      	cbz	r2, 406f16 <_svfprintf_r+0x5de>
  406ede:	f10d 0127 	add.w	r1, sp, #39	; 0x27
  406ee2:	f8c8 1000 	str.w	r1, [r8]
  406ee6:	990c      	ldr	r1, [sp, #48]	; 0x30
  406ee8:	980d      	ldr	r0, [sp, #52]	; 0x34
  406eea:	2301      	movs	r3, #1
  406eec:	f8c8 3004 	str.w	r3, [r8, #4]
  406ef0:	1c4b      	adds	r3, r1, #1
  406ef2:	1c42      	adds	r2, r0, #1
  406ef4:	2b07      	cmp	r3, #7
  406ef6:	920d      	str	r2, [sp, #52]	; 0x34
  406ef8:	930c      	str	r3, [sp, #48]	; 0x30
  406efa:	dc02      	bgt.n	406f02 <_svfprintf_r+0x5ca>
  406efc:	f108 0808 	add.w	r8, r8, #8
  406f00:	e009      	b.n	406f16 <_svfprintf_r+0x5de>
  406f02:	4658      	mov	r0, fp
  406f04:	4649      	mov	r1, r9
  406f06:	aa0b      	add	r2, sp, #44	; 0x2c
  406f08:	f000 fdd2 	bl	407ab0 <__ssprint_r>
  406f0c:	2800      	cmp	r0, #0
  406f0e:	f040 8102 	bne.w	407116 <_svfprintf_r+0x7de>
  406f12:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  406f16:	9806      	ldr	r0, [sp, #24]
  406f18:	b1d0      	cbz	r0, 406f50 <_svfprintf_r+0x618>
  406f1a:	aa0a      	add	r2, sp, #40	; 0x28
  406f1c:	f8c8 2000 	str.w	r2, [r8]
  406f20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406f22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406f24:	2102      	movs	r1, #2
  406f26:	f8c8 1004 	str.w	r1, [r8, #4]
  406f2a:	1c51      	adds	r1, r2, #1
  406f2c:	1c98      	adds	r0, r3, #2
  406f2e:	2907      	cmp	r1, #7
  406f30:	900d      	str	r0, [sp, #52]	; 0x34
  406f32:	910c      	str	r1, [sp, #48]	; 0x30
  406f34:	dc02      	bgt.n	406f3c <_svfprintf_r+0x604>
  406f36:	f108 0808 	add.w	r8, r8, #8
  406f3a:	e009      	b.n	406f50 <_svfprintf_r+0x618>
  406f3c:	4658      	mov	r0, fp
  406f3e:	4649      	mov	r1, r9
  406f40:	aa0b      	add	r2, sp, #44	; 0x2c
  406f42:	f000 fdb5 	bl	407ab0 <__ssprint_r>
  406f46:	2800      	cmp	r0, #0
  406f48:	f040 80e5 	bne.w	407116 <_svfprintf_r+0x7de>
  406f4c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  406f50:	9b07      	ldr	r3, [sp, #28]
  406f52:	2b80      	cmp	r3, #128	; 0x80
  406f54:	d13c      	bne.n	406fd0 <_svfprintf_r+0x698>
  406f56:	9803      	ldr	r0, [sp, #12]
  406f58:	9a02      	ldr	r2, [sp, #8]
  406f5a:	1a83      	subs	r3, r0, r2
  406f5c:	2b00      	cmp	r3, #0
  406f5e:	dd37      	ble.n	406fd0 <_svfprintf_r+0x698>
  406f60:	4968      	ldr	r1, [pc, #416]	; (407104 <_svfprintf_r+0x7cc>)
  406f62:	2b10      	cmp	r3, #16
  406f64:	f8c8 1000 	str.w	r1, [r8]
  406f68:	dd1b      	ble.n	406fa2 <_svfprintf_r+0x66a>
  406f6a:	980c      	ldr	r0, [sp, #48]	; 0x30
  406f6c:	990d      	ldr	r1, [sp, #52]	; 0x34
  406f6e:	2210      	movs	r2, #16
  406f70:	f8c8 2004 	str.w	r2, [r8, #4]
  406f74:	1c42      	adds	r2, r0, #1
  406f76:	3110      	adds	r1, #16
  406f78:	2a07      	cmp	r2, #7
  406f7a:	910d      	str	r1, [sp, #52]	; 0x34
  406f7c:	920c      	str	r2, [sp, #48]	; 0x30
  406f7e:	dc02      	bgt.n	406f86 <_svfprintf_r+0x64e>
  406f80:	f108 0808 	add.w	r8, r8, #8
  406f84:	e00b      	b.n	406f9e <_svfprintf_r+0x666>
  406f86:	4658      	mov	r0, fp
  406f88:	4649      	mov	r1, r9
  406f8a:	aa0b      	add	r2, sp, #44	; 0x2c
  406f8c:	9300      	str	r3, [sp, #0]
  406f8e:	f000 fd8f 	bl	407ab0 <__ssprint_r>
  406f92:	9b00      	ldr	r3, [sp, #0]
  406f94:	2800      	cmp	r0, #0
  406f96:	f040 80be 	bne.w	407116 <_svfprintf_r+0x7de>
  406f9a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  406f9e:	3b10      	subs	r3, #16
  406fa0:	e7de      	b.n	406f60 <_svfprintf_r+0x628>
  406fa2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406fa4:	980d      	ldr	r0, [sp, #52]	; 0x34
  406fa6:	f8c8 3004 	str.w	r3, [r8, #4]
  406faa:	1c51      	adds	r1, r2, #1
  406fac:	18c3      	adds	r3, r0, r3
  406fae:	2907      	cmp	r1, #7
  406fb0:	930d      	str	r3, [sp, #52]	; 0x34
  406fb2:	910c      	str	r1, [sp, #48]	; 0x30
  406fb4:	dc02      	bgt.n	406fbc <_svfprintf_r+0x684>
  406fb6:	f108 0808 	add.w	r8, r8, #8
  406fba:	e009      	b.n	406fd0 <_svfprintf_r+0x698>
  406fbc:	4658      	mov	r0, fp
  406fbe:	4649      	mov	r1, r9
  406fc0:	aa0b      	add	r2, sp, #44	; 0x2c
  406fc2:	f000 fd75 	bl	407ab0 <__ssprint_r>
  406fc6:	2800      	cmp	r0, #0
  406fc8:	f040 80a5 	bne.w	407116 <_svfprintf_r+0x7de>
  406fcc:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  406fd0:	1b2d      	subs	r5, r5, r4
  406fd2:	2d00      	cmp	r5, #0
  406fd4:	dd34      	ble.n	407040 <_svfprintf_r+0x708>
  406fd6:	484b      	ldr	r0, [pc, #300]	; (407104 <_svfprintf_r+0x7cc>)
  406fd8:	2d10      	cmp	r5, #16
  406fda:	f8c8 0000 	str.w	r0, [r8]
  406fde:	dd19      	ble.n	407014 <_svfprintf_r+0x6dc>
  406fe0:	980c      	ldr	r0, [sp, #48]	; 0x30
  406fe2:	990d      	ldr	r1, [sp, #52]	; 0x34
  406fe4:	1c43      	adds	r3, r0, #1
  406fe6:	2210      	movs	r2, #16
  406fe8:	3110      	adds	r1, #16
  406fea:	2b07      	cmp	r3, #7
  406fec:	f8c8 2004 	str.w	r2, [r8, #4]
  406ff0:	910d      	str	r1, [sp, #52]	; 0x34
  406ff2:	930c      	str	r3, [sp, #48]	; 0x30
  406ff4:	dc02      	bgt.n	406ffc <_svfprintf_r+0x6c4>
  406ff6:	f108 0808 	add.w	r8, r8, #8
  406ffa:	e009      	b.n	407010 <_svfprintf_r+0x6d8>
  406ffc:	4658      	mov	r0, fp
  406ffe:	4649      	mov	r1, r9
  407000:	aa0b      	add	r2, sp, #44	; 0x2c
  407002:	f000 fd55 	bl	407ab0 <__ssprint_r>
  407006:	2800      	cmp	r0, #0
  407008:	f040 8085 	bne.w	407116 <_svfprintf_r+0x7de>
  40700c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  407010:	3d10      	subs	r5, #16
  407012:	e7e0      	b.n	406fd6 <_svfprintf_r+0x69e>
  407014:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407018:	f8c8 5004 	str.w	r5, [r8, #4]
  40701c:	1c51      	adds	r1, r2, #1
  40701e:	195d      	adds	r5, r3, r5
  407020:	2907      	cmp	r1, #7
  407022:	950d      	str	r5, [sp, #52]	; 0x34
  407024:	910c      	str	r1, [sp, #48]	; 0x30
  407026:	dc02      	bgt.n	40702e <_svfprintf_r+0x6f6>
  407028:	f108 0808 	add.w	r8, r8, #8
  40702c:	e008      	b.n	407040 <_svfprintf_r+0x708>
  40702e:	4658      	mov	r0, fp
  407030:	4649      	mov	r1, r9
  407032:	aa0b      	add	r2, sp, #44	; 0x2c
  407034:	f000 fd3c 	bl	407ab0 <__ssprint_r>
  407038:	2800      	cmp	r0, #0
  40703a:	d16c      	bne.n	407116 <_svfprintf_r+0x7de>
  40703c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  407040:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407042:	980d      	ldr	r0, [sp, #52]	; 0x34
  407044:	f8c8 4004 	str.w	r4, [r8, #4]
  407048:	1c5a      	adds	r2, r3, #1
  40704a:	1904      	adds	r4, r0, r4
  40704c:	2a07      	cmp	r2, #7
  40704e:	f8c8 a000 	str.w	sl, [r8]
  407052:	940d      	str	r4, [sp, #52]	; 0x34
  407054:	920c      	str	r2, [sp, #48]	; 0x30
  407056:	dc02      	bgt.n	40705e <_svfprintf_r+0x726>
  407058:	f108 0308 	add.w	r3, r8, #8
  40705c:	e007      	b.n	40706e <_svfprintf_r+0x736>
  40705e:	4658      	mov	r0, fp
  407060:	4649      	mov	r1, r9
  407062:	aa0b      	add	r2, sp, #44	; 0x2c
  407064:	f000 fd24 	bl	407ab0 <__ssprint_r>
  407068:	2800      	cmp	r0, #0
  40706a:	d154      	bne.n	407116 <_svfprintf_r+0x7de>
  40706c:	ab18      	add	r3, sp, #96	; 0x60
  40706e:	077a      	lsls	r2, r7, #29
  407070:	d40b      	bmi.n	40708a <_svfprintf_r+0x752>
  407072:	9804      	ldr	r0, [sp, #16]
  407074:	9b02      	ldr	r3, [sp, #8]
  407076:	9a03      	ldr	r2, [sp, #12]
  407078:	990d      	ldr	r1, [sp, #52]	; 0x34
  40707a:	4293      	cmp	r3, r2
  40707c:	bfac      	ite	ge
  40707e:	18c0      	addge	r0, r0, r3
  407080:	1880      	addlt	r0, r0, r2
  407082:	9004      	str	r0, [sp, #16]
  407084:	2900      	cmp	r1, #0
  407086:	d036      	beq.n	4070f6 <_svfprintf_r+0x7be>
  407088:	e02f      	b.n	4070ea <_svfprintf_r+0x7b2>
  40708a:	9c03      	ldr	r4, [sp, #12]
  40708c:	9902      	ldr	r1, [sp, #8]
  40708e:	1a64      	subs	r4, r4, r1
  407090:	2c00      	cmp	r4, #0
  407092:	ddee      	ble.n	407072 <_svfprintf_r+0x73a>
  407094:	481a      	ldr	r0, [pc, #104]	; (407100 <_svfprintf_r+0x7c8>)
  407096:	2c10      	cmp	r4, #16
  407098:	6018      	str	r0, [r3, #0]
  40709a:	dd15      	ble.n	4070c8 <_svfprintf_r+0x790>
  40709c:	990c      	ldr	r1, [sp, #48]	; 0x30
  40709e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4070a0:	2010      	movs	r0, #16
  4070a2:	6058      	str	r0, [r3, #4]
  4070a4:	1c48      	adds	r0, r1, #1
  4070a6:	3210      	adds	r2, #16
  4070a8:	2807      	cmp	r0, #7
  4070aa:	920d      	str	r2, [sp, #52]	; 0x34
  4070ac:	900c      	str	r0, [sp, #48]	; 0x30
  4070ae:	dc01      	bgt.n	4070b4 <_svfprintf_r+0x77c>
  4070b0:	3308      	adds	r3, #8
  4070b2:	e007      	b.n	4070c4 <_svfprintf_r+0x78c>
  4070b4:	4658      	mov	r0, fp
  4070b6:	4649      	mov	r1, r9
  4070b8:	aa0b      	add	r2, sp, #44	; 0x2c
  4070ba:	f000 fcf9 	bl	407ab0 <__ssprint_r>
  4070be:	2800      	cmp	r0, #0
  4070c0:	d129      	bne.n	407116 <_svfprintf_r+0x7de>
  4070c2:	ab18      	add	r3, sp, #96	; 0x60
  4070c4:	3c10      	subs	r4, #16
  4070c6:	e7e5      	b.n	407094 <_svfprintf_r+0x75c>
  4070c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4070ca:	605c      	str	r4, [r3, #4]
  4070cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4070ce:	1c51      	adds	r1, r2, #1
  4070d0:	191c      	adds	r4, r3, r4
  4070d2:	2907      	cmp	r1, #7
  4070d4:	940d      	str	r4, [sp, #52]	; 0x34
  4070d6:	910c      	str	r1, [sp, #48]	; 0x30
  4070d8:	ddcb      	ble.n	407072 <_svfprintf_r+0x73a>
  4070da:	4658      	mov	r0, fp
  4070dc:	4649      	mov	r1, r9
  4070de:	aa0b      	add	r2, sp, #44	; 0x2c
  4070e0:	f000 fce6 	bl	407ab0 <__ssprint_r>
  4070e4:	2800      	cmp	r0, #0
  4070e6:	d0c4      	beq.n	407072 <_svfprintf_r+0x73a>
  4070e8:	e015      	b.n	407116 <_svfprintf_r+0x7de>
  4070ea:	4658      	mov	r0, fp
  4070ec:	4649      	mov	r1, r9
  4070ee:	aa0b      	add	r2, sp, #44	; 0x2c
  4070f0:	f000 fcde 	bl	407ab0 <__ssprint_r>
  4070f4:	b978      	cbnz	r0, 407116 <_svfprintf_r+0x7de>
  4070f6:	2500      	movs	r5, #0
  4070f8:	950c      	str	r5, [sp, #48]	; 0x30
  4070fa:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  4070fe:	e444      	b.n	40698a <_svfprintf_r+0x52>
  407100:	0040869e 	.word	0x0040869e
  407104:	004086ae 	.word	0x004086ae
  407108:	980d      	ldr	r0, [sp, #52]	; 0x34
  40710a:	b120      	cbz	r0, 407116 <_svfprintf_r+0x7de>
  40710c:	4658      	mov	r0, fp
  40710e:	4649      	mov	r1, r9
  407110:	aa0b      	add	r2, sp, #44	; 0x2c
  407112:	f000 fccd 	bl	407ab0 <__ssprint_r>
  407116:	f8b9 200c 	ldrh.w	r2, [r9, #12]
  40711a:	9b04      	ldr	r3, [sp, #16]
  40711c:	f002 0140 	and.w	r1, r2, #64	; 0x40
  407120:	b208      	sxth	r0, r1
  407122:	2800      	cmp	r0, #0
  407124:	bf18      	it	ne
  407126:	f04f 33ff 	movne.w	r3, #4294967295
  40712a:	4618      	mov	r0, r3
  40712c:	b029      	add	sp, #164	; 0xa4
  40712e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407132:	bf00      	nop

00407134 <register_fini>:
  407134:	4b02      	ldr	r3, [pc, #8]	; (407140 <register_fini+0xc>)
  407136:	b113      	cbz	r3, 40713e <register_fini+0xa>
  407138:	4802      	ldr	r0, [pc, #8]	; (407144 <register_fini+0x10>)
  40713a:	f000 b805 	b.w	407148 <atexit>
  40713e:	4770      	bx	lr
  407140:	00000000 	.word	0x00000000
  407144:	00406815 	.word	0x00406815

00407148 <atexit>:
  407148:	4601      	mov	r1, r0
  40714a:	2000      	movs	r0, #0
  40714c:	4602      	mov	r2, r0
  40714e:	4603      	mov	r3, r0
  407150:	f7ff bb12 	b.w	406778 <__register_exitproc>

00407154 <_malloc_trim_r>:
  407154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407156:	4d23      	ldr	r5, [pc, #140]	; (4071e4 <_malloc_trim_r+0x90>)
  407158:	460e      	mov	r6, r1
  40715a:	4604      	mov	r4, r0
  40715c:	f000 fb28 	bl	4077b0 <__malloc_lock>
  407160:	68ab      	ldr	r3, [r5, #8]
  407162:	685f      	ldr	r7, [r3, #4]
  407164:	f027 0703 	bic.w	r7, r7, #3
  407168:	f607 70ef 	addw	r0, r7, #4079	; 0xfef
  40716c:	1b81      	subs	r1, r0, r6
  40716e:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
  407172:	f022 060f 	bic.w	r6, r2, #15
  407176:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
  40717a:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
  40717e:	da04      	bge.n	40718a <_malloc_trim_r+0x36>
  407180:	4620      	mov	r0, r4
  407182:	f000 fb16 	bl	4077b2 <__malloc_unlock>
  407186:	2000      	movs	r0, #0
  407188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40718a:	2100      	movs	r1, #0
  40718c:	4620      	mov	r0, r4
  40718e:	f000 fc7f 	bl	407a90 <_sbrk_r>
  407192:	68ab      	ldr	r3, [r5, #8]
  407194:	19d9      	adds	r1, r3, r7
  407196:	4288      	cmp	r0, r1
  407198:	d1f2      	bne.n	407180 <_malloc_trim_r+0x2c>
  40719a:	4271      	negs	r1, r6
  40719c:	4620      	mov	r0, r4
  40719e:	f000 fc77 	bl	407a90 <_sbrk_r>
  4071a2:	3001      	adds	r0, #1
  4071a4:	d110      	bne.n	4071c8 <_malloc_trim_r+0x74>
  4071a6:	2100      	movs	r1, #0
  4071a8:	4620      	mov	r0, r4
  4071aa:	f000 fc71 	bl	407a90 <_sbrk_r>
  4071ae:	68ab      	ldr	r3, [r5, #8]
  4071b0:	1ac2      	subs	r2, r0, r3
  4071b2:	2a0f      	cmp	r2, #15
  4071b4:	dde4      	ble.n	407180 <_malloc_trim_r+0x2c>
  4071b6:	490c      	ldr	r1, [pc, #48]	; (4071e8 <_malloc_trim_r+0x94>)
  4071b8:	6809      	ldr	r1, [r1, #0]
  4071ba:	1a40      	subs	r0, r0, r1
  4071bc:	490b      	ldr	r1, [pc, #44]	; (4071ec <_malloc_trim_r+0x98>)
  4071be:	f042 0201 	orr.w	r2, r2, #1
  4071c2:	6008      	str	r0, [r1, #0]
  4071c4:	605a      	str	r2, [r3, #4]
  4071c6:	e7db      	b.n	407180 <_malloc_trim_r+0x2c>
  4071c8:	4b08      	ldr	r3, [pc, #32]	; (4071ec <_malloc_trim_r+0x98>)
  4071ca:	68a8      	ldr	r0, [r5, #8]
  4071cc:	681a      	ldr	r2, [r3, #0]
  4071ce:	1bbf      	subs	r7, r7, r6
  4071d0:	f047 0701 	orr.w	r7, r7, #1
  4071d4:	6047      	str	r7, [r0, #4]
  4071d6:	1b96      	subs	r6, r2, r6
  4071d8:	4620      	mov	r0, r4
  4071da:	601e      	str	r6, [r3, #0]
  4071dc:	f000 fae9 	bl	4077b2 <__malloc_unlock>
  4071e0:	2001      	movs	r0, #1
  4071e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4071e4:	200008f0 	.word	0x200008f0
  4071e8:	20000cf8 	.word	0x20000cf8
  4071ec:	20001bf4 	.word	0x20001bf4

004071f0 <_free_r>:
  4071f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4071f2:	4606      	mov	r6, r0
  4071f4:	460d      	mov	r5, r1
  4071f6:	2900      	cmp	r1, #0
  4071f8:	f000 80a6 	beq.w	407348 <_free_r+0x158>
  4071fc:	f000 fad8 	bl	4077b0 <__malloc_lock>
  407200:	f855 cc04 	ldr.w	ip, [r5, #-4]
  407204:	4f51      	ldr	r7, [pc, #324]	; (40734c <_free_r+0x15c>)
  407206:	f1a5 0308 	sub.w	r3, r5, #8
  40720a:	f02c 0201 	bic.w	r2, ip, #1
  40720e:	189c      	adds	r4, r3, r2
  407210:	68b9      	ldr	r1, [r7, #8]
  407212:	6860      	ldr	r0, [r4, #4]
  407214:	428c      	cmp	r4, r1
  407216:	f020 0003 	bic.w	r0, r0, #3
  40721a:	f00c 0101 	and.w	r1, ip, #1
  40721e:	d11c      	bne.n	40725a <_free_r+0x6a>
  407220:	1882      	adds	r2, r0, r2
  407222:	b939      	cbnz	r1, 407234 <_free_r+0x44>
  407224:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407228:	1a5b      	subs	r3, r3, r1
  40722a:	1852      	adds	r2, r2, r1
  40722c:	6898      	ldr	r0, [r3, #8]
  40722e:	68d9      	ldr	r1, [r3, #12]
  407230:	60c1      	str	r1, [r0, #12]
  407232:	6088      	str	r0, [r1, #8]
  407234:	4845      	ldr	r0, [pc, #276]	; (40734c <_free_r+0x15c>)
  407236:	f042 0101 	orr.w	r1, r2, #1
  40723a:	6059      	str	r1, [r3, #4]
  40723c:	6083      	str	r3, [r0, #8]
  40723e:	4b44      	ldr	r3, [pc, #272]	; (407350 <_free_r+0x160>)
  407240:	6819      	ldr	r1, [r3, #0]
  407242:	428a      	cmp	r2, r1
  407244:	d304      	bcc.n	407250 <_free_r+0x60>
  407246:	4a43      	ldr	r2, [pc, #268]	; (407354 <_free_r+0x164>)
  407248:	4630      	mov	r0, r6
  40724a:	6811      	ldr	r1, [r2, #0]
  40724c:	f7ff ff82 	bl	407154 <_malloc_trim_r>
  407250:	4630      	mov	r0, r6
  407252:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  407256:	f000 baac 	b.w	4077b2 <__malloc_unlock>
  40725a:	6060      	str	r0, [r4, #4]
  40725c:	b959      	cbnz	r1, 407276 <_free_r+0x86>
  40725e:	f855 5c08 	ldr.w	r5, [r5, #-8]
  407262:	1b5b      	subs	r3, r3, r5
  407264:	1952      	adds	r2, r2, r5
  407266:	689d      	ldr	r5, [r3, #8]
  407268:	3708      	adds	r7, #8
  40726a:	42bd      	cmp	r5, r7
  40726c:	d005      	beq.n	40727a <_free_r+0x8a>
  40726e:	68df      	ldr	r7, [r3, #12]
  407270:	60ef      	str	r7, [r5, #12]
  407272:	60bd      	str	r5, [r7, #8]
  407274:	e002      	b.n	40727c <_free_r+0x8c>
  407276:	2100      	movs	r1, #0
  407278:	e000      	b.n	40727c <_free_r+0x8c>
  40727a:	2101      	movs	r1, #1
  40727c:	1825      	adds	r5, r4, r0
  40727e:	686d      	ldr	r5, [r5, #4]
  407280:	f015 0f01 	tst.w	r5, #1
  407284:	d10f      	bne.n	4072a6 <_free_r+0xb6>
  407286:	1812      	adds	r2, r2, r0
  407288:	b949      	cbnz	r1, 40729e <_free_r+0xae>
  40728a:	68a0      	ldr	r0, [r4, #8]
  40728c:	4d32      	ldr	r5, [pc, #200]	; (407358 <_free_r+0x168>)
  40728e:	42a8      	cmp	r0, r5
  407290:	d105      	bne.n	40729e <_free_r+0xae>
  407292:	60eb      	str	r3, [r5, #12]
  407294:	60ab      	str	r3, [r5, #8]
  407296:	60d8      	str	r0, [r3, #12]
  407298:	6098      	str	r0, [r3, #8]
  40729a:	2101      	movs	r1, #1
  40729c:	e003      	b.n	4072a6 <_free_r+0xb6>
  40729e:	68e0      	ldr	r0, [r4, #12]
  4072a0:	68a4      	ldr	r4, [r4, #8]
  4072a2:	60e0      	str	r0, [r4, #12]
  4072a4:	6084      	str	r4, [r0, #8]
  4072a6:	f042 0001 	orr.w	r0, r2, #1
  4072aa:	6058      	str	r0, [r3, #4]
  4072ac:	509a      	str	r2, [r3, r2]
  4072ae:	2900      	cmp	r1, #0
  4072b0:	d1ce      	bne.n	407250 <_free_r+0x60>
  4072b2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4072b6:	d20c      	bcs.n	4072d2 <_free_r+0xe2>
  4072b8:	4924      	ldr	r1, [pc, #144]	; (40734c <_free_r+0x15c>)
  4072ba:	08d2      	lsrs	r2, r2, #3
  4072bc:	1090      	asrs	r0, r2, #2
  4072be:	2401      	movs	r4, #1
  4072c0:	fa04 f400 	lsl.w	r4, r4, r0
  4072c4:	6848      	ldr	r0, [r1, #4]
  4072c6:	4320      	orrs	r0, r4
  4072c8:	6048      	str	r0, [r1, #4]
  4072ca:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  4072ce:	6881      	ldr	r1, [r0, #8]
  4072d0:	e035      	b.n	40733e <_free_r+0x14e>
  4072d2:	0a54      	lsrs	r4, r2, #9
  4072d4:	2c04      	cmp	r4, #4
  4072d6:	d802      	bhi.n	4072de <_free_r+0xee>
  4072d8:	0994      	lsrs	r4, r2, #6
  4072da:	3438      	adds	r4, #56	; 0x38
  4072dc:	e016      	b.n	40730c <_free_r+0x11c>
  4072de:	2c14      	cmp	r4, #20
  4072e0:	d801      	bhi.n	4072e6 <_free_r+0xf6>
  4072e2:	345b      	adds	r4, #91	; 0x5b
  4072e4:	e012      	b.n	40730c <_free_r+0x11c>
  4072e6:	2c54      	cmp	r4, #84	; 0x54
  4072e8:	d802      	bhi.n	4072f0 <_free_r+0x100>
  4072ea:	0b14      	lsrs	r4, r2, #12
  4072ec:	346e      	adds	r4, #110	; 0x6e
  4072ee:	e00d      	b.n	40730c <_free_r+0x11c>
  4072f0:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
  4072f4:	d802      	bhi.n	4072fc <_free_r+0x10c>
  4072f6:	0bd4      	lsrs	r4, r2, #15
  4072f8:	3477      	adds	r4, #119	; 0x77
  4072fa:	e007      	b.n	40730c <_free_r+0x11c>
  4072fc:	f240 5554 	movw	r5, #1364	; 0x554
  407300:	42ac      	cmp	r4, r5
  407302:	d802      	bhi.n	40730a <_free_r+0x11a>
  407304:	0c94      	lsrs	r4, r2, #18
  407306:	347c      	adds	r4, #124	; 0x7c
  407308:	e000      	b.n	40730c <_free_r+0x11c>
  40730a:	247e      	movs	r4, #126	; 0x7e
  40730c:	4d0f      	ldr	r5, [pc, #60]	; (40734c <_free_r+0x15c>)
  40730e:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
  407312:	6881      	ldr	r1, [r0, #8]
  407314:	4281      	cmp	r1, r0
  407316:	d10c      	bne.n	407332 <_free_r+0x142>
  407318:	6868      	ldr	r0, [r5, #4]
  40731a:	2201      	movs	r2, #1
  40731c:	10a4      	asrs	r4, r4, #2
  40731e:	fa02 f404 	lsl.w	r4, r2, r4
  407322:	ea44 0200 	orr.w	r2, r4, r0
  407326:	606a      	str	r2, [r5, #4]
  407328:	4608      	mov	r0, r1
  40732a:	e008      	b.n	40733e <_free_r+0x14e>
  40732c:	6889      	ldr	r1, [r1, #8]
  40732e:	4281      	cmp	r1, r0
  407330:	d004      	beq.n	40733c <_free_r+0x14c>
  407332:	684c      	ldr	r4, [r1, #4]
  407334:	f024 0403 	bic.w	r4, r4, #3
  407338:	42a2      	cmp	r2, r4
  40733a:	d3f7      	bcc.n	40732c <_free_r+0x13c>
  40733c:	68c8      	ldr	r0, [r1, #12]
  40733e:	60d8      	str	r0, [r3, #12]
  407340:	6099      	str	r1, [r3, #8]
  407342:	6083      	str	r3, [r0, #8]
  407344:	60cb      	str	r3, [r1, #12]
  407346:	e783      	b.n	407250 <_free_r+0x60>
  407348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40734a:	bf00      	nop
  40734c:	200008f0 	.word	0x200008f0
  407350:	20000cfc 	.word	0x20000cfc
  407354:	20001bf0 	.word	0x20001bf0
  407358:	200008f8 	.word	0x200008f8

0040735c <_malloc_r>:
  40735c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407360:	f101 040b 	add.w	r4, r1, #11
  407364:	2c16      	cmp	r4, #22
  407366:	4606      	mov	r6, r0
  407368:	d903      	bls.n	407372 <_malloc_r+0x16>
  40736a:	f034 0407 	bics.w	r4, r4, #7
  40736e:	d501      	bpl.n	407374 <_malloc_r+0x18>
  407370:	e002      	b.n	407378 <_malloc_r+0x1c>
  407372:	2410      	movs	r4, #16
  407374:	428c      	cmp	r4, r1
  407376:	d202      	bcs.n	40737e <_malloc_r+0x22>
  407378:	250c      	movs	r5, #12
  40737a:	6035      	str	r5, [r6, #0]
  40737c:	e1d9      	b.n	407732 <_malloc_r+0x3d6>
  40737e:	4630      	mov	r0, r6
  407380:	f000 fa16 	bl	4077b0 <__malloc_lock>
  407384:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
  407388:	d214      	bcs.n	4073b4 <_malloc_r+0x58>
  40738a:	4da0      	ldr	r5, [pc, #640]	; (40760c <_malloc_r+0x2b0>)
  40738c:	08e1      	lsrs	r1, r4, #3
  40738e:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
  407392:	68c5      	ldr	r5, [r0, #12]
  407394:	4285      	cmp	r5, r0
  407396:	d105      	bne.n	4073a4 <_malloc_r+0x48>
  407398:	f105 0308 	add.w	r3, r5, #8
  40739c:	696d      	ldr	r5, [r5, #20]
  40739e:	1c8a      	adds	r2, r1, #2
  4073a0:	429d      	cmp	r5, r3
  4073a2:	d044      	beq.n	40742e <_malloc_r+0xd2>
  4073a4:	68e8      	ldr	r0, [r5, #12]
  4073a6:	68a9      	ldr	r1, [r5, #8]
  4073a8:	686a      	ldr	r2, [r5, #4]
  4073aa:	60c8      	str	r0, [r1, #12]
  4073ac:	f022 0303 	bic.w	r3, r2, #3
  4073b0:	6081      	str	r1, [r0, #8]
  4073b2:	e059      	b.n	407468 <_malloc_r+0x10c>
  4073b4:	0a62      	lsrs	r2, r4, #9
  4073b6:	d101      	bne.n	4073bc <_malloc_r+0x60>
  4073b8:	08e2      	lsrs	r2, r4, #3
  4073ba:	e01b      	b.n	4073f4 <_malloc_r+0x98>
  4073bc:	2a04      	cmp	r2, #4
  4073be:	d802      	bhi.n	4073c6 <_malloc_r+0x6a>
  4073c0:	09a2      	lsrs	r2, r4, #6
  4073c2:	3238      	adds	r2, #56	; 0x38
  4073c4:	e016      	b.n	4073f4 <_malloc_r+0x98>
  4073c6:	2a14      	cmp	r2, #20
  4073c8:	d801      	bhi.n	4073ce <_malloc_r+0x72>
  4073ca:	325b      	adds	r2, #91	; 0x5b
  4073cc:	e012      	b.n	4073f4 <_malloc_r+0x98>
  4073ce:	2a54      	cmp	r2, #84	; 0x54
  4073d0:	d802      	bhi.n	4073d8 <_malloc_r+0x7c>
  4073d2:	0b22      	lsrs	r2, r4, #12
  4073d4:	326e      	adds	r2, #110	; 0x6e
  4073d6:	e00d      	b.n	4073f4 <_malloc_r+0x98>
  4073d8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4073dc:	d802      	bhi.n	4073e4 <_malloc_r+0x88>
  4073de:	0be2      	lsrs	r2, r4, #15
  4073e0:	3277      	adds	r2, #119	; 0x77
  4073e2:	e007      	b.n	4073f4 <_malloc_r+0x98>
  4073e4:	f240 5354 	movw	r3, #1364	; 0x554
  4073e8:	429a      	cmp	r2, r3
  4073ea:	d802      	bhi.n	4073f2 <_malloc_r+0x96>
  4073ec:	0ca2      	lsrs	r2, r4, #18
  4073ee:	327c      	adds	r2, #124	; 0x7c
  4073f0:	e000      	b.n	4073f4 <_malloc_r+0x98>
  4073f2:	227e      	movs	r2, #126	; 0x7e
  4073f4:	4885      	ldr	r0, [pc, #532]	; (40760c <_malloc_r+0x2b0>)
  4073f6:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
  4073fa:	68dd      	ldr	r5, [r3, #12]
  4073fc:	429d      	cmp	r5, r3
  4073fe:	d015      	beq.n	40742c <_malloc_r+0xd0>
  407400:	6869      	ldr	r1, [r5, #4]
  407402:	f021 0103 	bic.w	r1, r1, #3
  407406:	1b08      	subs	r0, r1, r4
  407408:	280f      	cmp	r0, #15
  40740a:	dd01      	ble.n	407410 <_malloc_r+0xb4>
  40740c:	3a01      	subs	r2, #1
  40740e:	e00d      	b.n	40742c <_malloc_r+0xd0>
  407410:	2800      	cmp	r0, #0
  407412:	db09      	blt.n	407428 <_malloc_r+0xcc>
  407414:	68eb      	ldr	r3, [r5, #12]
  407416:	68aa      	ldr	r2, [r5, #8]
  407418:	60d3      	str	r3, [r2, #12]
  40741a:	609a      	str	r2, [r3, #8]
  40741c:	186b      	adds	r3, r5, r1
  40741e:	685a      	ldr	r2, [r3, #4]
  407420:	f042 0001 	orr.w	r0, r2, #1
  407424:	6058      	str	r0, [r3, #4]
  407426:	e190      	b.n	40774a <_malloc_r+0x3ee>
  407428:	68ed      	ldr	r5, [r5, #12]
  40742a:	e7e7      	b.n	4073fc <_malloc_r+0xa0>
  40742c:	3201      	adds	r2, #1
  40742e:	4977      	ldr	r1, [pc, #476]	; (40760c <_malloc_r+0x2b0>)
  407430:	690d      	ldr	r5, [r1, #16]
  407432:	f101 0708 	add.w	r7, r1, #8
  407436:	42bd      	cmp	r5, r7
  407438:	d068      	beq.n	40750c <_malloc_r+0x1b0>
  40743a:	6868      	ldr	r0, [r5, #4]
  40743c:	f020 0303 	bic.w	r3, r0, #3
  407440:	1b18      	subs	r0, r3, r4
  407442:	280f      	cmp	r0, #15
  407444:	dd0c      	ble.n	407460 <_malloc_r+0x104>
  407446:	192b      	adds	r3, r5, r4
  407448:	614b      	str	r3, [r1, #20]
  40744a:	610b      	str	r3, [r1, #16]
  40744c:	f044 0401 	orr.w	r4, r4, #1
  407450:	f040 0101 	orr.w	r1, r0, #1
  407454:	606c      	str	r4, [r5, #4]
  407456:	60df      	str	r7, [r3, #12]
  407458:	609f      	str	r7, [r3, #8]
  40745a:	6059      	str	r1, [r3, #4]
  40745c:	5018      	str	r0, [r3, r0]
  40745e:	e174      	b.n	40774a <_malloc_r+0x3ee>
  407460:	2800      	cmp	r0, #0
  407462:	614f      	str	r7, [r1, #20]
  407464:	610f      	str	r7, [r1, #16]
  407466:	db01      	blt.n	40746c <_malloc_r+0x110>
  407468:	18eb      	adds	r3, r5, r3
  40746a:	e7d8      	b.n	40741e <_malloc_r+0xc2>
  40746c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407470:	d20f      	bcs.n	407492 <_malloc_r+0x136>
  407472:	08db      	lsrs	r3, r3, #3
  407474:	1098      	asrs	r0, r3, #2
  407476:	2701      	movs	r7, #1
  407478:	fa07 f700 	lsl.w	r7, r7, r0
  40747c:	6848      	ldr	r0, [r1, #4]
  40747e:	4307      	orrs	r7, r0
  407480:	604f      	str	r7, [r1, #4]
  407482:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  407486:	60e9      	str	r1, [r5, #12]
  407488:	688b      	ldr	r3, [r1, #8]
  40748a:	60ab      	str	r3, [r5, #8]
  40748c:	60dd      	str	r5, [r3, #12]
  40748e:	608d      	str	r5, [r1, #8]
  407490:	e03c      	b.n	40750c <_malloc_r+0x1b0>
  407492:	0a58      	lsrs	r0, r3, #9
  407494:	2804      	cmp	r0, #4
  407496:	d802      	bhi.n	40749e <_malloc_r+0x142>
  407498:	0998      	lsrs	r0, r3, #6
  40749a:	3038      	adds	r0, #56	; 0x38
  40749c:	e016      	b.n	4074cc <_malloc_r+0x170>
  40749e:	2814      	cmp	r0, #20
  4074a0:	d801      	bhi.n	4074a6 <_malloc_r+0x14a>
  4074a2:	305b      	adds	r0, #91	; 0x5b
  4074a4:	e012      	b.n	4074cc <_malloc_r+0x170>
  4074a6:	2854      	cmp	r0, #84	; 0x54
  4074a8:	d802      	bhi.n	4074b0 <_malloc_r+0x154>
  4074aa:	0b18      	lsrs	r0, r3, #12
  4074ac:	306e      	adds	r0, #110	; 0x6e
  4074ae:	e00d      	b.n	4074cc <_malloc_r+0x170>
  4074b0:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
  4074b4:	d802      	bhi.n	4074bc <_malloc_r+0x160>
  4074b6:	0bd8      	lsrs	r0, r3, #15
  4074b8:	3077      	adds	r0, #119	; 0x77
  4074ba:	e007      	b.n	4074cc <_malloc_r+0x170>
  4074bc:	f240 5754 	movw	r7, #1364	; 0x554
  4074c0:	42b8      	cmp	r0, r7
  4074c2:	d802      	bhi.n	4074ca <_malloc_r+0x16e>
  4074c4:	0c98      	lsrs	r0, r3, #18
  4074c6:	307c      	adds	r0, #124	; 0x7c
  4074c8:	e000      	b.n	4074cc <_malloc_r+0x170>
  4074ca:	207e      	movs	r0, #126	; 0x7e
  4074cc:	f8df e13c 	ldr.w	lr, [pc, #316]	; 40760c <_malloc_r+0x2b0>
  4074d0:	eb0e 07c0 	add.w	r7, lr, r0, lsl #3
  4074d4:	68b9      	ldr	r1, [r7, #8]
  4074d6:	42b9      	cmp	r1, r7
  4074d8:	d10e      	bne.n	4074f8 <_malloc_r+0x19c>
  4074da:	1087      	asrs	r7, r0, #2
  4074dc:	2301      	movs	r3, #1
  4074de:	fa03 f007 	lsl.w	r0, r3, r7
  4074e2:	f8de 7004 	ldr.w	r7, [lr, #4]
  4074e6:	ea40 0307 	orr.w	r3, r0, r7
  4074ea:	f8ce 3004 	str.w	r3, [lr, #4]
  4074ee:	4608      	mov	r0, r1
  4074f0:	e008      	b.n	407504 <_malloc_r+0x1a8>
  4074f2:	6889      	ldr	r1, [r1, #8]
  4074f4:	42b9      	cmp	r1, r7
  4074f6:	d004      	beq.n	407502 <_malloc_r+0x1a6>
  4074f8:	6848      	ldr	r0, [r1, #4]
  4074fa:	f020 0003 	bic.w	r0, r0, #3
  4074fe:	4283      	cmp	r3, r0
  407500:	d3f7      	bcc.n	4074f2 <_malloc_r+0x196>
  407502:	68c8      	ldr	r0, [r1, #12]
  407504:	60e8      	str	r0, [r5, #12]
  407506:	60a9      	str	r1, [r5, #8]
  407508:	60cd      	str	r5, [r1, #12]
  40750a:	6085      	str	r5, [r0, #8]
  40750c:	4f3f      	ldr	r7, [pc, #252]	; (40760c <_malloc_r+0x2b0>)
  40750e:	1095      	asrs	r5, r2, #2
  407510:	2001      	movs	r0, #1
  407512:	6879      	ldr	r1, [r7, #4]
  407514:	fa00 f305 	lsl.w	r3, r0, r5
  407518:	428b      	cmp	r3, r1
  40751a:	d85d      	bhi.n	4075d8 <_malloc_r+0x27c>
  40751c:	420b      	tst	r3, r1
  40751e:	d105      	bne.n	40752c <_malloc_r+0x1d0>
  407520:	f022 0203 	bic.w	r2, r2, #3
  407524:	005b      	lsls	r3, r3, #1
  407526:	3204      	adds	r2, #4
  407528:	420b      	tst	r3, r1
  40752a:	d0fb      	beq.n	407524 <_malloc_r+0x1c8>
  40752c:	4d37      	ldr	r5, [pc, #220]	; (40760c <_malloc_r+0x2b0>)
  40752e:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
  407532:	4677      	mov	r7, lr
  407534:	4610      	mov	r0, r2
  407536:	68fd      	ldr	r5, [r7, #12]
  407538:	42bd      	cmp	r5, r7
  40753a:	d02d      	beq.n	407598 <_malloc_r+0x23c>
  40753c:	6869      	ldr	r1, [r5, #4]
  40753e:	f021 0c03 	bic.w	ip, r1, #3
  407542:	ebc4 010c 	rsb	r1, r4, ip
  407546:	290f      	cmp	r1, #15
  407548:	dd13      	ble.n	407572 <_malloc_r+0x216>
  40754a:	192b      	adds	r3, r5, r4
  40754c:	f044 0401 	orr.w	r4, r4, #1
  407550:	68ea      	ldr	r2, [r5, #12]
  407552:	606c      	str	r4, [r5, #4]
  407554:	f855 0f08 	ldr.w	r0, [r5, #8]!
  407558:	5059      	str	r1, [r3, r1]
  40755a:	60c2      	str	r2, [r0, #12]
  40755c:	6090      	str	r0, [r2, #8]
  40755e:	4a2b      	ldr	r2, [pc, #172]	; (40760c <_malloc_r+0x2b0>)
  407560:	f041 0001 	orr.w	r0, r1, #1
  407564:	6153      	str	r3, [r2, #20]
  407566:	6113      	str	r3, [r2, #16]
  407568:	3208      	adds	r2, #8
  40756a:	60da      	str	r2, [r3, #12]
  40756c:	609a      	str	r2, [r3, #8]
  40756e:	6058      	str	r0, [r3, #4]
  407570:	e00c      	b.n	40758c <_malloc_r+0x230>
  407572:	2900      	cmp	r1, #0
  407574:	db0e      	blt.n	407594 <_malloc_r+0x238>
  407576:	eb05 000c 	add.w	r0, r5, ip
  40757a:	68e9      	ldr	r1, [r5, #12]
  40757c:	6842      	ldr	r2, [r0, #4]
  40757e:	f042 0301 	orr.w	r3, r2, #1
  407582:	6043      	str	r3, [r0, #4]
  407584:	f855 0f08 	ldr.w	r0, [r5, #8]!
  407588:	60c1      	str	r1, [r0, #12]
  40758a:	6088      	str	r0, [r1, #8]
  40758c:	4630      	mov	r0, r6
  40758e:	f000 f910 	bl	4077b2 <__malloc_unlock>
  407592:	e0de      	b.n	407752 <_malloc_r+0x3f6>
  407594:	68ed      	ldr	r5, [r5, #12]
  407596:	e7cf      	b.n	407538 <_malloc_r+0x1dc>
  407598:	3001      	adds	r0, #1
  40759a:	0781      	lsls	r1, r0, #30
  40759c:	f105 0708 	add.w	r7, r5, #8
  4075a0:	d1c9      	bne.n	407536 <_malloc_r+0x1da>
  4075a2:	4671      	mov	r1, lr
  4075a4:	0795      	lsls	r5, r2, #30
  4075a6:	d105      	bne.n	4075b4 <_malloc_r+0x258>
  4075a8:	4a18      	ldr	r2, [pc, #96]	; (40760c <_malloc_r+0x2b0>)
  4075aa:	6855      	ldr	r5, [r2, #4]
  4075ac:	ea25 0503 	bic.w	r5, r5, r3
  4075b0:	6055      	str	r5, [r2, #4]
  4075b2:	e005      	b.n	4075c0 <_malloc_r+0x264>
  4075b4:	f1a1 0708 	sub.w	r7, r1, #8
  4075b8:	6809      	ldr	r1, [r1, #0]
  4075ba:	3a01      	subs	r2, #1
  4075bc:	42b9      	cmp	r1, r7
  4075be:	d0f1      	beq.n	4075a4 <_malloc_r+0x248>
  4075c0:	4f12      	ldr	r7, [pc, #72]	; (40760c <_malloc_r+0x2b0>)
  4075c2:	687f      	ldr	r7, [r7, #4]
  4075c4:	005b      	lsls	r3, r3, #1
  4075c6:	42bb      	cmp	r3, r7
  4075c8:	d806      	bhi.n	4075d8 <_malloc_r+0x27c>
  4075ca:	b12b      	cbz	r3, 4075d8 <_malloc_r+0x27c>
  4075cc:	4602      	mov	r2, r0
  4075ce:	423b      	tst	r3, r7
  4075d0:	d1ac      	bne.n	40752c <_malloc_r+0x1d0>
  4075d2:	3204      	adds	r2, #4
  4075d4:	005b      	lsls	r3, r3, #1
  4075d6:	e7fa      	b.n	4075ce <_malloc_r+0x272>
  4075d8:	4b0c      	ldr	r3, [pc, #48]	; (40760c <_malloc_r+0x2b0>)
  4075da:	689f      	ldr	r7, [r3, #8]
  4075dc:	6878      	ldr	r0, [r7, #4]
  4075de:	f020 0903 	bic.w	r9, r0, #3
  4075e2:	45a1      	cmp	r9, r4
  4075e4:	4619      	mov	r1, r3
  4075e6:	d304      	bcc.n	4075f2 <_malloc_r+0x296>
  4075e8:	ebc4 0009 	rsb	r0, r4, r9
  4075ec:	280f      	cmp	r0, #15
  4075ee:	f300 80a2 	bgt.w	407736 <_malloc_r+0x3da>
  4075f2:	4a07      	ldr	r2, [pc, #28]	; (407610 <_malloc_r+0x2b4>)
  4075f4:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
  4075f8:	6815      	ldr	r5, [r2, #0]
  4075fa:	3301      	adds	r3, #1
  4075fc:	eb07 0a09 	add.w	sl, r7, r9
  407600:	eb04 0805 	add.w	r8, r4, r5
  407604:	d106      	bne.n	407614 <_malloc_r+0x2b8>
  407606:	f108 0810 	add.w	r8, r8, #16
  40760a:	e00b      	b.n	407624 <_malloc_r+0x2c8>
  40760c:	200008f0 	.word	0x200008f0
  407610:	20001bf0 	.word	0x20001bf0
  407614:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
  407618:	f100 010f 	add.w	r1, r0, #15
  40761c:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
  407620:	f022 080f 	bic.w	r8, r2, #15
  407624:	4630      	mov	r0, r6
  407626:	4641      	mov	r1, r8
  407628:	f000 fa32 	bl	407a90 <_sbrk_r>
  40762c:	1c42      	adds	r2, r0, #1
  40762e:	4605      	mov	r5, r0
  407630:	d071      	beq.n	407716 <_malloc_r+0x3ba>
  407632:	4550      	cmp	r0, sl
  407634:	d202      	bcs.n	40763c <_malloc_r+0x2e0>
  407636:	4b48      	ldr	r3, [pc, #288]	; (407758 <_malloc_r+0x3fc>)
  407638:	429f      	cmp	r7, r3
  40763a:	d16c      	bne.n	407716 <_malloc_r+0x3ba>
  40763c:	4847      	ldr	r0, [pc, #284]	; (40775c <_malloc_r+0x400>)
  40763e:	4a46      	ldr	r2, [pc, #280]	; (407758 <_malloc_r+0x3fc>)
  407640:	6841      	ldr	r1, [r0, #4]
  407642:	4555      	cmp	r5, sl
  407644:	eb08 0301 	add.w	r3, r8, r1
  407648:	6043      	str	r3, [r0, #4]
  40764a:	d107      	bne.n	40765c <_malloc_r+0x300>
  40764c:	0529      	lsls	r1, r5, #20
  40764e:	d105      	bne.n	40765c <_malloc_r+0x300>
  407650:	6895      	ldr	r5, [r2, #8]
  407652:	44c8      	add	r8, r9
  407654:	f048 0001 	orr.w	r0, r8, #1
  407658:	6068      	str	r0, [r5, #4]
  40765a:	e051      	b.n	407700 <_malloc_r+0x3a4>
  40765c:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
  407660:	1c42      	adds	r2, r0, #1
  407662:	d103      	bne.n	40766c <_malloc_r+0x310>
  407664:	4a3c      	ldr	r2, [pc, #240]	; (407758 <_malloc_r+0x3fc>)
  407666:	f8c2 5408 	str.w	r5, [r2, #1032]	; 0x408
  40766a:	e005      	b.n	407678 <_malloc_r+0x31c>
  40766c:	ebca 0a05 	rsb	sl, sl, r5
  407670:	eb03 010a 	add.w	r1, r3, sl
  407674:	4b39      	ldr	r3, [pc, #228]	; (40775c <_malloc_r+0x400>)
  407676:	6059      	str	r1, [r3, #4]
  407678:	f015 0007 	ands.w	r0, r5, #7
  40767c:	bf1c      	itt	ne
  40767e:	f1c0 0008 	rsbne	r0, r0, #8
  407682:	182d      	addne	r5, r5, r0
  407684:	eb05 0c08 	add.w	ip, r5, r8
  407688:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
  40768c:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
  407690:	eba1 581e 	sub.w	r8, r1, lr, lsr #20
  407694:	4641      	mov	r1, r8
  407696:	4630      	mov	r0, r6
  407698:	f000 f9fa 	bl	407a90 <_sbrk_r>
  40769c:	4a2f      	ldr	r2, [pc, #188]	; (40775c <_malloc_r+0x400>)
  40769e:	1c43      	adds	r3, r0, #1
  4076a0:	6853      	ldr	r3, [r2, #4]
  4076a2:	bf08      	it	eq
  4076a4:	f04f 0800 	moveq.w	r8, #0
  4076a8:	eb08 0103 	add.w	r1, r8, r3
  4076ac:	bf08      	it	eq
  4076ae:	4628      	moveq	r0, r5
  4076b0:	6051      	str	r1, [r2, #4]
  4076b2:	1b40      	subs	r0, r0, r5
  4076b4:	4a28      	ldr	r2, [pc, #160]	; (407758 <_malloc_r+0x3fc>)
  4076b6:	eb00 0308 	add.w	r3, r0, r8
  4076ba:	f043 0101 	orr.w	r1, r3, #1
  4076be:	4297      	cmp	r7, r2
  4076c0:	6095      	str	r5, [r2, #8]
  4076c2:	6069      	str	r1, [r5, #4]
  4076c4:	d01c      	beq.n	407700 <_malloc_r+0x3a4>
  4076c6:	f1b9 0f0f 	cmp.w	r9, #15
  4076ca:	d802      	bhi.n	4076d2 <_malloc_r+0x376>
  4076cc:	2201      	movs	r2, #1
  4076ce:	606a      	str	r2, [r5, #4]
  4076d0:	e021      	b.n	407716 <_malloc_r+0x3ba>
  4076d2:	687d      	ldr	r5, [r7, #4]
  4076d4:	f1a9 090c 	sub.w	r9, r9, #12
  4076d8:	f029 0907 	bic.w	r9, r9, #7
  4076dc:	eb07 0309 	add.w	r3, r7, r9
  4076e0:	f005 0201 	and.w	r2, r5, #1
  4076e4:	2105      	movs	r1, #5
  4076e6:	ea49 0002 	orr.w	r0, r9, r2
  4076ea:	f1b9 0f0f 	cmp.w	r9, #15
  4076ee:	6078      	str	r0, [r7, #4]
  4076f0:	6059      	str	r1, [r3, #4]
  4076f2:	6099      	str	r1, [r3, #8]
  4076f4:	d904      	bls.n	407700 <_malloc_r+0x3a4>
  4076f6:	4630      	mov	r0, r6
  4076f8:	f107 0108 	add.w	r1, r7, #8
  4076fc:	f7ff fd78 	bl	4071f0 <_free_r>
  407700:	4a16      	ldr	r2, [pc, #88]	; (40775c <_malloc_r+0x400>)
  407702:	6853      	ldr	r3, [r2, #4]
  407704:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  407706:	6b15      	ldr	r5, [r2, #48]	; 0x30
  407708:	428b      	cmp	r3, r1
  40770a:	bf88      	it	hi
  40770c:	62d3      	strhi	r3, [r2, #44]	; 0x2c
  40770e:	42ab      	cmp	r3, r5
  407710:	bf84      	itt	hi
  407712:	4d12      	ldrhi	r5, [pc, #72]	; (40775c <_malloc_r+0x400>)
  407714:	632b      	strhi	r3, [r5, #48]	; 0x30
  407716:	4810      	ldr	r0, [pc, #64]	; (407758 <_malloc_r+0x3fc>)
  407718:	6882      	ldr	r2, [r0, #8]
  40771a:	6853      	ldr	r3, [r2, #4]
  40771c:	f023 0103 	bic.w	r1, r3, #3
  407720:	42a1      	cmp	r1, r4
  407722:	ebc4 0001 	rsb	r0, r4, r1
  407726:	d301      	bcc.n	40772c <_malloc_r+0x3d0>
  407728:	280f      	cmp	r0, #15
  40772a:	dc04      	bgt.n	407736 <_malloc_r+0x3da>
  40772c:	4630      	mov	r0, r6
  40772e:	f000 f840 	bl	4077b2 <__malloc_unlock>
  407732:	2500      	movs	r5, #0
  407734:	e00d      	b.n	407752 <_malloc_r+0x3f6>
  407736:	4a08      	ldr	r2, [pc, #32]	; (407758 <_malloc_r+0x3fc>)
  407738:	6895      	ldr	r5, [r2, #8]
  40773a:	f044 0301 	orr.w	r3, r4, #1
  40773e:	192c      	adds	r4, r5, r4
  407740:	f040 0101 	orr.w	r1, r0, #1
  407744:	606b      	str	r3, [r5, #4]
  407746:	6094      	str	r4, [r2, #8]
  407748:	6061      	str	r1, [r4, #4]
  40774a:	4630      	mov	r0, r6
  40774c:	f000 f831 	bl	4077b2 <__malloc_unlock>
  407750:	3508      	adds	r5, #8
  407752:	4628      	mov	r0, r5
  407754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407758:	200008f0 	.word	0x200008f0
  40775c:	20001bf0 	.word	0x20001bf0

00407760 <memchr>:
  407760:	b510      	push	{r4, lr}
  407762:	b2c9      	uxtb	r1, r1
  407764:	4603      	mov	r3, r0
  407766:	1882      	adds	r2, r0, r2
  407768:	4293      	cmp	r3, r2
  40776a:	4618      	mov	r0, r3
  40776c:	d004      	beq.n	407778 <memchr+0x18>
  40776e:	7804      	ldrb	r4, [r0, #0]
  407770:	3301      	adds	r3, #1
  407772:	428c      	cmp	r4, r1
  407774:	d1f8      	bne.n	407768 <memchr+0x8>
  407776:	e000      	b.n	40777a <memchr+0x1a>
  407778:	2000      	movs	r0, #0
  40777a:	bd10      	pop	{r4, pc}

0040777c <memmove>:
  40777c:	4281      	cmp	r1, r0
  40777e:	b570      	push	{r4, r5, r6, lr}
  407780:	d20e      	bcs.n	4077a0 <memmove+0x24>
  407782:	188c      	adds	r4, r1, r2
  407784:	42a0      	cmp	r0, r4
  407786:	d20b      	bcs.n	4077a0 <memmove+0x24>
  407788:	1885      	adds	r5, r0, r2
  40778a:	4613      	mov	r3, r2
  40778c:	f113 33ff 	adds.w	r3, r3, #4294967295
  407790:	d305      	bcc.n	40779e <memmove+0x22>
  407792:	4251      	negs	r1, r2
  407794:	1866      	adds	r6, r4, r1
  407796:	1869      	adds	r1, r5, r1
  407798:	5cf6      	ldrb	r6, [r6, r3]
  40779a:	54ce      	strb	r6, [r1, r3]
  40779c:	e7f6      	b.n	40778c <memmove+0x10>
  40779e:	bd70      	pop	{r4, r5, r6, pc}
  4077a0:	2300      	movs	r3, #0
  4077a2:	4293      	cmp	r3, r2
  4077a4:	d003      	beq.n	4077ae <memmove+0x32>
  4077a6:	5ccc      	ldrb	r4, [r1, r3]
  4077a8:	54c4      	strb	r4, [r0, r3]
  4077aa:	3301      	adds	r3, #1
  4077ac:	e7f9      	b.n	4077a2 <memmove+0x26>
  4077ae:	bd70      	pop	{r4, r5, r6, pc}

004077b0 <__malloc_lock>:
  4077b0:	4770      	bx	lr

004077b2 <__malloc_unlock>:
  4077b2:	4770      	bx	lr

004077b4 <_realloc_r>:
  4077b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4077b8:	4681      	mov	r9, r0
  4077ba:	4616      	mov	r6, r2
  4077bc:	460c      	mov	r4, r1
  4077be:	b921      	cbnz	r1, 4077ca <_realloc_r+0x16>
  4077c0:	4611      	mov	r1, r2
  4077c2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4077c6:	f7ff bdc9 	b.w	40735c <_malloc_r>
  4077ca:	f7ff fff1 	bl	4077b0 <__malloc_lock>
  4077ce:	f106 070b 	add.w	r7, r6, #11
  4077d2:	f854 5c04 	ldr.w	r5, [r4, #-4]
  4077d6:	2f16      	cmp	r7, #22
  4077d8:	f1a4 0b08 	sub.w	fp, r4, #8
  4077dc:	f025 0803 	bic.w	r8, r5, #3
  4077e0:	d903      	bls.n	4077ea <_realloc_r+0x36>
  4077e2:	f037 0707 	bics.w	r7, r7, #7
  4077e6:	d501      	bpl.n	4077ec <_realloc_r+0x38>
  4077e8:	e002      	b.n	4077f0 <_realloc_r+0x3c>
  4077ea:	2710      	movs	r7, #16
  4077ec:	42b7      	cmp	r7, r6
  4077ee:	d204      	bcs.n	4077fa <_realloc_r+0x46>
  4077f0:	200c      	movs	r0, #12
  4077f2:	f8c9 0000 	str.w	r0, [r9]
  4077f6:	2600      	movs	r6, #0
  4077f8:	e145      	b.n	407a86 <_realloc_r+0x2d2>
  4077fa:	45b8      	cmp	r8, r7
  4077fc:	f280 811a 	bge.w	407a34 <_realloc_r+0x280>
  407800:	4aa2      	ldr	r2, [pc, #648]	; (407a8c <_realloc_r+0x2d8>)
  407802:	6891      	ldr	r1, [r2, #8]
  407804:	eb0b 0308 	add.w	r3, fp, r8
  407808:	428b      	cmp	r3, r1
  40780a:	d006      	beq.n	40781a <_realloc_r+0x66>
  40780c:	6858      	ldr	r0, [r3, #4]
  40780e:	f020 0201 	bic.w	r2, r0, #1
  407812:	1898      	adds	r0, r3, r2
  407814:	6842      	ldr	r2, [r0, #4]
  407816:	07d0      	lsls	r0, r2, #31
  407818:	d426      	bmi.n	407868 <_realloc_r+0xb4>
  40781a:	685a      	ldr	r2, [r3, #4]
  40781c:	428b      	cmp	r3, r1
  40781e:	f022 0003 	bic.w	r0, r2, #3
  407822:	eb00 0a08 	add.w	sl, r0, r8
  407826:	d118      	bne.n	40785a <_realloc_r+0xa6>
  407828:	f107 0210 	add.w	r2, r7, #16
  40782c:	4592      	cmp	sl, r2
  40782e:	db1d      	blt.n	40786c <_realloc_r+0xb8>
  407830:	eb0b 0507 	add.w	r5, fp, r7
  407834:	ebc7 0a0a 	rsb	sl, r7, sl
  407838:	f04a 0101 	orr.w	r1, sl, #1
  40783c:	6069      	str	r1, [r5, #4]
  40783e:	f854 2c04 	ldr.w	r2, [r4, #-4]
  407842:	4e92      	ldr	r6, [pc, #584]	; (407a8c <_realloc_r+0x2d8>)
  407844:	f002 0301 	and.w	r3, r2, #1
  407848:	431f      	orrs	r7, r3
  40784a:	60b5      	str	r5, [r6, #8]
  40784c:	f844 7c04 	str.w	r7, [r4, #-4]
  407850:	4648      	mov	r0, r9
  407852:	f7ff ffae 	bl	4077b2 <__malloc_unlock>
  407856:	4626      	mov	r6, r4
  407858:	e115      	b.n	407a86 <_realloc_r+0x2d2>
  40785a:	45ba      	cmp	sl, r7
  40785c:	db06      	blt.n	40786c <_realloc_r+0xb8>
  40785e:	68dd      	ldr	r5, [r3, #12]
  407860:	689e      	ldr	r6, [r3, #8]
  407862:	60f5      	str	r5, [r6, #12]
  407864:	60ae      	str	r6, [r5, #8]
  407866:	e0e6      	b.n	407a36 <_realloc_r+0x282>
  407868:	2000      	movs	r0, #0
  40786a:	4603      	mov	r3, r0
  40786c:	07ea      	lsls	r2, r5, #31
  40786e:	f100 8091 	bmi.w	407994 <_realloc_r+0x1e0>
  407872:	f854 5c08 	ldr.w	r5, [r4, #-8]
  407876:	ebc5 050b 	rsb	r5, r5, fp
  40787a:	686a      	ldr	r2, [r5, #4]
  40787c:	f022 0203 	bic.w	r2, r2, #3
  407880:	2b00      	cmp	r3, #0
  407882:	d051      	beq.n	407928 <_realloc_r+0x174>
  407884:	eb02 0a08 	add.w	sl, r2, r8
  407888:	428b      	cmp	r3, r1
  40788a:	4482      	add	sl, r0
  40788c:	d145      	bne.n	40791a <_realloc_r+0x166>
  40788e:	f107 0310 	add.w	r3, r7, #16
  407892:	459a      	cmp	sl, r3
  407894:	db48      	blt.n	407928 <_realloc_r+0x174>
  407896:	462e      	mov	r6, r5
  407898:	68e9      	ldr	r1, [r5, #12]
  40789a:	f856 3f08 	ldr.w	r3, [r6, #8]!
  40789e:	f1a8 0204 	sub.w	r2, r8, #4
  4078a2:	2a24      	cmp	r2, #36	; 0x24
  4078a4:	60d9      	str	r1, [r3, #12]
  4078a6:	608b      	str	r3, [r1, #8]
  4078a8:	d825      	bhi.n	4078f6 <_realloc_r+0x142>
  4078aa:	2a13      	cmp	r2, #19
  4078ac:	d91b      	bls.n	4078e6 <_realloc_r+0x132>
  4078ae:	6821      	ldr	r1, [r4, #0]
  4078b0:	60a9      	str	r1, [r5, #8]
  4078b2:	6863      	ldr	r3, [r4, #4]
  4078b4:	2a1b      	cmp	r2, #27
  4078b6:	60eb      	str	r3, [r5, #12]
  4078b8:	d803      	bhi.n	4078c2 <_realloc_r+0x10e>
  4078ba:	f105 0010 	add.w	r0, r5, #16
  4078be:	3408      	adds	r4, #8
  4078c0:	e012      	b.n	4078e8 <_realloc_r+0x134>
  4078c2:	68a0      	ldr	r0, [r4, #8]
  4078c4:	6128      	str	r0, [r5, #16]
  4078c6:	68e1      	ldr	r1, [r4, #12]
  4078c8:	2a24      	cmp	r2, #36	; 0x24
  4078ca:	6169      	str	r1, [r5, #20]
  4078cc:	d003      	beq.n	4078d6 <_realloc_r+0x122>
  4078ce:	f105 0018 	add.w	r0, r5, #24
  4078d2:	3410      	adds	r4, #16
  4078d4:	e008      	b.n	4078e8 <_realloc_r+0x134>
  4078d6:	6922      	ldr	r2, [r4, #16]
  4078d8:	61aa      	str	r2, [r5, #24]
  4078da:	6963      	ldr	r3, [r4, #20]
  4078dc:	f105 0020 	add.w	r0, r5, #32
  4078e0:	61eb      	str	r3, [r5, #28]
  4078e2:	3418      	adds	r4, #24
  4078e4:	e000      	b.n	4078e8 <_realloc_r+0x134>
  4078e6:	4630      	mov	r0, r6
  4078e8:	6821      	ldr	r1, [r4, #0]
  4078ea:	6001      	str	r1, [r0, #0]
  4078ec:	6862      	ldr	r2, [r4, #4]
  4078ee:	6042      	str	r2, [r0, #4]
  4078f0:	68a3      	ldr	r3, [r4, #8]
  4078f2:	6083      	str	r3, [r0, #8]
  4078f4:	e003      	b.n	4078fe <_realloc_r+0x14a>
  4078f6:	4630      	mov	r0, r6
  4078f8:	4621      	mov	r1, r4
  4078fa:	f7ff ff3f 	bl	40777c <memmove>
  4078fe:	19e8      	adds	r0, r5, r7
  407900:	ebc7 0a0a 	rsb	sl, r7, sl
  407904:	f04a 0201 	orr.w	r2, sl, #1
  407908:	6042      	str	r2, [r0, #4]
  40790a:	686b      	ldr	r3, [r5, #4]
  40790c:	495f      	ldr	r1, [pc, #380]	; (407a8c <_realloc_r+0x2d8>)
  40790e:	6088      	str	r0, [r1, #8]
  407910:	f003 0001 	and.w	r0, r3, #1
  407914:	4307      	orrs	r7, r0
  407916:	606f      	str	r7, [r5, #4]
  407918:	e088      	b.n	407a2c <_realloc_r+0x278>
  40791a:	45ba      	cmp	sl, r7
  40791c:	db04      	blt.n	407928 <_realloc_r+0x174>
  40791e:	68d9      	ldr	r1, [r3, #12]
  407920:	6898      	ldr	r0, [r3, #8]
  407922:	60c1      	str	r1, [r0, #12]
  407924:	6088      	str	r0, [r1, #8]
  407926:	e003      	b.n	407930 <_realloc_r+0x17c>
  407928:	eb02 0a08 	add.w	sl, r2, r8
  40792c:	45ba      	cmp	sl, r7
  40792e:	db31      	blt.n	407994 <_realloc_r+0x1e0>
  407930:	4628      	mov	r0, r5
  407932:	68eb      	ldr	r3, [r5, #12]
  407934:	f850 1f08 	ldr.w	r1, [r0, #8]!
  407938:	f1a8 0204 	sub.w	r2, r8, #4
  40793c:	2a24      	cmp	r2, #36	; 0x24
  40793e:	60cb      	str	r3, [r1, #12]
  407940:	6099      	str	r1, [r3, #8]
  407942:	d823      	bhi.n	40798c <_realloc_r+0x1d8>
  407944:	2a13      	cmp	r2, #19
  407946:	d91a      	bls.n	40797e <_realloc_r+0x1ca>
  407948:	6820      	ldr	r0, [r4, #0]
  40794a:	60a8      	str	r0, [r5, #8]
  40794c:	6866      	ldr	r6, [r4, #4]
  40794e:	2a1b      	cmp	r2, #27
  407950:	60ee      	str	r6, [r5, #12]
  407952:	d803      	bhi.n	40795c <_realloc_r+0x1a8>
  407954:	f105 0010 	add.w	r0, r5, #16
  407958:	3408      	adds	r4, #8
  40795a:	e010      	b.n	40797e <_realloc_r+0x1ca>
  40795c:	68a3      	ldr	r3, [r4, #8]
  40795e:	612b      	str	r3, [r5, #16]
  407960:	68e1      	ldr	r1, [r4, #12]
  407962:	2a24      	cmp	r2, #36	; 0x24
  407964:	6169      	str	r1, [r5, #20]
  407966:	d003      	beq.n	407970 <_realloc_r+0x1bc>
  407968:	f105 0018 	add.w	r0, r5, #24
  40796c:	3410      	adds	r4, #16
  40796e:	e006      	b.n	40797e <_realloc_r+0x1ca>
  407970:	6922      	ldr	r2, [r4, #16]
  407972:	61aa      	str	r2, [r5, #24]
  407974:	6960      	ldr	r0, [r4, #20]
  407976:	3418      	adds	r4, #24
  407978:	61e8      	str	r0, [r5, #28]
  40797a:	f105 0020 	add.w	r0, r5, #32
  40797e:	6826      	ldr	r6, [r4, #0]
  407980:	6006      	str	r6, [r0, #0]
  407982:	6863      	ldr	r3, [r4, #4]
  407984:	6043      	str	r3, [r0, #4]
  407986:	68a1      	ldr	r1, [r4, #8]
  407988:	6081      	str	r1, [r0, #8]
  40798a:	e055      	b.n	407a38 <_realloc_r+0x284>
  40798c:	4621      	mov	r1, r4
  40798e:	f7ff fef5 	bl	40777c <memmove>
  407992:	e051      	b.n	407a38 <_realloc_r+0x284>
  407994:	4631      	mov	r1, r6
  407996:	4648      	mov	r0, r9
  407998:	f7ff fce0 	bl	40735c <_malloc_r>
  40799c:	4606      	mov	r6, r0
  40799e:	2800      	cmp	r0, #0
  4079a0:	d044      	beq.n	407a2c <_realloc_r+0x278>
  4079a2:	f854 1c04 	ldr.w	r1, [r4, #-4]
  4079a6:	f021 0301 	bic.w	r3, r1, #1
  4079aa:	f1a0 0208 	sub.w	r2, r0, #8
  4079ae:	eb0b 0103 	add.w	r1, fp, r3
  4079b2:	428a      	cmp	r2, r1
  4079b4:	d106      	bne.n	4079c4 <_realloc_r+0x210>
  4079b6:	f850 6c04 	ldr.w	r6, [r0, #-4]
  4079ba:	f026 0503 	bic.w	r5, r6, #3
  4079be:	eb05 0a08 	add.w	sl, r5, r8
  4079c2:	e038      	b.n	407a36 <_realloc_r+0x282>
  4079c4:	f1a8 0204 	sub.w	r2, r8, #4
  4079c8:	2a24      	cmp	r2, #36	; 0x24
  4079ca:	d828      	bhi.n	407a1e <_realloc_r+0x26a>
  4079cc:	2a13      	cmp	r2, #19
  4079ce:	d91e      	bls.n	407a0e <_realloc_r+0x25a>
  4079d0:	6823      	ldr	r3, [r4, #0]
  4079d2:	6003      	str	r3, [r0, #0]
  4079d4:	6861      	ldr	r1, [r4, #4]
  4079d6:	2a1b      	cmp	r2, #27
  4079d8:	6041      	str	r1, [r0, #4]
  4079da:	d804      	bhi.n	4079e6 <_realloc_r+0x232>
  4079dc:	f100 0008 	add.w	r0, r0, #8
  4079e0:	f104 0208 	add.w	r2, r4, #8
  4079e4:	e014      	b.n	407a10 <_realloc_r+0x25c>
  4079e6:	68a0      	ldr	r0, [r4, #8]
  4079e8:	60b0      	str	r0, [r6, #8]
  4079ea:	68e3      	ldr	r3, [r4, #12]
  4079ec:	2a24      	cmp	r2, #36	; 0x24
  4079ee:	60f3      	str	r3, [r6, #12]
  4079f0:	d004      	beq.n	4079fc <_realloc_r+0x248>
  4079f2:	f106 0010 	add.w	r0, r6, #16
  4079f6:	f104 0210 	add.w	r2, r4, #16
  4079fa:	e009      	b.n	407a10 <_realloc_r+0x25c>
  4079fc:	6922      	ldr	r2, [r4, #16]
  4079fe:	6132      	str	r2, [r6, #16]
  407a00:	6961      	ldr	r1, [r4, #20]
  407a02:	f106 0018 	add.w	r0, r6, #24
  407a06:	6171      	str	r1, [r6, #20]
  407a08:	f104 0218 	add.w	r2, r4, #24
  407a0c:	e000      	b.n	407a10 <_realloc_r+0x25c>
  407a0e:	4622      	mov	r2, r4
  407a10:	6813      	ldr	r3, [r2, #0]
  407a12:	6003      	str	r3, [r0, #0]
  407a14:	6851      	ldr	r1, [r2, #4]
  407a16:	6041      	str	r1, [r0, #4]
  407a18:	6892      	ldr	r2, [r2, #8]
  407a1a:	6082      	str	r2, [r0, #8]
  407a1c:	e002      	b.n	407a24 <_realloc_r+0x270>
  407a1e:	4621      	mov	r1, r4
  407a20:	f7ff feac 	bl	40777c <memmove>
  407a24:	4648      	mov	r0, r9
  407a26:	4621      	mov	r1, r4
  407a28:	f7ff fbe2 	bl	4071f0 <_free_r>
  407a2c:	4648      	mov	r0, r9
  407a2e:	f7ff fec0 	bl	4077b2 <__malloc_unlock>
  407a32:	e028      	b.n	407a86 <_realloc_r+0x2d2>
  407a34:	46c2      	mov	sl, r8
  407a36:	465d      	mov	r5, fp
  407a38:	ebc7 000a 	rsb	r0, r7, sl
  407a3c:	280f      	cmp	r0, #15
  407a3e:	686a      	ldr	r2, [r5, #4]
  407a40:	d911      	bls.n	407a66 <_realloc_r+0x2b2>
  407a42:	19e9      	adds	r1, r5, r7
  407a44:	f002 0601 	and.w	r6, r2, #1
  407a48:	4337      	orrs	r7, r6
  407a4a:	f040 0301 	orr.w	r3, r0, #1
  407a4e:	1808      	adds	r0, r1, r0
  407a50:	606f      	str	r7, [r5, #4]
  407a52:	604b      	str	r3, [r1, #4]
  407a54:	6842      	ldr	r2, [r0, #4]
  407a56:	f042 0601 	orr.w	r6, r2, #1
  407a5a:	6046      	str	r6, [r0, #4]
  407a5c:	3108      	adds	r1, #8
  407a5e:	4648      	mov	r0, r9
  407a60:	f7ff fbc6 	bl	4071f0 <_free_r>
  407a64:	e00a      	b.n	407a7c <_realloc_r+0x2c8>
  407a66:	f002 0601 	and.w	r6, r2, #1
  407a6a:	eb05 010a 	add.w	r1, r5, sl
  407a6e:	ea4a 0306 	orr.w	r3, sl, r6
  407a72:	606b      	str	r3, [r5, #4]
  407a74:	6848      	ldr	r0, [r1, #4]
  407a76:	f040 0201 	orr.w	r2, r0, #1
  407a7a:	604a      	str	r2, [r1, #4]
  407a7c:	4648      	mov	r0, r9
  407a7e:	f7ff fe98 	bl	4077b2 <__malloc_unlock>
  407a82:	f105 0608 	add.w	r6, r5, #8
  407a86:	4630      	mov	r0, r6
  407a88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407a8c:	200008f0 	.word	0x200008f0

00407a90 <_sbrk_r>:
  407a90:	b538      	push	{r3, r4, r5, lr}
  407a92:	4c06      	ldr	r4, [pc, #24]	; (407aac <_sbrk_r+0x1c>)
  407a94:	2300      	movs	r3, #0
  407a96:	4605      	mov	r5, r0
  407a98:	4608      	mov	r0, r1
  407a9a:	6023      	str	r3, [r4, #0]
  407a9c:	f7fd f8b4 	bl	404c08 <_sbrk>
  407aa0:	1c43      	adds	r3, r0, #1
  407aa2:	d102      	bne.n	407aaa <_sbrk_r+0x1a>
  407aa4:	6821      	ldr	r1, [r4, #0]
  407aa6:	b101      	cbz	r1, 407aaa <_sbrk_r+0x1a>
  407aa8:	6029      	str	r1, [r5, #0]
  407aaa:	bd38      	pop	{r3, r4, r5, pc}
  407aac:	20001eb0 	.word	0x20001eb0

00407ab0 <__ssprint_r>:
  407ab0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407ab4:	4607      	mov	r7, r0
  407ab6:	6890      	ldr	r0, [r2, #8]
  407ab8:	f8d2 8000 	ldr.w	r8, [r2]
  407abc:	460c      	mov	r4, r1
  407abe:	4615      	mov	r5, r2
  407ac0:	b908      	cbnz	r0, 407ac6 <__ssprint_r+0x16>
  407ac2:	6050      	str	r0, [r2, #4]
  407ac4:	e06f      	b.n	407ba6 <__ssprint_r+0xf6>
  407ac6:	f04f 0b00 	mov.w	fp, #0
  407aca:	465e      	mov	r6, fp
  407acc:	b936      	cbnz	r6, 407adc <__ssprint_r+0x2c>
  407ace:	f8d8 b000 	ldr.w	fp, [r8]
  407ad2:	f8d8 6004 	ldr.w	r6, [r8, #4]
  407ad6:	f108 0808 	add.w	r8, r8, #8
  407ada:	e7f7      	b.n	407acc <__ssprint_r+0x1c>
  407adc:	68a3      	ldr	r3, [r4, #8]
  407ade:	429e      	cmp	r6, r3
  407ae0:	d34c      	bcc.n	407b7c <__ssprint_r+0xcc>
  407ae2:	89a2      	ldrh	r2, [r4, #12]
  407ae4:	f412 6f90 	tst.w	r2, #1152	; 0x480
  407ae8:	d046      	beq.n	407b78 <__ssprint_r+0xc8>
  407aea:	6823      	ldr	r3, [r4, #0]
  407aec:	6960      	ldr	r0, [r4, #20]
  407aee:	6921      	ldr	r1, [r4, #16]
  407af0:	f04f 0a03 	mov.w	sl, #3
  407af4:	ebc1 0903 	rsb	r9, r1, r3
  407af8:	fb0a f300 	mul.w	r3, sl, r0
  407afc:	2002      	movs	r0, #2
  407afe:	fb93 faf0 	sdiv	sl, r3, r0
  407b02:	f402 6280 	and.w	r2, r2, #1024	; 0x400
  407b06:	f109 0301 	add.w	r3, r9, #1
  407b0a:	1998      	adds	r0, r3, r6
  407b0c:	b213      	sxth	r3, r2
  407b0e:	4582      	cmp	sl, r0
  407b10:	bf38      	it	cc
  407b12:	4682      	movcc	sl, r0
  407b14:	4638      	mov	r0, r7
  407b16:	b183      	cbz	r3, 407b3a <__ssprint_r+0x8a>
  407b18:	4651      	mov	r1, sl
  407b1a:	f7ff fc1f 	bl	40735c <_malloc_r>
  407b1e:	b1a8      	cbz	r0, 407b4c <__ssprint_r+0x9c>
  407b20:	6921      	ldr	r1, [r4, #16]
  407b22:	9001      	str	r0, [sp, #4]
  407b24:	464a      	mov	r2, r9
  407b26:	f7fe feb1 	bl	40688c <memcpy>
  407b2a:	89a0      	ldrh	r0, [r4, #12]
  407b2c:	f420 6290 	bic.w	r2, r0, #1152	; 0x480
  407b30:	f042 0180 	orr.w	r1, r2, #128	; 0x80
  407b34:	81a1      	strh	r1, [r4, #12]
  407b36:	9901      	ldr	r1, [sp, #4]
  407b38:	e014      	b.n	407b64 <__ssprint_r+0xb4>
  407b3a:	4652      	mov	r2, sl
  407b3c:	f7ff fe3a 	bl	4077b4 <_realloc_r>
  407b40:	4601      	mov	r1, r0
  407b42:	b978      	cbnz	r0, 407b64 <__ssprint_r+0xb4>
  407b44:	4638      	mov	r0, r7
  407b46:	6921      	ldr	r1, [r4, #16]
  407b48:	f7ff fb52 	bl	4071f0 <_free_r>
  407b4c:	89a3      	ldrh	r3, [r4, #12]
  407b4e:	200c      	movs	r0, #12
  407b50:	2100      	movs	r1, #0
  407b52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
  407b56:	6038      	str	r0, [r7, #0]
  407b58:	81a2      	strh	r2, [r4, #12]
  407b5a:	f04f 30ff 	mov.w	r0, #4294967295
  407b5e:	60a9      	str	r1, [r5, #8]
  407b60:	6069      	str	r1, [r5, #4]
  407b62:	e020      	b.n	407ba6 <__ssprint_r+0xf6>
  407b64:	eb01 0309 	add.w	r3, r1, r9
  407b68:	ebc9 000a 	rsb	r0, r9, sl
  407b6c:	6023      	str	r3, [r4, #0]
  407b6e:	6121      	str	r1, [r4, #16]
  407b70:	f8c4 a014 	str.w	sl, [r4, #20]
  407b74:	4633      	mov	r3, r6
  407b76:	60a0      	str	r0, [r4, #8]
  407b78:	429e      	cmp	r6, r3
  407b7a:	d200      	bcs.n	407b7e <__ssprint_r+0xce>
  407b7c:	4633      	mov	r3, r6
  407b7e:	461a      	mov	r2, r3
  407b80:	4659      	mov	r1, fp
  407b82:	6820      	ldr	r0, [r4, #0]
  407b84:	9301      	str	r3, [sp, #4]
  407b86:	f7ff fdf9 	bl	40777c <memmove>
  407b8a:	68a2      	ldr	r2, [r4, #8]
  407b8c:	9901      	ldr	r1, [sp, #4]
  407b8e:	6823      	ldr	r3, [r4, #0]
  407b90:	1a50      	subs	r0, r2, r1
  407b92:	185a      	adds	r2, r3, r1
  407b94:	68a9      	ldr	r1, [r5, #8]
  407b96:	60a0      	str	r0, [r4, #8]
  407b98:	1b8e      	subs	r6, r1, r6
  407b9a:	6022      	str	r2, [r4, #0]
  407b9c:	60ae      	str	r6, [r5, #8]
  407b9e:	2e00      	cmp	r6, #0
  407ba0:	d195      	bne.n	407ace <__ssprint_r+0x1e>
  407ba2:	606e      	str	r6, [r5, #4]
  407ba4:	4630      	mov	r0, r6
  407ba6:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407baa <_svfiprintf_r>:
  407baa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407bae:	461e      	mov	r6, r3
  407bb0:	898b      	ldrh	r3, [r1, #12]
  407bb2:	4689      	mov	r9, r1
  407bb4:	f003 0180 	and.w	r1, r3, #128	; 0x80
  407bb8:	4614      	mov	r4, r2
  407bba:	b20a      	sxth	r2, r1
  407bbc:	b0a9      	sub	sp, #164	; 0xa4
  407bbe:	4683      	mov	fp, r0
  407bc0:	b19a      	cbz	r2, 407bea <_svfiprintf_r+0x40>
  407bc2:	f8d9 3010 	ldr.w	r3, [r9, #16]
  407bc6:	b983      	cbnz	r3, 407bea <_svfiprintf_r+0x40>
  407bc8:	2140      	movs	r1, #64	; 0x40
  407bca:	f7ff fbc7 	bl	40735c <_malloc_r>
  407bce:	f8c9 0000 	str.w	r0, [r9]
  407bd2:	f8c9 0010 	str.w	r0, [r9, #16]
  407bd6:	b928      	cbnz	r0, 407be4 <_svfiprintf_r+0x3a>
  407bd8:	220c      	movs	r2, #12
  407bda:	f8cb 2000 	str.w	r2, [fp]
  407bde:	f04f 30ff 	mov.w	r0, #4294967295
  407be2:	e3db      	b.n	40839c <_svfiprintf_r+0x7f2>
  407be4:	2040      	movs	r0, #64	; 0x40
  407be6:	f8c9 0014 	str.w	r0, [r9, #20]
  407bea:	2100      	movs	r1, #0
  407bec:	ad18      	add	r5, sp, #96	; 0x60
  407bee:	950b      	str	r5, [sp, #44]	; 0x2c
  407bf0:	910d      	str	r1, [sp, #52]	; 0x34
  407bf2:	910c      	str	r1, [sp, #48]	; 0x30
  407bf4:	9401      	str	r4, [sp, #4]
  407bf6:	9105      	str	r1, [sp, #20]
  407bf8:	9104      	str	r1, [sp, #16]
  407bfa:	46a8      	mov	r8, r5
  407bfc:	9b01      	ldr	r3, [sp, #4]
  407bfe:	461c      	mov	r4, r3
  407c00:	f813 2b01 	ldrb.w	r2, [r3], #1
  407c04:	b91a      	cbnz	r2, 407c0e <_svfiprintf_r+0x64>
  407c06:	9801      	ldr	r0, [sp, #4]
  407c08:	1a25      	subs	r5, r4, r0
  407c0a:	d103      	bne.n	407c14 <_svfiprintf_r+0x6a>
  407c0c:	e01d      	b.n	407c4a <_svfiprintf_r+0xa0>
  407c0e:	2a25      	cmp	r2, #37	; 0x25
  407c10:	d1f5      	bne.n	407bfe <_svfiprintf_r+0x54>
  407c12:	e7f8      	b.n	407c06 <_svfiprintf_r+0x5c>
  407c14:	9a01      	ldr	r2, [sp, #4]
  407c16:	990d      	ldr	r1, [sp, #52]	; 0x34
  407c18:	e888 0024 	stmia.w	r8, {r2, r5}
  407c1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407c1e:	1c50      	adds	r0, r2, #1
  407c20:	194b      	adds	r3, r1, r5
  407c22:	2807      	cmp	r0, #7
  407c24:	930d      	str	r3, [sp, #52]	; 0x34
  407c26:	900c      	str	r0, [sp, #48]	; 0x30
  407c28:	dc02      	bgt.n	407c30 <_svfiprintf_r+0x86>
  407c2a:	f108 0808 	add.w	r8, r8, #8
  407c2e:	e009      	b.n	407c44 <_svfiprintf_r+0x9a>
  407c30:	4658      	mov	r0, fp
  407c32:	4649      	mov	r1, r9
  407c34:	aa0b      	add	r2, sp, #44	; 0x2c
  407c36:	f7ff ff3b 	bl	407ab0 <__ssprint_r>
  407c3a:	2800      	cmp	r0, #0
  407c3c:	f040 83a3 	bne.w	408386 <_svfiprintf_r+0x7dc>
  407c40:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  407c44:	9904      	ldr	r1, [sp, #16]
  407c46:	194b      	adds	r3, r1, r5
  407c48:	9304      	str	r3, [sp, #16]
  407c4a:	7822      	ldrb	r2, [r4, #0]
  407c4c:	2a00      	cmp	r2, #0
  407c4e:	f000 8393 	beq.w	408378 <_svfiprintf_r+0x7ce>
  407c52:	2200      	movs	r2, #0
  407c54:	3401      	adds	r4, #1
  407c56:	9401      	str	r4, [sp, #4]
  407c58:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
  407c5c:	f04f 3cff 	mov.w	ip, #4294967295
  407c60:	9203      	str	r2, [sp, #12]
  407c62:	4617      	mov	r7, r2
  407c64:	9801      	ldr	r0, [sp, #4]
  407c66:	f810 3b01 	ldrb.w	r3, [r0], #1
  407c6a:	9001      	str	r0, [sp, #4]
  407c6c:	2b63      	cmp	r3, #99	; 0x63
  407c6e:	f000 80b3 	beq.w	407dd8 <_svfiprintf_r+0x22e>
  407c72:	dc33      	bgt.n	407cdc <_svfiprintf_r+0x132>
  407c74:	2b39      	cmp	r3, #57	; 0x39
  407c76:	dc1a      	bgt.n	407cae <_svfiprintf_r+0x104>
  407c78:	2b31      	cmp	r3, #49	; 0x31
  407c7a:	f280 8091 	bge.w	407da0 <_svfiprintf_r+0x1f6>
  407c7e:	2b2b      	cmp	r3, #43	; 0x2b
  407c80:	d101      	bne.n	407c86 <_svfiprintf_r+0xdc>
  407c82:	461a      	mov	r2, r3
  407c84:	e7ee      	b.n	407c64 <_svfiprintf_r+0xba>
  407c86:	dc0a      	bgt.n	407c9e <_svfiprintf_r+0xf4>
  407c88:	2b23      	cmp	r3, #35	; 0x23
  407c8a:	d055      	beq.n	407d38 <_svfiprintf_r+0x18e>
  407c8c:	2b2a      	cmp	r3, #42	; 0x2a
  407c8e:	d056      	beq.n	407d3e <_svfiprintf_r+0x194>
  407c90:	2b20      	cmp	r3, #32
  407c92:	f040 81f6 	bne.w	408082 <_svfiprintf_r+0x4d8>
  407c96:	2a00      	cmp	r2, #0
  407c98:	bf08      	it	eq
  407c9a:	2220      	moveq	r2, #32
  407c9c:	e7e2      	b.n	407c64 <_svfiprintf_r+0xba>
  407c9e:	2b2e      	cmp	r3, #46	; 0x2e
  407ca0:	d058      	beq.n	407d54 <_svfiprintf_r+0x1aa>
  407ca2:	2b30      	cmp	r3, #48	; 0x30
  407ca4:	d079      	beq.n	407d9a <_svfiprintf_r+0x1f0>
  407ca6:	2b2d      	cmp	r3, #45	; 0x2d
  407ca8:	f040 81eb 	bne.w	408082 <_svfiprintf_r+0x4d8>
  407cac:	e04f      	b.n	407d4e <_svfiprintf_r+0x1a4>
  407cae:	2b4f      	cmp	r3, #79	; 0x4f
  407cb0:	f000 80de 	beq.w	407e70 <_svfiprintf_r+0x2c6>
  407cb4:	dc07      	bgt.n	407cc6 <_svfiprintf_r+0x11c>
  407cb6:	2b44      	cmp	r3, #68	; 0x44
  407cb8:	f040 81e3 	bne.w	408082 <_svfiprintf_r+0x4d8>
  407cbc:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
  407cc0:	f047 0710 	orr.w	r7, r7, #16
  407cc4:	e090      	b.n	407de8 <_svfiprintf_r+0x23e>
  407cc6:	2b55      	cmp	r3, #85	; 0x55
  407cc8:	f000 811f 	beq.w	407f0a <_svfiprintf_r+0x360>
  407ccc:	2b58      	cmp	r3, #88	; 0x58
  407cce:	f040 81d8 	bne.w	408082 <_svfiprintf_r+0x4d8>
  407cd2:	4daf      	ldr	r5, [pc, #700]	; (407f90 <_svfiprintf_r+0x3e6>)
  407cd4:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
  407cd8:	9505      	str	r5, [sp, #20]
  407cda:	e131      	b.n	407f40 <_svfiprintf_r+0x396>
  407cdc:	2b6f      	cmp	r3, #111	; 0x6f
  407cde:	f000 80c9 	beq.w	407e74 <_svfiprintf_r+0x2ca>
  407ce2:	dc10      	bgt.n	407d06 <_svfiprintf_r+0x15c>
  407ce4:	2b69      	cmp	r3, #105	; 0x69
  407ce6:	d024      	beq.n	407d32 <_svfiprintf_r+0x188>
  407ce8:	dc07      	bgt.n	407cfa <_svfiprintf_r+0x150>
  407cea:	2b64      	cmp	r3, #100	; 0x64
  407cec:	d021      	beq.n	407d32 <_svfiprintf_r+0x188>
  407cee:	2b68      	cmp	r3, #104	; 0x68
  407cf0:	f040 81c7 	bne.w	408082 <_svfiprintf_r+0x4d8>
  407cf4:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  407cf8:	e7b4      	b.n	407c64 <_svfiprintf_r+0xba>
  407cfa:	2b6c      	cmp	r3, #108	; 0x6c
  407cfc:	d05f      	beq.n	407dbe <_svfiprintf_r+0x214>
  407cfe:	2b6e      	cmp	r3, #110	; 0x6e
  407d00:	f040 81bf 	bne.w	408082 <_svfiprintf_r+0x4d8>
  407d04:	e096      	b.n	407e34 <_svfiprintf_r+0x28a>
  407d06:	2b73      	cmp	r3, #115	; 0x73
  407d08:	f000 80df 	beq.w	407eca <_svfiprintf_r+0x320>
  407d0c:	dc06      	bgt.n	407d1c <_svfiprintf_r+0x172>
  407d0e:	2b70      	cmp	r3, #112	; 0x70
  407d10:	f000 80cd 	beq.w	407eae <_svfiprintf_r+0x304>
  407d14:	2b71      	cmp	r3, #113	; 0x71
  407d16:	f040 81b4 	bne.w	408082 <_svfiprintf_r+0x4d8>
  407d1a:	e05a      	b.n	407dd2 <_svfiprintf_r+0x228>
  407d1c:	2b75      	cmp	r3, #117	; 0x75
  407d1e:	f000 80f6 	beq.w	407f0e <_svfiprintf_r+0x364>
  407d22:	2b78      	cmp	r3, #120	; 0x78
  407d24:	f040 81ad 	bne.w	408082 <_svfiprintf_r+0x4d8>
  407d28:	4d9a      	ldr	r5, [pc, #616]	; (407f94 <_svfiprintf_r+0x3ea>)
  407d2a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
  407d2e:	9505      	str	r5, [sp, #20]
  407d30:	e106      	b.n	407f40 <_svfiprintf_r+0x396>
  407d32:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
  407d36:	e057      	b.n	407de8 <_svfiprintf_r+0x23e>
  407d38:	f047 0701 	orr.w	r7, r7, #1
  407d3c:	e792      	b.n	407c64 <_svfiprintf_r+0xba>
  407d3e:	1d33      	adds	r3, r6, #4
  407d40:	6836      	ldr	r6, [r6, #0]
  407d42:	2e00      	cmp	r6, #0
  407d44:	9603      	str	r6, [sp, #12]
  407d46:	da15      	bge.n	407d74 <_svfiprintf_r+0x1ca>
  407d48:	4270      	negs	r0, r6
  407d4a:	9003      	str	r0, [sp, #12]
  407d4c:	461e      	mov	r6, r3
  407d4e:	f047 0704 	orr.w	r7, r7, #4
  407d52:	e787      	b.n	407c64 <_svfiprintf_r+0xba>
  407d54:	9901      	ldr	r1, [sp, #4]
  407d56:	f811 3b01 	ldrb.w	r3, [r1], #1
  407d5a:	2b2a      	cmp	r3, #42	; 0x2a
  407d5c:	9101      	str	r1, [sp, #4]
  407d5e:	d10b      	bne.n	407d78 <_svfiprintf_r+0x1ce>
  407d60:	f8d6 c000 	ldr.w	ip, [r6]
  407d64:	1d33      	adds	r3, r6, #4
  407d66:	f1bc 0f00 	cmp.w	ip, #0
  407d6a:	da03      	bge.n	407d74 <_svfiprintf_r+0x1ca>
  407d6c:	461e      	mov	r6, r3
  407d6e:	f04f 3cff 	mov.w	ip, #4294967295
  407d72:	e777      	b.n	407c64 <_svfiprintf_r+0xba>
  407d74:	461e      	mov	r6, r3
  407d76:	e775      	b.n	407c64 <_svfiprintf_r+0xba>
  407d78:	f04f 0c00 	mov.w	ip, #0
  407d7c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  407d80:	2809      	cmp	r0, #9
  407d82:	d807      	bhi.n	407d94 <_svfiprintf_r+0x1ea>
  407d84:	9901      	ldr	r1, [sp, #4]
  407d86:	230a      	movs	r3, #10
  407d88:	fb03 0c0c 	mla	ip, r3, ip, r0
  407d8c:	f811 3b01 	ldrb.w	r3, [r1], #1
  407d90:	9101      	str	r1, [sp, #4]
  407d92:	e7f3      	b.n	407d7c <_svfiprintf_r+0x1d2>
  407d94:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
  407d98:	e768      	b.n	407c6c <_svfiprintf_r+0xc2>
  407d9a:	f047 0780 	orr.w	r7, r7, #128	; 0x80
  407d9e:	e761      	b.n	407c64 <_svfiprintf_r+0xba>
  407da0:	9801      	ldr	r0, [sp, #4]
  407da2:	2100      	movs	r1, #0
  407da4:	3b30      	subs	r3, #48	; 0x30
  407da6:	240a      	movs	r4, #10
  407da8:	fb04 3101 	mla	r1, r4, r1, r3
  407dac:	f810 3b01 	ldrb.w	r3, [r0], #1
  407db0:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
  407db4:	2c09      	cmp	r4, #9
  407db6:	9001      	str	r0, [sp, #4]
  407db8:	d9f4      	bls.n	407da4 <_svfiprintf_r+0x1fa>
  407dba:	9103      	str	r1, [sp, #12]
  407dbc:	e756      	b.n	407c6c <_svfiprintf_r+0xc2>
  407dbe:	9901      	ldr	r1, [sp, #4]
  407dc0:	780b      	ldrb	r3, [r1, #0]
  407dc2:	2b6c      	cmp	r3, #108	; 0x6c
  407dc4:	d102      	bne.n	407dcc <_svfiprintf_r+0x222>
  407dc6:	1c48      	adds	r0, r1, #1
  407dc8:	9001      	str	r0, [sp, #4]
  407dca:	e002      	b.n	407dd2 <_svfiprintf_r+0x228>
  407dcc:	f047 0710 	orr.w	r7, r7, #16
  407dd0:	e748      	b.n	407c64 <_svfiprintf_r+0xba>
  407dd2:	f047 0720 	orr.w	r7, r7, #32
  407dd6:	e745      	b.n	407c64 <_svfiprintf_r+0xba>
  407dd8:	6832      	ldr	r2, [r6, #0]
  407dda:	2500      	movs	r5, #0
  407ddc:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
  407de0:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
  407de4:	3604      	adds	r6, #4
  407de6:	e156      	b.n	408096 <_svfiprintf_r+0x4ec>
  407de8:	06ba      	lsls	r2, r7, #26
  407dea:	d507      	bpl.n	407dfc <_svfiprintf_r+0x252>
  407dec:	3607      	adds	r6, #7
  407dee:	f026 0507 	bic.w	r5, r6, #7
  407df2:	f105 0608 	add.w	r6, r5, #8
  407df6:	e9d5 4500 	ldrd	r4, r5, [r5]
  407dfa:	e00f      	b.n	407e1c <_svfiprintf_r+0x272>
  407dfc:	f017 0f10 	tst.w	r7, #16
  407e00:	f106 0104 	add.w	r1, r6, #4
  407e04:	d001      	beq.n	407e0a <_svfiprintf_r+0x260>
  407e06:	6832      	ldr	r2, [r6, #0]
  407e08:	e005      	b.n	407e16 <_svfiprintf_r+0x26c>
  407e0a:	f017 0f40 	tst.w	r7, #64	; 0x40
  407e0e:	6832      	ldr	r2, [r6, #0]
  407e10:	d001      	beq.n	407e16 <_svfiprintf_r+0x26c>
  407e12:	b214      	sxth	r4, r2
  407e14:	e000      	b.n	407e18 <_svfiprintf_r+0x26e>
  407e16:	4614      	mov	r4, r2
  407e18:	17e5      	asrs	r5, r4, #31
  407e1a:	460e      	mov	r6, r1
  407e1c:	2c00      	cmp	r4, #0
  407e1e:	f175 0200 	sbcs.w	r2, r5, #0
  407e22:	f280 80b9 	bge.w	407f98 <_svfiprintf_r+0x3ee>
  407e26:	232d      	movs	r3, #45	; 0x2d
  407e28:	4264      	negs	r4, r4
  407e2a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  407e2e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
  407e32:	e0b1      	b.n	407f98 <_svfiprintf_r+0x3ee>
  407e34:	f017 0f20 	tst.w	r7, #32
  407e38:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
  407e3c:	f106 0204 	add.w	r2, r6, #4
  407e40:	d005      	beq.n	407e4e <_svfiprintf_r+0x2a4>
  407e42:	9c04      	ldr	r4, [sp, #16]
  407e44:	6835      	ldr	r5, [r6, #0]
  407e46:	17e0      	asrs	r0, r4, #31
  407e48:	602c      	str	r4, [r5, #0]
  407e4a:	6068      	str	r0, [r5, #4]
  407e4c:	e004      	b.n	407e58 <_svfiprintf_r+0x2ae>
  407e4e:	06fb      	lsls	r3, r7, #27
  407e50:	d504      	bpl.n	407e5c <_svfiprintf_r+0x2b2>
  407e52:	6833      	ldr	r3, [r6, #0]
  407e54:	9904      	ldr	r1, [sp, #16]
  407e56:	6019      	str	r1, [r3, #0]
  407e58:	4616      	mov	r6, r2
  407e5a:	e6cf      	b.n	407bfc <_svfiprintf_r+0x52>
  407e5c:	6830      	ldr	r0, [r6, #0]
  407e5e:	9c04      	ldr	r4, [sp, #16]
  407e60:	f017 0f40 	tst.w	r7, #64	; 0x40
  407e64:	f106 0604 	add.w	r6, r6, #4
  407e68:	bf14      	ite	ne
  407e6a:	8004      	strhne	r4, [r0, #0]
  407e6c:	6004      	streq	r4, [r0, #0]
  407e6e:	e6c5      	b.n	407bfc <_svfiprintf_r+0x52>
  407e70:	f047 0710 	orr.w	r7, r7, #16
  407e74:	f017 0020 	ands.w	r0, r7, #32
  407e78:	d008      	beq.n	407e8c <_svfiprintf_r+0x2e2>
  407e7a:	1df3      	adds	r3, r6, #7
  407e7c:	f023 0507 	bic.w	r5, r3, #7
  407e80:	f105 0608 	add.w	r6, r5, #8
  407e84:	e9d5 4500 	ldrd	r4, r5, [r5]
  407e88:	2000      	movs	r0, #0
  407e8a:	e07d      	b.n	407f88 <_svfiprintf_r+0x3de>
  407e8c:	f017 0110 	ands.w	r1, r7, #16
  407e90:	f106 0204 	add.w	r2, r6, #4
  407e94:	d106      	bne.n	407ea4 <_svfiprintf_r+0x2fa>
  407e96:	f017 0040 	ands.w	r0, r7, #64	; 0x40
  407e9a:	d003      	beq.n	407ea4 <_svfiprintf_r+0x2fa>
  407e9c:	8834      	ldrh	r4, [r6, #0]
  407e9e:	2500      	movs	r5, #0
  407ea0:	4616      	mov	r6, r2
  407ea2:	e7f1      	b.n	407e88 <_svfiprintf_r+0x2de>
  407ea4:	6836      	ldr	r6, [r6, #0]
  407ea6:	2500      	movs	r5, #0
  407ea8:	4634      	mov	r4, r6
  407eaa:	4616      	mov	r6, r2
  407eac:	e06c      	b.n	407f88 <_svfiprintf_r+0x3de>
  407eae:	4b39      	ldr	r3, [pc, #228]	; (407f94 <_svfiprintf_r+0x3ea>)
  407eb0:	6834      	ldr	r4, [r6, #0]
  407eb2:	9305      	str	r3, [sp, #20]
  407eb4:	2130      	movs	r1, #48	; 0x30
  407eb6:	2278      	movs	r2, #120	; 0x78
  407eb8:	2500      	movs	r5, #0
  407eba:	f047 0702 	orr.w	r7, r7, #2
  407ebe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  407ec2:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
  407ec6:	3604      	adds	r6, #4
  407ec8:	e05d      	b.n	407f86 <_svfiprintf_r+0x3dc>
  407eca:	4631      	mov	r1, r6
  407ecc:	2500      	movs	r5, #0
  407ece:	f8d1 a000 	ldr.w	sl, [r1]
  407ed2:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
  407ed6:	3604      	adds	r6, #4
  407ed8:	45ac      	cmp	ip, r5
  407eda:	4650      	mov	r0, sl
  407edc:	db11      	blt.n	407f02 <_svfiprintf_r+0x358>
  407ede:	4662      	mov	r2, ip
  407ee0:	4629      	mov	r1, r5
  407ee2:	f8cd c000 	str.w	ip, [sp]
  407ee6:	f7ff fc3b 	bl	407760 <memchr>
  407eea:	f8dd c000 	ldr.w	ip, [sp]
  407eee:	2800      	cmp	r0, #0
  407ef0:	f000 80d5 	beq.w	40809e <_svfiprintf_r+0x4f4>
  407ef4:	ebca 0400 	rsb	r4, sl, r0
  407ef8:	4564      	cmp	r4, ip
  407efa:	f340 80d2 	ble.w	4080a2 <_svfiprintf_r+0x4f8>
  407efe:	4664      	mov	r4, ip
  407f00:	e0cf      	b.n	4080a2 <_svfiprintf_r+0x4f8>
  407f02:	f7fe fd11 	bl	406928 <strlen>
  407f06:	4604      	mov	r4, r0
  407f08:	e0cb      	b.n	4080a2 <_svfiprintf_r+0x4f8>
  407f0a:	f047 0710 	orr.w	r7, r7, #16
  407f0e:	06bd      	lsls	r5, r7, #26
  407f10:	d507      	bpl.n	407f22 <_svfiprintf_r+0x378>
  407f12:	1df0      	adds	r0, r6, #7
  407f14:	f020 0407 	bic.w	r4, r0, #7
  407f18:	f104 0608 	add.w	r6, r4, #8
  407f1c:	e9d4 4500 	ldrd	r4, r5, [r4]
  407f20:	e00c      	b.n	407f3c <_svfiprintf_r+0x392>
  407f22:	f017 0f10 	tst.w	r7, #16
  407f26:	f106 0304 	add.w	r3, r6, #4
  407f2a:	d103      	bne.n	407f34 <_svfiprintf_r+0x38a>
  407f2c:	067c      	lsls	r4, r7, #25
  407f2e:	d501      	bpl.n	407f34 <_svfiprintf_r+0x38a>
  407f30:	8834      	ldrh	r4, [r6, #0]
  407f32:	e001      	b.n	407f38 <_svfiprintf_r+0x38e>
  407f34:	6835      	ldr	r5, [r6, #0]
  407f36:	462c      	mov	r4, r5
  407f38:	2500      	movs	r5, #0
  407f3a:	461e      	mov	r6, r3
  407f3c:	2001      	movs	r0, #1
  407f3e:	e023      	b.n	407f88 <_svfiprintf_r+0x3de>
  407f40:	06b8      	lsls	r0, r7, #26
  407f42:	d507      	bpl.n	407f54 <_svfiprintf_r+0x3aa>
  407f44:	1df4      	adds	r4, r6, #7
  407f46:	f024 0107 	bic.w	r1, r4, #7
  407f4a:	f101 0608 	add.w	r6, r1, #8
  407f4e:	e9d1 4500 	ldrd	r4, r5, [r1]
  407f52:	e00c      	b.n	407f6e <_svfiprintf_r+0x3c4>
  407f54:	f017 0f10 	tst.w	r7, #16
  407f58:	f106 0004 	add.w	r0, r6, #4
  407f5c:	d103      	bne.n	407f66 <_svfiprintf_r+0x3bc>
  407f5e:	0679      	lsls	r1, r7, #25
  407f60:	d501      	bpl.n	407f66 <_svfiprintf_r+0x3bc>
  407f62:	8834      	ldrh	r4, [r6, #0]
  407f64:	e001      	b.n	407f6a <_svfiprintf_r+0x3c0>
  407f66:	6836      	ldr	r6, [r6, #0]
  407f68:	4634      	mov	r4, r6
  407f6a:	2500      	movs	r5, #0
  407f6c:	4606      	mov	r6, r0
  407f6e:	07fa      	lsls	r2, r7, #31
  407f70:	d509      	bpl.n	407f86 <_svfiprintf_r+0x3dc>
  407f72:	ea54 0205 	orrs.w	r2, r4, r5
  407f76:	d006      	beq.n	407f86 <_svfiprintf_r+0x3dc>
  407f78:	2230      	movs	r2, #48	; 0x30
  407f7a:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
  407f7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  407f82:	f047 0702 	orr.w	r7, r7, #2
  407f86:	2002      	movs	r0, #2
  407f88:	2100      	movs	r1, #0
  407f8a:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
  407f8e:	e004      	b.n	407f9a <_svfiprintf_r+0x3f0>
  407f90:	004086be 	.word	0x004086be
  407f94:	004086cf 	.word	0x004086cf
  407f98:	2001      	movs	r0, #1
  407f9a:	f1bc 0f00 	cmp.w	ip, #0
  407f9e:	bfa8      	it	ge
  407fa0:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
  407fa4:	ea54 0105 	orrs.w	r1, r4, r5
  407fa8:	d102      	bne.n	407fb0 <_svfiprintf_r+0x406>
  407faa:	f1bc 0f00 	cmp.w	ip, #0
  407fae:	d058      	beq.n	408062 <_svfiprintf_r+0x4b8>
  407fb0:	2801      	cmp	r0, #1
  407fb2:	d01d      	beq.n	407ff0 <_svfiprintf_r+0x446>
  407fb4:	2802      	cmp	r0, #2
  407fb6:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
  407fba:	d041      	beq.n	408040 <_svfiprintf_r+0x496>
  407fbc:	f004 0207 	and.w	r2, r4, #7
  407fc0:	08e4      	lsrs	r4, r4, #3
  407fc2:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
  407fc6:	08e9      	lsrs	r1, r5, #3
  407fc8:	4604      	mov	r4, r0
  407fca:	460d      	mov	r5, r1
  407fcc:	3230      	adds	r2, #48	; 0x30
  407fce:	ea54 0105 	orrs.w	r1, r4, r5
  407fd2:	469a      	mov	sl, r3
  407fd4:	701a      	strb	r2, [r3, #0]
  407fd6:	f103 33ff 	add.w	r3, r3, #4294967295
  407fda:	d1ef      	bne.n	407fbc <_svfiprintf_r+0x412>
  407fdc:	07f8      	lsls	r0, r7, #31
  407fde:	4655      	mov	r5, sl
  407fe0:	d54a      	bpl.n	408078 <_svfiprintf_r+0x4ce>
  407fe2:	2a30      	cmp	r2, #48	; 0x30
  407fe4:	d048      	beq.n	408078 <_svfiprintf_r+0x4ce>
  407fe6:	2230      	movs	r2, #48	; 0x30
  407fe8:	469a      	mov	sl, r3
  407fea:	f805 2c01 	strb.w	r2, [r5, #-1]
  407fee:	e043      	b.n	408078 <_svfiprintf_r+0x4ce>
  407ff0:	2d00      	cmp	r5, #0
  407ff2:	bf08      	it	eq
  407ff4:	2c0a      	cmpeq	r4, #10
  407ff6:	d203      	bcs.n	408000 <_svfiprintf_r+0x456>
  407ff8:	3430      	adds	r4, #48	; 0x30
  407ffa:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
  407ffe:	e036      	b.n	40806e <_svfiprintf_r+0x4c4>
  408000:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
  408004:	9302      	str	r3, [sp, #8]
  408006:	4620      	mov	r0, r4
  408008:	4629      	mov	r1, r5
  40800a:	220a      	movs	r2, #10
  40800c:	2300      	movs	r3, #0
  40800e:	f8cd c000 	str.w	ip, [sp]
  408012:	f7fe f8cb 	bl	4061ac <__aeabi_uldivmod>
  408016:	9802      	ldr	r0, [sp, #8]
  408018:	f8dd a008 	ldr.w	sl, [sp, #8]
  40801c:	3230      	adds	r2, #48	; 0x30
  40801e:	f800 2901 	strb.w	r2, [r0], #-1
  408022:	4629      	mov	r1, r5
  408024:	9002      	str	r0, [sp, #8]
  408026:	220a      	movs	r2, #10
  408028:	4620      	mov	r0, r4
  40802a:	2300      	movs	r3, #0
  40802c:	f7fe f8be 	bl	4061ac <__aeabi_uldivmod>
  408030:	4604      	mov	r4, r0
  408032:	460d      	mov	r5, r1
  408034:	ea54 0105 	orrs.w	r1, r4, r5
  408038:	f8dd c000 	ldr.w	ip, [sp]
  40803c:	d1e3      	bne.n	408006 <_svfiprintf_r+0x45c>
  40803e:	e01b      	b.n	408078 <_svfiprintf_r+0x4ce>
  408040:	f004 000f 	and.w	r0, r4, #15
  408044:	9905      	ldr	r1, [sp, #20]
  408046:	0924      	lsrs	r4, r4, #4
  408048:	5c0a      	ldrb	r2, [r1, r0]
  40804a:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
  40804e:	0929      	lsrs	r1, r5, #4
  408050:	4604      	mov	r4, r0
  408052:	460d      	mov	r5, r1
  408054:	469a      	mov	sl, r3
  408056:	f803 2901 	strb.w	r2, [r3], #-1
  40805a:	ea54 0205 	orrs.w	r2, r4, r5
  40805e:	d1ef      	bne.n	408040 <_svfiprintf_r+0x496>
  408060:	e00a      	b.n	408078 <_svfiprintf_r+0x4ce>
  408062:	b938      	cbnz	r0, 408074 <_svfiprintf_r+0x4ca>
  408064:	07f9      	lsls	r1, r7, #31
  408066:	d505      	bpl.n	408074 <_svfiprintf_r+0x4ca>
  408068:	2030      	movs	r0, #48	; 0x30
  40806a:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
  40806e:	f10d 0a5f 	add.w	sl, sp, #95	; 0x5f
  408072:	e001      	b.n	408078 <_svfiprintf_r+0x4ce>
  408074:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
  408078:	ad18      	add	r5, sp, #96	; 0x60
  40807a:	ebca 0405 	rsb	r4, sl, r5
  40807e:	4665      	mov	r5, ip
  408080:	e00f      	b.n	4080a2 <_svfiprintf_r+0x4f8>
  408082:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
  408086:	2b00      	cmp	r3, #0
  408088:	f000 8176 	beq.w	408378 <_svfiprintf_r+0x7ce>
  40808c:	2500      	movs	r5, #0
  40808e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  408092:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
  408096:	2401      	movs	r4, #1
  408098:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
  40809c:	e001      	b.n	4080a2 <_svfiprintf_r+0x4f8>
  40809e:	4664      	mov	r4, ip
  4080a0:	4605      	mov	r5, r0
  4080a2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
  4080a6:	42ac      	cmp	r4, r5
  4080a8:	bfac      	ite	ge
  4080aa:	4621      	movge	r1, r4
  4080ac:	4629      	movlt	r1, r5
  4080ae:	9102      	str	r1, [sp, #8]
  4080b0:	b113      	cbz	r3, 4080b8 <_svfiprintf_r+0x50e>
  4080b2:	9802      	ldr	r0, [sp, #8]
  4080b4:	1c42      	adds	r2, r0, #1
  4080b6:	9202      	str	r2, [sp, #8]
  4080b8:	f017 0102 	ands.w	r1, r7, #2
  4080bc:	9106      	str	r1, [sp, #24]
  4080be:	d002      	beq.n	4080c6 <_svfiprintf_r+0x51c>
  4080c0:	9b02      	ldr	r3, [sp, #8]
  4080c2:	1c98      	adds	r0, r3, #2
  4080c4:	9002      	str	r0, [sp, #8]
  4080c6:	f017 0284 	ands.w	r2, r7, #132	; 0x84
  4080ca:	9207      	str	r2, [sp, #28]
  4080cc:	d13c      	bne.n	408148 <_svfiprintf_r+0x59e>
  4080ce:	9903      	ldr	r1, [sp, #12]
  4080d0:	9b02      	ldr	r3, [sp, #8]
  4080d2:	1acb      	subs	r3, r1, r3
  4080d4:	2b00      	cmp	r3, #0
  4080d6:	dd37      	ble.n	408148 <_svfiprintf_r+0x59e>
  4080d8:	48a5      	ldr	r0, [pc, #660]	; (408370 <_svfiprintf_r+0x7c6>)
  4080da:	2b10      	cmp	r3, #16
  4080dc:	f8c8 0000 	str.w	r0, [r8]
  4080e0:	dd1b      	ble.n	40811a <_svfiprintf_r+0x570>
  4080e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4080e4:	980d      	ldr	r0, [sp, #52]	; 0x34
  4080e6:	2110      	movs	r1, #16
  4080e8:	f8c8 1004 	str.w	r1, [r8, #4]
  4080ec:	1c51      	adds	r1, r2, #1
  4080ee:	3010      	adds	r0, #16
  4080f0:	2907      	cmp	r1, #7
  4080f2:	900d      	str	r0, [sp, #52]	; 0x34
  4080f4:	910c      	str	r1, [sp, #48]	; 0x30
  4080f6:	dc02      	bgt.n	4080fe <_svfiprintf_r+0x554>
  4080f8:	f108 0808 	add.w	r8, r8, #8
  4080fc:	e00b      	b.n	408116 <_svfiprintf_r+0x56c>
  4080fe:	4658      	mov	r0, fp
  408100:	4649      	mov	r1, r9
  408102:	aa0b      	add	r2, sp, #44	; 0x2c
  408104:	9300      	str	r3, [sp, #0]
  408106:	f7ff fcd3 	bl	407ab0 <__ssprint_r>
  40810a:	9b00      	ldr	r3, [sp, #0]
  40810c:	2800      	cmp	r0, #0
  40810e:	f040 813a 	bne.w	408386 <_svfiprintf_r+0x7dc>
  408112:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  408116:	3b10      	subs	r3, #16
  408118:	e7de      	b.n	4080d8 <_svfiprintf_r+0x52e>
  40811a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40811c:	f8c8 3004 	str.w	r3, [r8, #4]
  408120:	18d1      	adds	r1, r2, r3
  408122:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408124:	910d      	str	r1, [sp, #52]	; 0x34
  408126:	1c58      	adds	r0, r3, #1
  408128:	2807      	cmp	r0, #7
  40812a:	900c      	str	r0, [sp, #48]	; 0x30
  40812c:	dc02      	bgt.n	408134 <_svfiprintf_r+0x58a>
  40812e:	f108 0808 	add.w	r8, r8, #8
  408132:	e009      	b.n	408148 <_svfiprintf_r+0x59e>
  408134:	4658      	mov	r0, fp
  408136:	4649      	mov	r1, r9
  408138:	aa0b      	add	r2, sp, #44	; 0x2c
  40813a:	f7ff fcb9 	bl	407ab0 <__ssprint_r>
  40813e:	2800      	cmp	r0, #0
  408140:	f040 8121 	bne.w	408386 <_svfiprintf_r+0x7dc>
  408144:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  408148:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
  40814c:	b1da      	cbz	r2, 408186 <_svfiprintf_r+0x5dc>
  40814e:	f10d 0127 	add.w	r1, sp, #39	; 0x27
  408152:	f8c8 1000 	str.w	r1, [r8]
  408156:	990c      	ldr	r1, [sp, #48]	; 0x30
  408158:	980d      	ldr	r0, [sp, #52]	; 0x34
  40815a:	2301      	movs	r3, #1
  40815c:	f8c8 3004 	str.w	r3, [r8, #4]
  408160:	1c4b      	adds	r3, r1, #1
  408162:	1c42      	adds	r2, r0, #1
  408164:	2b07      	cmp	r3, #7
  408166:	920d      	str	r2, [sp, #52]	; 0x34
  408168:	930c      	str	r3, [sp, #48]	; 0x30
  40816a:	dc02      	bgt.n	408172 <_svfiprintf_r+0x5c8>
  40816c:	f108 0808 	add.w	r8, r8, #8
  408170:	e009      	b.n	408186 <_svfiprintf_r+0x5dc>
  408172:	4658      	mov	r0, fp
  408174:	4649      	mov	r1, r9
  408176:	aa0b      	add	r2, sp, #44	; 0x2c
  408178:	f7ff fc9a 	bl	407ab0 <__ssprint_r>
  40817c:	2800      	cmp	r0, #0
  40817e:	f040 8102 	bne.w	408386 <_svfiprintf_r+0x7dc>
  408182:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  408186:	9806      	ldr	r0, [sp, #24]
  408188:	b1d0      	cbz	r0, 4081c0 <_svfiprintf_r+0x616>
  40818a:	aa0a      	add	r2, sp, #40	; 0x28
  40818c:	f8c8 2000 	str.w	r2, [r8]
  408190:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408192:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408194:	2102      	movs	r1, #2
  408196:	f8c8 1004 	str.w	r1, [r8, #4]
  40819a:	1c51      	adds	r1, r2, #1
  40819c:	1c98      	adds	r0, r3, #2
  40819e:	2907      	cmp	r1, #7
  4081a0:	900d      	str	r0, [sp, #52]	; 0x34
  4081a2:	910c      	str	r1, [sp, #48]	; 0x30
  4081a4:	dc02      	bgt.n	4081ac <_svfiprintf_r+0x602>
  4081a6:	f108 0808 	add.w	r8, r8, #8
  4081aa:	e009      	b.n	4081c0 <_svfiprintf_r+0x616>
  4081ac:	4658      	mov	r0, fp
  4081ae:	4649      	mov	r1, r9
  4081b0:	aa0b      	add	r2, sp, #44	; 0x2c
  4081b2:	f7ff fc7d 	bl	407ab0 <__ssprint_r>
  4081b6:	2800      	cmp	r0, #0
  4081b8:	f040 80e5 	bne.w	408386 <_svfiprintf_r+0x7dc>
  4081bc:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  4081c0:	9b07      	ldr	r3, [sp, #28]
  4081c2:	2b80      	cmp	r3, #128	; 0x80
  4081c4:	d13c      	bne.n	408240 <_svfiprintf_r+0x696>
  4081c6:	9803      	ldr	r0, [sp, #12]
  4081c8:	9a02      	ldr	r2, [sp, #8]
  4081ca:	1a83      	subs	r3, r0, r2
  4081cc:	2b00      	cmp	r3, #0
  4081ce:	dd37      	ble.n	408240 <_svfiprintf_r+0x696>
  4081d0:	4968      	ldr	r1, [pc, #416]	; (408374 <_svfiprintf_r+0x7ca>)
  4081d2:	2b10      	cmp	r3, #16
  4081d4:	f8c8 1000 	str.w	r1, [r8]
  4081d8:	dd1b      	ble.n	408212 <_svfiprintf_r+0x668>
  4081da:	980c      	ldr	r0, [sp, #48]	; 0x30
  4081dc:	990d      	ldr	r1, [sp, #52]	; 0x34
  4081de:	2210      	movs	r2, #16
  4081e0:	f8c8 2004 	str.w	r2, [r8, #4]
  4081e4:	1c42      	adds	r2, r0, #1
  4081e6:	3110      	adds	r1, #16
  4081e8:	2a07      	cmp	r2, #7
  4081ea:	910d      	str	r1, [sp, #52]	; 0x34
  4081ec:	920c      	str	r2, [sp, #48]	; 0x30
  4081ee:	dc02      	bgt.n	4081f6 <_svfiprintf_r+0x64c>
  4081f0:	f108 0808 	add.w	r8, r8, #8
  4081f4:	e00b      	b.n	40820e <_svfiprintf_r+0x664>
  4081f6:	4658      	mov	r0, fp
  4081f8:	4649      	mov	r1, r9
  4081fa:	aa0b      	add	r2, sp, #44	; 0x2c
  4081fc:	9300      	str	r3, [sp, #0]
  4081fe:	f7ff fc57 	bl	407ab0 <__ssprint_r>
  408202:	9b00      	ldr	r3, [sp, #0]
  408204:	2800      	cmp	r0, #0
  408206:	f040 80be 	bne.w	408386 <_svfiprintf_r+0x7dc>
  40820a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  40820e:	3b10      	subs	r3, #16
  408210:	e7de      	b.n	4081d0 <_svfiprintf_r+0x626>
  408212:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408214:	980d      	ldr	r0, [sp, #52]	; 0x34
  408216:	f8c8 3004 	str.w	r3, [r8, #4]
  40821a:	1c51      	adds	r1, r2, #1
  40821c:	18c3      	adds	r3, r0, r3
  40821e:	2907      	cmp	r1, #7
  408220:	930d      	str	r3, [sp, #52]	; 0x34
  408222:	910c      	str	r1, [sp, #48]	; 0x30
  408224:	dc02      	bgt.n	40822c <_svfiprintf_r+0x682>
  408226:	f108 0808 	add.w	r8, r8, #8
  40822a:	e009      	b.n	408240 <_svfiprintf_r+0x696>
  40822c:	4658      	mov	r0, fp
  40822e:	4649      	mov	r1, r9
  408230:	aa0b      	add	r2, sp, #44	; 0x2c
  408232:	f7ff fc3d 	bl	407ab0 <__ssprint_r>
  408236:	2800      	cmp	r0, #0
  408238:	f040 80a5 	bne.w	408386 <_svfiprintf_r+0x7dc>
  40823c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  408240:	1b2d      	subs	r5, r5, r4
  408242:	2d00      	cmp	r5, #0
  408244:	dd34      	ble.n	4082b0 <_svfiprintf_r+0x706>
  408246:	484b      	ldr	r0, [pc, #300]	; (408374 <_svfiprintf_r+0x7ca>)
  408248:	2d10      	cmp	r5, #16
  40824a:	f8c8 0000 	str.w	r0, [r8]
  40824e:	dd19      	ble.n	408284 <_svfiprintf_r+0x6da>
  408250:	980c      	ldr	r0, [sp, #48]	; 0x30
  408252:	990d      	ldr	r1, [sp, #52]	; 0x34
  408254:	1c43      	adds	r3, r0, #1
  408256:	2210      	movs	r2, #16
  408258:	3110      	adds	r1, #16
  40825a:	2b07      	cmp	r3, #7
  40825c:	f8c8 2004 	str.w	r2, [r8, #4]
  408260:	910d      	str	r1, [sp, #52]	; 0x34
  408262:	930c      	str	r3, [sp, #48]	; 0x30
  408264:	dc02      	bgt.n	40826c <_svfiprintf_r+0x6c2>
  408266:	f108 0808 	add.w	r8, r8, #8
  40826a:	e009      	b.n	408280 <_svfiprintf_r+0x6d6>
  40826c:	4658      	mov	r0, fp
  40826e:	4649      	mov	r1, r9
  408270:	aa0b      	add	r2, sp, #44	; 0x2c
  408272:	f7ff fc1d 	bl	407ab0 <__ssprint_r>
  408276:	2800      	cmp	r0, #0
  408278:	f040 8085 	bne.w	408386 <_svfiprintf_r+0x7dc>
  40827c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  408280:	3d10      	subs	r5, #16
  408282:	e7e0      	b.n	408246 <_svfiprintf_r+0x69c>
  408284:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408286:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408288:	f8c8 5004 	str.w	r5, [r8, #4]
  40828c:	1c51      	adds	r1, r2, #1
  40828e:	195d      	adds	r5, r3, r5
  408290:	2907      	cmp	r1, #7
  408292:	950d      	str	r5, [sp, #52]	; 0x34
  408294:	910c      	str	r1, [sp, #48]	; 0x30
  408296:	dc02      	bgt.n	40829e <_svfiprintf_r+0x6f4>
  408298:	f108 0808 	add.w	r8, r8, #8
  40829c:	e008      	b.n	4082b0 <_svfiprintf_r+0x706>
  40829e:	4658      	mov	r0, fp
  4082a0:	4649      	mov	r1, r9
  4082a2:	aa0b      	add	r2, sp, #44	; 0x2c
  4082a4:	f7ff fc04 	bl	407ab0 <__ssprint_r>
  4082a8:	2800      	cmp	r0, #0
  4082aa:	d16c      	bne.n	408386 <_svfiprintf_r+0x7dc>
  4082ac:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  4082b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4082b2:	980d      	ldr	r0, [sp, #52]	; 0x34
  4082b4:	f8c8 4004 	str.w	r4, [r8, #4]
  4082b8:	1c5a      	adds	r2, r3, #1
  4082ba:	1904      	adds	r4, r0, r4
  4082bc:	2a07      	cmp	r2, #7
  4082be:	f8c8 a000 	str.w	sl, [r8]
  4082c2:	940d      	str	r4, [sp, #52]	; 0x34
  4082c4:	920c      	str	r2, [sp, #48]	; 0x30
  4082c6:	dc02      	bgt.n	4082ce <_svfiprintf_r+0x724>
  4082c8:	f108 0308 	add.w	r3, r8, #8
  4082cc:	e007      	b.n	4082de <_svfiprintf_r+0x734>
  4082ce:	4658      	mov	r0, fp
  4082d0:	4649      	mov	r1, r9
  4082d2:	aa0b      	add	r2, sp, #44	; 0x2c
  4082d4:	f7ff fbec 	bl	407ab0 <__ssprint_r>
  4082d8:	2800      	cmp	r0, #0
  4082da:	d154      	bne.n	408386 <_svfiprintf_r+0x7dc>
  4082dc:	ab18      	add	r3, sp, #96	; 0x60
  4082de:	077a      	lsls	r2, r7, #29
  4082e0:	d40b      	bmi.n	4082fa <_svfiprintf_r+0x750>
  4082e2:	9804      	ldr	r0, [sp, #16]
  4082e4:	9b02      	ldr	r3, [sp, #8]
  4082e6:	9a03      	ldr	r2, [sp, #12]
  4082e8:	990d      	ldr	r1, [sp, #52]	; 0x34
  4082ea:	4293      	cmp	r3, r2
  4082ec:	bfac      	ite	ge
  4082ee:	18c0      	addge	r0, r0, r3
  4082f0:	1880      	addlt	r0, r0, r2
  4082f2:	9004      	str	r0, [sp, #16]
  4082f4:	2900      	cmp	r1, #0
  4082f6:	d036      	beq.n	408366 <_svfiprintf_r+0x7bc>
  4082f8:	e02f      	b.n	40835a <_svfiprintf_r+0x7b0>
  4082fa:	9c03      	ldr	r4, [sp, #12]
  4082fc:	9902      	ldr	r1, [sp, #8]
  4082fe:	1a64      	subs	r4, r4, r1
  408300:	2c00      	cmp	r4, #0
  408302:	ddee      	ble.n	4082e2 <_svfiprintf_r+0x738>
  408304:	481a      	ldr	r0, [pc, #104]	; (408370 <_svfiprintf_r+0x7c6>)
  408306:	2c10      	cmp	r4, #16
  408308:	6018      	str	r0, [r3, #0]
  40830a:	dd15      	ble.n	408338 <_svfiprintf_r+0x78e>
  40830c:	990c      	ldr	r1, [sp, #48]	; 0x30
  40830e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  408310:	2010      	movs	r0, #16
  408312:	6058      	str	r0, [r3, #4]
  408314:	1c48      	adds	r0, r1, #1
  408316:	3210      	adds	r2, #16
  408318:	2807      	cmp	r0, #7
  40831a:	920d      	str	r2, [sp, #52]	; 0x34
  40831c:	900c      	str	r0, [sp, #48]	; 0x30
  40831e:	dc01      	bgt.n	408324 <_svfiprintf_r+0x77a>
  408320:	3308      	adds	r3, #8
  408322:	e007      	b.n	408334 <_svfiprintf_r+0x78a>
  408324:	4658      	mov	r0, fp
  408326:	4649      	mov	r1, r9
  408328:	aa0b      	add	r2, sp, #44	; 0x2c
  40832a:	f7ff fbc1 	bl	407ab0 <__ssprint_r>
  40832e:	2800      	cmp	r0, #0
  408330:	d129      	bne.n	408386 <_svfiprintf_r+0x7dc>
  408332:	ab18      	add	r3, sp, #96	; 0x60
  408334:	3c10      	subs	r4, #16
  408336:	e7e5      	b.n	408304 <_svfiprintf_r+0x75a>
  408338:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40833a:	605c      	str	r4, [r3, #4]
  40833c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40833e:	1c51      	adds	r1, r2, #1
  408340:	191c      	adds	r4, r3, r4
  408342:	2907      	cmp	r1, #7
  408344:	940d      	str	r4, [sp, #52]	; 0x34
  408346:	910c      	str	r1, [sp, #48]	; 0x30
  408348:	ddcb      	ble.n	4082e2 <_svfiprintf_r+0x738>
  40834a:	4658      	mov	r0, fp
  40834c:	4649      	mov	r1, r9
  40834e:	aa0b      	add	r2, sp, #44	; 0x2c
  408350:	f7ff fbae 	bl	407ab0 <__ssprint_r>
  408354:	2800      	cmp	r0, #0
  408356:	d0c4      	beq.n	4082e2 <_svfiprintf_r+0x738>
  408358:	e015      	b.n	408386 <_svfiprintf_r+0x7dc>
  40835a:	4658      	mov	r0, fp
  40835c:	4649      	mov	r1, r9
  40835e:	aa0b      	add	r2, sp, #44	; 0x2c
  408360:	f7ff fba6 	bl	407ab0 <__ssprint_r>
  408364:	b978      	cbnz	r0, 408386 <_svfiprintf_r+0x7dc>
  408366:	2500      	movs	r5, #0
  408368:	950c      	str	r5, [sp, #48]	; 0x30
  40836a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  40836e:	e445      	b.n	407bfc <_svfiprintf_r+0x52>
  408370:	004086e0 	.word	0x004086e0
  408374:	004086f0 	.word	0x004086f0
  408378:	980d      	ldr	r0, [sp, #52]	; 0x34
  40837a:	b120      	cbz	r0, 408386 <_svfiprintf_r+0x7dc>
  40837c:	4658      	mov	r0, fp
  40837e:	4649      	mov	r1, r9
  408380:	aa0b      	add	r2, sp, #44	; 0x2c
  408382:	f7ff fb95 	bl	407ab0 <__ssprint_r>
  408386:	f8b9 200c 	ldrh.w	r2, [r9, #12]
  40838a:	9b04      	ldr	r3, [sp, #16]
  40838c:	f002 0140 	and.w	r1, r2, #64	; 0x40
  408390:	b208      	sxth	r0, r1
  408392:	2800      	cmp	r0, #0
  408394:	bf18      	it	ne
  408396:	f04f 33ff 	movne.w	r3, #4294967295
  40839a:	4618      	mov	r0, r3
  40839c:	b029      	add	sp, #164	; 0xa4
  40839e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4083a2:	bf00      	nop
  4083a4:	656d6f53 	.word	0x656d6f53
  4083a8:	43565320 	.word	0x43565320
  4083ac:	72724520 	.word	0x72724520
  4083b0:	4820726f 	.word	0x4820726f
  4083b4:	65707061 	.word	0x65707061
  4083b8:	0064656e 	.word	0x0064656e
  4083bc:	6e69616d 	.word	0x6e69616d
  4083c0:	00000020 	.word	0x00000020
  4083c4:	65726874 	.word	0x65726874
  4083c8:	745f6461 	.word	0x745f6461
  4083cc:	20706d65 	.word	0x20706d65
  4083d0:	00000000 	.word	0x00000000
  4083d4:	65726874 	.word	0x65726874
  4083d8:	6c5f6461 	.word	0x6c5f6461
  4083dc:	74686769 	.word	0x74686769
  4083e0:	00000020 	.word	0x00000020
  4083e4:	20202020 	.word	0x20202020
  4083e8:	20202020 	.word	0x20202020
  4083ec:	20202020 	.word	0x20202020
  4083f0:	20202020 	.word	0x20202020
  4083f4:	20202020 	.word	0x20202020
  4083f8:	20202020 	.word	0x20202020
  4083fc:	20202020 	.word	0x20202020
  408400:	20202020 	.word	0x20202020
  408404:	20202020 	.word	0x20202020
  408408:	20202020 	.word	0x20202020
  40840c:	20202020 	.word	0x20202020
  408410:	20202020 	.word	0x20202020
  408414:	20202020 	.word	0x20202020
  408418:	20202020 	.word	0x20202020
  40841c:	20202020 	.word	0x20202020
  408420:	20202020 	.word	0x20202020
  408424:	20202020 	.word	0x20202020
  408428:	20202020 	.word	0x20202020
  40842c:	20202020 	.word	0x20202020
  408430:	20202020 	.word	0x20202020
  408434:	20202020 	.word	0x20202020
  408438:	20202020 	.word	0x20202020
  40843c:	20202020 	.word	0x20202020
  408440:	20202020 	.word	0x20202020
  408444:	20202020 	.word	0x20202020
  408448:	00002020 	.word	0x00002020
  40844c:	6867694c 	.word	0x6867694c
  408450:	4f207374 	.word	0x4f207374
  408454:	2020206e 	.word	0x2020206e
  408458:	00002020 	.word	0x00002020
  40845c:	6867694c 	.word	0x6867694c
  408460:	4f207374 	.word	0x4f207374
  408464:	00006666 	.word	0x00006666
  408468:	55512049 	.word	0x55512049
  40846c:	20215449 	.word	0x20215449
  408470:	20202020 	.word	0x20202020
  408474:	20202020 	.word	0x20202020
  408478:	00202020 	.word	0x00202020
  40847c:	00006425 	.word	0x00006425
  408480:	00000063 	.word	0x00000063
  408484:	59524556 	.word	0x59524556
  408488:	544f4820 	.word	0x544f4820
  40848c:	00000000 	.word	0x00000000
  408490:	204f4f54 	.word	0x204f4f54
  408494:	444c4f43 	.word	0x444c4f43
  408498:	00000000 	.word	0x00000000
  40849c:	5f5f5f5f 	.word	0x5f5f5f5f
  4084a0:	5f5f5f5f 	.word	0x5f5f5f5f
  4084a4:	00005f5f 	.word	0x00005f5f
  4084a8:	00534f53 	.word	0x00534f53
  4084ac:	53202020 	.word	0x53202020
  4084b0:	0000534f 	.word	0x0000534f
  4084b4:	20534f53 	.word	0x20534f53
  4084b8:	20202020 	.word	0x20202020
  4084bc:	20202020 	.word	0x20202020
  4084c0:	20202020 	.word	0x20202020
  4084c4:	00000000 	.word	0x00000000
  4084c8:	20202020 	.word	0x20202020
  4084cc:	20202020 	.word	0x20202020
  4084d0:	20202020 	.word	0x20202020
  4084d4:	65572020 	.word	0x65572020
  4084d8:	6d6f636c 	.word	0x6d6f636c
  4084dc:	6f742065 	.word	0x6f742065
  4084e0:	00000000 	.word	0x00000000
  4084e4:	20202020 	.word	0x20202020
  4084e8:	20202020 	.word	0x20202020
  4084ec:	20202020 	.word	0x20202020
  4084f0:	65642020 	.word	0x65642020
  4084f4:	69766f4a 	.word	0x69766f4a
  4084f8:	534f5320 	.word	0x534f5320
  4084fc:	00000000 	.word	0x00000000
  408500:	5f5f5f5f 	.word	0x5f5f5f5f
  408504:	5f5f5f5f 	.word	0x5f5f5f5f
  408508:	5f5f5f5f 	.word	0x5f5f5f5f
  40850c:	5f5f5f5f 	.word	0x5f5f5f5f
  408510:	5f5f5f5f 	.word	0x5f5f5f5f
  408514:	5f5f5f5f 	.word	0x5f5f5f5f
  408518:	5f5f5f5f 	.word	0x5f5f5f5f
  40851c:	5f5f5f5f 	.word	0x5f5f5f5f
  408520:	00000000 	.word	0x00000000
  408524:	696c6320 	.word	0x696c6320
  408528:	61206b63 	.word	0x61206b63
  40852c:	6220796e 	.word	0x6220796e
  408530:	6f747475 	.word	0x6f747475
  408534:	6f74206e 	.word	0x6f74206e
  408538:	6e6f6320 	.word	0x6e6f6320
  40853c:	756e6974 	.word	0x756e6974
  408540:	00000065 	.word	0x00000065
  408544:	6c697542 	.word	0x6c697542
  408548:	6e692074 	.word	0x6e692074
  40854c:	70704120 	.word	0x70704120
  408550:	00000073 	.word	0x00000073
  408554:	6f6f6843 	.word	0x6f6f6843
  408558:	61206573 	.word	0x61206573
  40855c:	69756220 	.word	0x69756220
  408560:	6920746c 	.word	0x6920746c
  408564:	7061206e 	.word	0x7061206e
  408568:	00000070 	.word	0x00000070
  40856c:	202d3c20 	.word	0x202d3c20
  408570:	20202020 	.word	0x20202020
  408574:	20202020 	.word	0x20202020
  408578:	20202020 	.word	0x20202020
  40857c:	6e75614c 	.word	0x6e75614c
  408580:	20206863 	.word	0x20206863
  408584:	20202020 	.word	0x20202020
  408588:	20202020 	.word	0x20202020
  40858c:	2d202020 	.word	0x2d202020
  408590:	0000003e 	.word	0x0000003e
  408594:	64616f4c 	.word	0x64616f4c
  408598:	70704120 	.word	0x70704120
  40859c:	72662073 	.word	0x72662073
  4085a0:	53206d6f 	.word	0x53206d6f
  4085a4:	61432044 	.word	0x61432044
  4085a8:	00006472 	.word	0x00006472
  4085ac:	73277449 	.word	0x73277449
  4085b0:	63206120 	.word	0x63206120
  4085b4:	70616568 	.word	0x70616568
  4085b8:	70706120 	.word	0x70706120
  4085bc:	6f747320 	.word	0x6f747320
  4085c0:	00006572 	.word	0x00006572
  4085c4:	65726854 	.word	0x65726854
  4085c8:	44206461 	.word	0x44206461
  4085cc:	206f6d65 	.word	0x206f6d65
  4085d0:	65646f4d 	.word	0x65646f4d
  4085d4:	00000000 	.word	0x00000000
  4085d8:	20656553 	.word	0x20656553
  4085dc:	736f6874 	.word	0x736f6874
  4085e0:	68742065 	.word	0x68742065
  4085e4:	64616572 	.word	0x64616572
  4085e8:	75722073 	.word	0x75722073
  4085ec:	0000006e 	.word	0x0000006e
  4085f0:	706d6554 	.word	0x706d6554
  4085f4:	74617265 	.word	0x74617265
  4085f8:	20657275 	.word	0x20657275
  4085fc:	65646f4d 	.word	0x65646f4d
  408600:	00000000 	.word	0x00000000
  408604:	20776f48 	.word	0x20776f48
  408608:	646c6f63 	.word	0x646c6f63
  40860c:	20736920 	.word	0x20736920
  408610:	003f7469 	.word	0x003f7469
  408614:	63614220 	.word	0x63614220
  408618:	2020206b 	.word	0x2020206b
  40861c:	20202020 	.word	0x20202020
  408620:	4c202020 	.word	0x4c202020
  408624:	636e7561 	.word	0x636e7561
  408628:	20202068 	.word	0x20202068
  40862c:	20202020 	.word	0x20202020
  408630:	20202020 	.word	0x20202020
  408634:	003e2d20 	.word	0x003e2d20
  408638:	6867694c 	.word	0x6867694c
  40863c:	6f4d2074 	.word	0x6f4d2074
  408640:	00006564 	.word	0x00006564
  408644:	6e727554 	.word	0x6e727554
  408648:	6f687420 	.word	0x6f687420
  40864c:	6c206573 	.word	0x6c206573
  408650:	74686769 	.word	0x74686769
  408654:	666f2073 	.word	0x666f2073
  408658:	00000066 	.word	0x00000066
  40865c:	6f6d6544 	.word	0x6f6d6544
  408660:	20666f20 	.word	0x20666f20
  408664:	65726874 	.word	0x65726874
  408668:	00736461 	.word	0x00736461
  40866c:	00000025 	.word	0x00000025
  408670:	59524556 	.word	0x59524556
  408674:	52414420 	.word	0x52414420
  408678:	0000004b 	.word	0x0000004b
  40867c:	204f4f54 	.word	0x204f4f54
  408680:	47495242 	.word	0x47495242
  408684:	00005448 	.word	0x00005448
  408688:	5f5f5f5f 	.word	0x5f5f5f5f
  40868c:	5f5f5f5f 	.word	0x5f5f5f5f
  408690:	5f5f5f5f 	.word	0x5f5f5f5f
  408694:	0000005f 	.word	0x0000005f

00408698 <_global_impure_ptr>:
  408698:	200004c8 20200043                                ... C.

0040869e <blanks.6650>:
  40869e:	20202020 20202020 20202020 20202020                     

004086ae <zeroes.6651>:
  4086ae:	30303030 30303030 30303030 30303030     0000000000000000
  4086be:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  4086ce:	32313000 36353433 61393837 65646362     .0123456789abcde
  4086de:	20200066                                         f.

004086e0 <blanks.6664>:
  4086e0:	20202020 20202020 20202020 20202020                     

004086f0 <zeroes.6665>:
  4086f0:	30303030 30303030 30303030 30303030     0000000000000000

00408700 <_init>:
  408700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408702:	bf00      	nop
  408704:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408706:	bc08      	pop	{r3}
  408708:	469e      	mov	lr, r3
  40870a:	4770      	bx	lr

0040870c <__init_array_start>:
  40870c:	00407135 	.word	0x00407135

00408710 <__frame_dummy_init_array_entry>:
  408710:	00400149                                I.@.

00408714 <_fini>:
  408714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408716:	bf00      	nop
  408718:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40871a:	bc08      	pop	{r3}
  40871c:	469e      	mov	lr, r3
  40871e:	4770      	bx	lr

00408720 <__fini_array_start>:
  408720:	00400121 	.word	0x00400121

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <firstExec>:
2000000c:	0001 0000                                   ....

20000010 <udi_api_cdc_data>:
20000010:	097d 0040 06fd 0040 03f5 0040 03fd 0040     }.@...@...@...@.
20000020:	06a5 0040                                   ..@.

20000024 <udi_api_cdc_comm>:
20000024:	072d 0040 03e1 0040 0405 0040 03fd 0040     -.@...@...@...@.
20000034:	0000 0000                                   ....

20000038 <udc_config>:
20000038:	0050 2000 0048 2000                         P.. H.. 

20000040 <udi_apis>:
20000040:	0024 2000 0010 2000                         $.. ... 

20000048 <udc_config_fs>:
20000048:	0064 2000 0040 2000                         d.. @.. 

20000050 <udc_device_desc>:
20000050:	0112 0200 0002 4000 03eb 2404 0100 0000     .......@...$....
20000060:	0100 0000                                   ....

20000064 <udc_desc_fs>:
20000064:	0209 0043 0102 c000 0932 0004 0100 0202     ..C.....2.......
20000074:	0001 2405 1000 0401 0224 0502 0624 0100     ...$....$...$...
20000084:	2405 0301 0701 8305 4003 1000 0409 0001     .$.......@......
20000094:	0a02 0000 0700 8105 4002 0000 0507 0202     .........@......
200000a4:	0040 0000                                   @...

200000a8 <udc_string_desc_languageid>:
200000a8:	0304 0409                                   ....

200000ac <ledState>:
200000ac:	0001 0000                                   ....

200000b0 <Font08px_58>:
200000b0:	4401 0000                                   .D..

200000b4 <Font08px_59>:
200000b4:	c401 0000                                   ....

200000b8 <Font08px_UY>:
200000b8:	0605 f008 0608 0000                         ........

200000c0 <Font08px_91>:
200000c0:	fe03 8282                                   ....

200000c4 <Font08px_92>:
200000c4:	0603 c038                                   ..8.

200000c8 <Font08px_93>:
200000c8:	8203 fe82                                   ....

200000cc <Font08px_94>:
200000cc:	0403 0402                                   ....

200000d0 <Font08px_95>:
200000d0:	8003 8080                                   ....

200000d4 <Font08px_96>:
200000d4:	0202 0004                                   ....

200000d8 <font_table>:
200000d8:	02e8 2000 02ec 2000 02f0 2000 02f4 2000     ... ... ... ... 
200000e8:	02fc 2000 0304 2000 030c 2000 0314 2000     ... ... ... ... 
200000f8:	03d8 2000 03dc 2000 03e0 2000 03e4 2000     ... ... ... ... 
20000108:	03e8 2000 03ec 2000 03f0 2000 03f4 2000     ... ... ... ... 
20000118:	0388 2000 0390 2000 0398 2000 03a0 2000     ... ... ... ... 
20000128:	0254 2000 03b0 2000 02d8 2000 025c 2000     T.. ... ... \.. 
20000138:	03c8 2000 0264 2000 00b0 2000 00b4 2000     ... d.. ... ... 
20000148:	026c 2000 0274 2000 027c 2000 0284 2000     l.. t.. |.. ... 
20000158:	028c 2000 0318 2000 0320 2000 0328 2000     ... ...  .. (.. 
20000168:	0298 2000 02a0 2000 02a8 2000 02b0 2000     ... ... ... ... 
20000178:	0344 2000 034c 2000 0350 2000 0358 2000     D.. L.. P.. X.. 
20000188:	0360 2000 0368 2000 0370 2000 0378 2000     `.. h.. p.. x.. 
20000198:	0380 2000 02b8 2000 02c0 2000 02c8 2000     ... ... ... ... 
200001a8:	02d0 2000 03a8 2000 02e0 2000 03b8 2000     ... ... ... ... 
200001b8:	03c0 2000 00b8 2000 03d0 2000 00c0 2000     ... ... ... ... 
200001c8:	00c4 2000 00c8 2000 00cc 2000 00d0 2000     ... ... ... ... 
200001d8:	00d4 2000 03f8 2000 0400 2000 0408 2000     ... ... ... ... 
200001e8:	0410 2000 0418 2000 0420 2000 0424 2000     ... ...  .. $.. 
200001f8:	042c 2000 0434 2000 0438 2000 043c 2000     ,.. 4.. 8.. <.. 
20000208:	0444 2000 0448 2000 0450 2000 0458 2000     D.. H.. P.. X.. 
20000218:	0460 2000 0468 2000 0470 2000 0474 2000     `.. h.. p.. t.. 
20000228:	047c 2000 0480 2000 0488 2000 0490 2000     |.. ... ... ... 
20000238:	0498 2000 04a0 2000 04a8 2000 0330 2000     ... ... ... 0.. 
20000248:	0334 2000 0338 2000 033c 2000               4.. 8.. <.. 

20000254 <Font08px_N4>:
20000254:	3005 2428 20fe 0000                         .0($. ..

2000025c <Font08px_N7>:
2000025c:	0205 f202 060a 0000                         ........

20000264 <Font08px_N9>:
20000264:	4c05 9292 7c92 0000                         .L...|..

2000026c <Font08px_60>:
2000026c:	1004 4428 0082 0000                         ..(D....

20000274 <Font08px_61>:
20000274:	2804 2828 0028 0000                         .((((...

2000027c <Font08px_62>:
2000027c:	8204 2844 0010 0000                         ..D(....

20000284 <Font08px_63>:
20000284:	0405 a202 0c12 0000                         ........

2000028c <Font08px_64>:
2000028c:	3808 9244 aaaa 24ba 0018 0000               .8D....$....

20000298 <Font08px_UD>:
20000298:	fe04 8282 007c 0000                         ....|...

200002a0 <Font08px_UE>:
200002a0:	fe04 9292 0082 0000                         ........

200002a8 <Font08px_UF>:
200002a8:	fe04 1212 0002 0000                         ........

200002b0 <Font08px_UG>:
200002b0:	7c05 9282 f492 0000                         .|......

200002b8 <Font08px_UQ>:
200002b8:	7c05 a282 bc42 0000                         .|..B...

200002c0 <Font08px_UR>:
200002c0:	fe04 3212 00cc 0000                         ...2....

200002c8 <Font08px_US>:
200002c8:	4c04 9292 0064 0000                         .L..d...

200002d0 <Font08px_UT>:
200002d0:	0205 fe02 0202 0000                         ........

200002d8 <Font08px_N6>:
200002d8:	7c05 9292 6492 0000                         .|...d..

200002e0 <Font08px_UV>:
200002e0:	0e05 c030 0e30 0000                         ..0.0...

200002e8 <Font08px_32>:
200002e8:	0002 0000                                   ....

200002ec <Font08px_33>:
200002ec:	be01 0000                                   ....

200002f0 <Font08px_34>:
200002f0:	0603 0600                                   ....

200002f4 <Font08px_35>:
200002f4:	2805 28fe 28fe 0000                         .(.(.(..

200002fc <Font08px_36>:
200002fc:	4805 fe54 2454 0000                         .HT.T$..

20000304 <Font08px_37>:
20000304:	4605 1026 c4c8 0000                         .F&.....

2000030c <Font08px_38>:
2000030c:	6c05 ac92 a040 0000                         .l..@...

20000314 <Font08px_39>:
20000314:	0601 0000                                   ....

20000318 <Font08px_UA>:
20000318:	f805 1214 f814 0000                         ........

20000320 <Font08px_UB>:
20000320:	fe04 9292 006c 0000                         ....l...

20000328 <Font08px_UC>:
20000328:	7c04 8282 0044 0000                         .|..D...

20000330 <Font08px_123>:
20000330:	1003 826c                                   ..l.

20000334 <Font08px_124>:
20000334:	fe01 0000                                   ....

20000338 <Font08px_125>:
20000338:	8203 106c                                   ..l.

2000033c <Font08px_126>:
2000033c:	1005 1008 1020 0000                         .... ...

20000344 <Font08px_UH>:
20000344:	fe04 1010 00fe 0000                         ........

2000034c <Font08px_UI>:
2000034c:	8203 82fe                                   ....

20000350 <Font08px_UJ>:
20000350:	4004 8080 007e 0000                         .@..~...

20000358 <Font08px_UK>:
20000358:	fe05 2810 8244 0000                         ...(D...

20000360 <Font08px_UL>:
20000360:	fe04 8080 0080 0000                         ........

20000368 <Font08px_UM>:
20000368:	fe05 0804 fe04 0000                         ........

20000370 <Font08px_UN>:
20000370:	fe05 1804 fe60 0000                         ....`...

20000378 <Font08px_UO>:
20000378:	7c04 8282 007c 0000                         .|..|...

20000380 <Font08px_UP>:
20000380:	fe04 1212 000c 0000                         ........

20000388 <Font08px_N0>:
20000388:	7c05 92a2 7c8a 0000                         .|...|..

20000390 <Font08px_N1>:
20000390:	0005 fe84 0080 0000                         ........

20000398 <Font08px_N2>:
20000398:	8405 a2c2 8c92 0000                         ........

200003a0 <Font08px_N3>:
200003a0:	4405 9282 6c92 0000                         .D...l..

200003a8 <Font08px_UU>:
200003a8:	7e04 8080 007e 0000                         .~..~...

200003b0 <Font08px_N5>:
200003b0:	5e05 8a8a 728a 0000                         .^...r..

200003b8 <Font08px_UW>:
200003b8:	3e05 38c0 3ec0 0000                         .>.8.>..

200003c0 <Font08px_UX>:
200003c0:	c605 1028 c628 0000                         ..(.(...

200003c8 <Font08px_N8>:
200003c8:	6c05 9292 6c92 0000                         .l...l..

200003d0 <Font08px_UZ>:
200003d0:	c205 92a2 868a 0000                         ........

200003d8 <Font08px_40>:
200003d8:	3803 8244                                   .8D.

200003dc <Font08px_41>:
200003dc:	8203 3844                                   ..D8

200003e0 <Font08px_42>:
200003e0:	2803 2810                                   .(.(

200003e4 <Font08px_43>:
200003e4:	1003 1038                                   ..8.

200003e8 <Font08px_44>:
200003e8:	c001 0000                                   ....

200003ec <Font08px_45>:
200003ec:	1003 1010                                   ....

200003f0 <Font08px_46>:
200003f0:	8001 0000                                   ....

200003f4 <Font08px_47>:
200003f4:	c003 0638                                   ..8.

200003f8 <Font08px_la>:
200003f8:	7004 8888 00f8 0000                         .p......

20000400 <Font08px_lb>:
20000400:	fe04 8888 0070 0000                         ....p...

20000408 <Font08px_lc>:
20000408:	7004 8888 0088 0000                         .p......

20000410 <Font08px_ld>:
20000410:	7004 8888 00fe 0000                         .p......

20000418 <Font08px_le>:
20000418:	7004 a8a8 0030 0000                         .p..0...

20000420 <Font08px_lf>:
20000420:	fc03 0212                                   ....

20000424 <Font08px_lg>:
20000424:	1004 a8a8 0078 0000                         ....x...

2000042c <Font08px_lh>:
2000042c:	fe04 0810 00f0 0000                         ........

20000434 <Font08px_li>:
20000434:	fa01 0000                                   ....

20000438 <Font08px_lj>:
20000438:	8002 007a                                   ..z.

2000043c <Font08px_lk>:
2000043c:	fe04 5020 0088 0000                         .. P....

20000444 <Font08px_ll>:
20000444:	fe01 0000                                   ....

20000448 <Font08px_lm>:
20000448:	f805 f008 f008 0000                         ........

20000450 <Font08px_ln>:
20000450:	f804 0810 00f0 0000                         ........

20000458 <Font08px_lo>:
20000458:	7004 8888 0070 0000                         .p..p...

20000460 <Font08px_lp>:
20000460:	f804 2828 0010 0000                         ..((....

20000468 <Font08px_lq>:
20000468:	1004 2828 00f8 0000                         ..((....

20000470 <Font08px_lr>:
20000470:	f803 0810                                   ....

20000474 <Font08px_ls>:
20000474:	9004 a8a8 0048 0000                         ....H...

2000047c <Font08px_lt>:
2000047c:	0803 887c                                   ..|.

20000480 <Font08px_lu>:
20000480:	7804 8080 00f8 0000                         .x......

20000488 <Font08px_lv>:
20000488:	1805 8060 1860 0000                         ..`.`...

20000490 <Font08px_lw>:
20000490:	3805 30c0 38c0 0000                         .8.0.8..

20000498 <Font08px_lx>:
20000498:	8805 2050 8850 0000                         ..P P...

200004a0 <Font08px_ly>:
200004a0:	1804 a0a0 0078 0000                         ....x...

200004a8 <Font08px_lz>:
200004a8:	c803 98a8                                   ....

200004ac <g_interrupt_enabled>:
200004ac:	0001 0000                                   ....

200004b0 <SystemCoreClock>:
200004b0:	0900 003d                                   ..=.

200004b4 <menu_screen>:
200004b4:	0002 0000                                   ....

200004b8 <menu_screen_switch>:
200004b8:	0001 0000                                   ....

200004bc <menu_mode>:
200004bc:	0002 0000                                   ....

200004c0 <_impure_ptr>:
200004c0:	04c8 2000 0000 0000                         ... ....

200004c8 <impure_data>:
200004c8:	0000 0000 07b4 2000 081c 2000 0884 2000     ....... ... ... 
	...
200004fc:	869c 0040 0000 0000 0000 0000 0000 0000     ..@.............
	...
20000570:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000580:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200008f0 <__malloc_av_>:
	...
200008f8:	08f0 2000 08f0 2000 08f8 2000 08f8 2000     ... ... ... ... 
20000908:	0900 2000 0900 2000 0908 2000 0908 2000     ... ... ... ... 
20000918:	0910 2000 0910 2000 0918 2000 0918 2000     ... ... ... ... 
20000928:	0920 2000 0920 2000 0928 2000 0928 2000      ..  .. (.. (.. 
20000938:	0930 2000 0930 2000 0938 2000 0938 2000     0.. 0.. 8.. 8.. 
20000948:	0940 2000 0940 2000 0948 2000 0948 2000     @.. @.. H.. H.. 
20000958:	0950 2000 0950 2000 0958 2000 0958 2000     P.. P.. X.. X.. 
20000968:	0960 2000 0960 2000 0968 2000 0968 2000     `.. `.. h.. h.. 
20000978:	0970 2000 0970 2000 0978 2000 0978 2000     p.. p.. x.. x.. 
20000988:	0980 2000 0980 2000 0988 2000 0988 2000     ... ... ... ... 
20000998:	0990 2000 0990 2000 0998 2000 0998 2000     ... ... ... ... 
200009a8:	09a0 2000 09a0 2000 09a8 2000 09a8 2000     ... ... ... ... 
200009b8:	09b0 2000 09b0 2000 09b8 2000 09b8 2000     ... ... ... ... 
200009c8:	09c0 2000 09c0 2000 09c8 2000 09c8 2000     ... ... ... ... 
200009d8:	09d0 2000 09d0 2000 09d8 2000 09d8 2000     ... ... ... ... 
200009e8:	09e0 2000 09e0 2000 09e8 2000 09e8 2000     ... ... ... ... 
200009f8:	09f0 2000 09f0 2000 09f8 2000 09f8 2000     ... ... ... ... 
20000a08:	0a00 2000 0a00 2000 0a08 2000 0a08 2000     ... ... ... ... 
20000a18:	0a10 2000 0a10 2000 0a18 2000 0a18 2000     ... ... ... ... 
20000a28:	0a20 2000 0a20 2000 0a28 2000 0a28 2000      ..  .. (.. (.. 
20000a38:	0a30 2000 0a30 2000 0a38 2000 0a38 2000     0.. 0.. 8.. 8.. 
20000a48:	0a40 2000 0a40 2000 0a48 2000 0a48 2000     @.. @.. H.. H.. 
20000a58:	0a50 2000 0a50 2000 0a58 2000 0a58 2000     P.. P.. X.. X.. 
20000a68:	0a60 2000 0a60 2000 0a68 2000 0a68 2000     `.. `.. h.. h.. 
20000a78:	0a70 2000 0a70 2000 0a78 2000 0a78 2000     p.. p.. x.. x.. 
20000a88:	0a80 2000 0a80 2000 0a88 2000 0a88 2000     ... ... ... ... 
20000a98:	0a90 2000 0a90 2000 0a98 2000 0a98 2000     ... ... ... ... 
20000aa8:	0aa0 2000 0aa0 2000 0aa8 2000 0aa8 2000     ... ... ... ... 
20000ab8:	0ab0 2000 0ab0 2000 0ab8 2000 0ab8 2000     ... ... ... ... 
20000ac8:	0ac0 2000 0ac0 2000 0ac8 2000 0ac8 2000     ... ... ... ... 
20000ad8:	0ad0 2000 0ad0 2000 0ad8 2000 0ad8 2000     ... ... ... ... 
20000ae8:	0ae0 2000 0ae0 2000 0ae8 2000 0ae8 2000     ... ... ... ... 
20000af8:	0af0 2000 0af0 2000 0af8 2000 0af8 2000     ... ... ... ... 
20000b08:	0b00 2000 0b00 2000 0b08 2000 0b08 2000     ... ... ... ... 
20000b18:	0b10 2000 0b10 2000 0b18 2000 0b18 2000     ... ... ... ... 
20000b28:	0b20 2000 0b20 2000 0b28 2000 0b28 2000      ..  .. (.. (.. 
20000b38:	0b30 2000 0b30 2000 0b38 2000 0b38 2000     0.. 0.. 8.. 8.. 
20000b48:	0b40 2000 0b40 2000 0b48 2000 0b48 2000     @.. @.. H.. H.. 
20000b58:	0b50 2000 0b50 2000 0b58 2000 0b58 2000     P.. P.. X.. X.. 
20000b68:	0b60 2000 0b60 2000 0b68 2000 0b68 2000     `.. `.. h.. h.. 
20000b78:	0b70 2000 0b70 2000 0b78 2000 0b78 2000     p.. p.. x.. x.. 
20000b88:	0b80 2000 0b80 2000 0b88 2000 0b88 2000     ... ... ... ... 
20000b98:	0b90 2000 0b90 2000 0b98 2000 0b98 2000     ... ... ... ... 
20000ba8:	0ba0 2000 0ba0 2000 0ba8 2000 0ba8 2000     ... ... ... ... 
20000bb8:	0bb0 2000 0bb0 2000 0bb8 2000 0bb8 2000     ... ... ... ... 
20000bc8:	0bc0 2000 0bc0 2000 0bc8 2000 0bc8 2000     ... ... ... ... 
20000bd8:	0bd0 2000 0bd0 2000 0bd8 2000 0bd8 2000     ... ... ... ... 
20000be8:	0be0 2000 0be0 2000 0be8 2000 0be8 2000     ... ... ... ... 
20000bf8:	0bf0 2000 0bf0 2000 0bf8 2000 0bf8 2000     ... ... ... ... 
20000c08:	0c00 2000 0c00 2000 0c08 2000 0c08 2000     ... ... ... ... 
20000c18:	0c10 2000 0c10 2000 0c18 2000 0c18 2000     ... ... ... ... 
20000c28:	0c20 2000 0c20 2000 0c28 2000 0c28 2000      ..  .. (.. (.. 
20000c38:	0c30 2000 0c30 2000 0c38 2000 0c38 2000     0.. 0.. 8.. 8.. 
20000c48:	0c40 2000 0c40 2000 0c48 2000 0c48 2000     @.. @.. H.. H.. 
20000c58:	0c50 2000 0c50 2000 0c58 2000 0c58 2000     P.. P.. X.. X.. 
20000c68:	0c60 2000 0c60 2000 0c68 2000 0c68 2000     `.. `.. h.. h.. 
20000c78:	0c70 2000 0c70 2000 0c78 2000 0c78 2000     p.. p.. x.. x.. 
20000c88:	0c80 2000 0c80 2000 0c88 2000 0c88 2000     ... ... ... ... 
20000c98:	0c90 2000 0c90 2000 0c98 2000 0c98 2000     ... ... ... ... 
20000ca8:	0ca0 2000 0ca0 2000 0ca8 2000 0ca8 2000     ... ... ... ... 
20000cb8:	0cb0 2000 0cb0 2000 0cb8 2000 0cb8 2000     ... ... ... ... 
20000cc8:	0cc0 2000 0cc0 2000 0cc8 2000 0cc8 2000     ... ... ... ... 
20000cd8:	0cd0 2000 0cd0 2000 0cd8 2000 0cd8 2000     ... ... ... ... 
20000ce8:	0ce0 2000 0ce0 2000 0ce8 2000 0ce8 2000     ... ... ... ... 

20000cf8 <__malloc_sbrk_base>:
20000cf8:	ffff ffff                                   ....

20000cfc <__malloc_trim_threshold>:
20000cfc:	0000 0002                                   ....
